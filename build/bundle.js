!function(t){function n(r){if(e[r])return e[r].e;var i=e[r]={e:{},i:r,l:!1};return t[r].call(i.e,i,i.e,n),i.l=!0,i.e}var e={};return n.m=t,n.c=e,n.p="",n(n.s=7)}([function(t,n,e){var r,i;!function(){function u(t){return t&&(t.ownerDocument||t.document||t).documentElement}function a(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}function o(t,n){return n>t?-1:t>n?1:t>=n?0:NaN}function c(t){return null===t?NaN:+t}function l(t){return!isNaN(t)}function f(t){return{left:function(n,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=n.length);i>r;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=n.length);i>r;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}}function s(t){return t.length}function h(t){for(var n=1;t*n%1;)n*=10;return n}function d(t,n){for(var e in n)Object.defineProperty(t.prototype,e,{value:n[e],enumerable:!1})}function g(){this._=Object.create(null)}function p(t){return(t+="")===_a||t[0]===Ta?Ta+t:t}function v(t){return(t+="")[0]===Ta?t.slice(1):t}function y(t){return p(t)in this._}function m(t){return(t=p(t))in this._&&delete this._[t]}function b(){var t=[];for(var n in this._)t.push(v(n));return t}function x(){var t=0;for(var n in this._)++t;return t}function M(){for(var t in this._)return!1;return!0}function w(){this._=Object.create(null)}function S(t){return t}function k(t,n,e){return function(){var r=e.apply(n,arguments);return r===n?t:r}}function _(t,n){if(n in t)return n;n=n.charAt(0).toUpperCase()+n.slice(1);for(var e=0,r=Na.length;r>e;++e){var i=Na[e]+n;if(i in t)return i}}function T(){}function N(){}function A(t){function n(){for(var n,r=e,i=-1,u=r.length;++i<u;)(n=r[i].on)&&n.apply(this,arguments);return t}var e=[],r=new g;return n.on=function(n,i){var u,a=r.get(n);return arguments.length<2?a&&a.on:(a&&(a.on=null,e=e.slice(0,u=e.indexOf(a)).concat(e.slice(u+1)),r.remove(n)),i&&e.push(r.set(n,{on:i})),t)},n}function E(){ha.event.preventDefault()}function C(){for(var t,n=ha.event;t=n.sourceEvent;)n=t;return n}function D(t){for(var n=new N,e=0,r=arguments.length;++e<r;)n[arguments[e]]=A(n);return n.of=function(e,r){return function(i){try{var u=i.sourceEvent=ha.event;i.target=t,ha.event=i,n[i.type].apply(e,r)}finally{ha.event=u}}},n}function z(t){return Ea(t,La),t}function L(t){return"function"==typeof t?t:function(){return Ca(t,this)}}function V(t){return"function"==typeof t?t:function(){return Da(t,this)}}function j(t,n){function e(){this.removeAttribute(t)}function r(){this.removeAttributeNS(t.space,t.local)}function i(){this.setAttribute(t,n)}function u(){this.setAttributeNS(t.space,t.local,n)}function a(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}function o(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}return t=ha.ns.qualify(t),null==n?t.local?r:e:"function"==typeof n?t.local?o:a:t.local?u:i}function F(t){return t.trim().replace(/\s+/g," ")}function P(t){return new RegExp("(?:^|\\s+)"+ha.requote(t)+"(?:\\s+|$)","g")}function O(t){return(t+"").trim().split(/^|\s+/)}function U(t,n){function e(){for(var e=-1;++e<i;)t[e](this,n)}function r(){for(var e=-1,r=n.apply(this,arguments);++e<i;)t[e](this,r)}t=O(t).map(H);var i=t.length;return"function"==typeof n?r:e}function H(t){var n=P(t);return function(e,r){if(i=e.classList)return r?i.add(t):i.remove(t);var i=e.getAttribute("class")||"";r?(n.lastIndex=0,n.test(i)||e.setAttribute("class",F(i+" "+t))):e.setAttribute("class",F(i.replace(n," ")))}}function q(t,n,e){function r(){this.style.removeProperty(t)}function i(){this.style.setProperty(t,n,e)}function u(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}return null==n?r:"function"==typeof n?u:i}function Y(t,n){function e(){delete this[t]}function r(){this[t]=n}function i(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}return null==n?e:"function"==typeof n?i:r}function R(t){function n(){var n=this.ownerDocument,e=this.namespaceURI;return e===Va&&n.documentElement.namespaceURI===Va?n.createElement(t):n.createElementNS(e,t)}function e(){return this.ownerDocument.createElementNS(t.space,t.local)}return"function"==typeof t?t:(t=ha.ns.qualify(t)).local?e:n}function I(){var t=this.parentNode;t&&t.removeChild(this)}function W(t){return{__data__:t}}function B(t){return function(){return za(this,t)}}function X(t){return arguments.length||(t=o),function(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}}function J(t,n){for(var e=0,r=t.length;r>e;e++)for(var i,u=t[e],a=0,o=u.length;o>a;a++)(i=u[a])&&n(i,a,e);return t}function Z(t){return Ea(t,Fa),t}function $(t){var n,e;return function(r,i,u){var a,o=t[u].update,c=o.length;for(u!=e&&(e=u,n=0),i>=n&&(n=i+1);!(a=o[n])&&++n<c;);return a}}function G(t,n,e){function r(){var n=this[a];n&&(this.removeEventListener(t,n,n.$),delete this[a])}function i(){var i=c(n,ga(arguments));r.call(this),this.addEventListener(t,this[a]=i,i.$=e),i._=n}function u(){var n,e=new RegExp("^__on([^.]+)"+ha.requote(t)+"$");for(var r in this)if(n=r.match(e)){var i=this[r];this.removeEventListener(n[1],i,i.$),delete this[r]}}var a="__on"+t,o=t.indexOf("."),c=Q;o>0&&(t=t.slice(0,o));var l=Pa.get(t);return l&&(t=l,c=K),o?n?i:r:n?T:u}function Q(t,n){return function(e){var r=ha.event;ha.event=e,n[0]=this.__data__;try{t.apply(this,n)}finally{ha.event=r}}}function K(t,n){var e=Q(t,n);return function(t){var n=this,r=t.relatedTarget;r&&(r===n||8&r.compareDocumentPosition(n))||e.call(n,t)}}function tt(t){var n=".dragsuppress-"+ ++Ua,e="click"+n,r=ha.select(a(t)).on("touchmove"+n,E).on("dragstart"+n,E).on("selectstart"+n,E);if(null==Oa&&(Oa="onselectstart"in t?!1:_(t.style,"userSelect")),Oa){var i=u(t).style,o=i[Oa];i[Oa]="none"}return function(t){if(r.on(n,null),Oa&&(i[Oa]=o),t){var u=function(){r.on(e,null)};r.on(e,function(){E(),u()},!0),setTimeout(u,0)}}}function nt(t,n){n.changedTouches&&(n=n.changedTouches[0]);var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();if(0>Ha){var i=a(t);if(i.scrollX||i.scrollY){e=ha.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var u=e[0][0].getScreenCTM();Ha=!(u.f||u.e),e.remove()}}return Ha?(r.x=n.pageX,r.y=n.pageY):(r.x=n.clientX,r.y=n.clientY),r=r.matrixTransform(t.getScreenCTM().inverse()),[r.x,r.y]}var o=t.getBoundingClientRect();return[n.clientX-o.left-t.clientLeft,n.clientY-o.top-t.clientTop]}function et(){return ha.event.changedTouches[0].identifier}function rt(t){return t>0?1:0>t?-1:0}function it(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function ut(t){return t>1?0:-1>t?Ra:Math.acos(t)}function at(t){return t>1?Ba:-1>t?-Ba:Math.asin(t)}function ot(t){return((t=Math.exp(t))-1/t)/2}function ct(t){return((t=Math.exp(t))+1/t)/2}function lt(t){return((t=Math.exp(2*t))-1)/(t+1)}function ft(t){return(t=Math.sin(t/2))*t}function st(){}function ht(t,n,e){return this instanceof ht?(this.h=+t,this.s=+n,void(this.l=+e)):arguments.length<2?t instanceof ht?new ht(t.h,t.s,t.l):Tt(""+t,Nt,ht):new ht(t,n,e)}function dt(t,n,e){function r(t){return t>360?t-=360:0>t&&(t+=360),60>t?u+(a-u)*t/60:180>t?a:240>t?u+(a-u)*(240-t)/60:u}function i(t){return Math.round(255*r(t))}var u,a;return t=isNaN(t)?0:(t%=360)<0?t+360:t,n=isNaN(n)?0:0>n?0:n>1?1:n,e=0>e?0:e>1?1:e,a=.5>=e?e*(1+n):e+n-e*n,u=2*e-a,new wt(i(t+120),i(t),i(t-120))}function gt(t,n,e){return this instanceof gt?(this.h=+t,this.c=+n,void(this.l=+e)):arguments.length<2?t instanceof gt?new gt(t.h,t.c,t.l):t instanceof vt?mt(t.l,t.a,t.b):mt((t=At((t=ha.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new gt(t,n,e)}function pt(t,n,e){return isNaN(t)&&(t=0),isNaN(n)&&(n=0),new vt(e,Math.cos(t*=Xa)*n,Math.sin(t)*n)}function vt(t,n,e){return this instanceof vt?(this.l=+t,this.a=+n,void(this.b=+e)):arguments.length<2?t instanceof vt?new vt(t.l,t.a,t.b):t instanceof gt?pt(t.h,t.c,t.l):At((t=wt(t)).r,t.g,t.b):new vt(t,n,e)}function yt(t,n,e){var r=(t+16)/116,i=r+n/500,u=r-e/200;return i=bt(i)*io,r=bt(r)*uo,u=bt(u)*ao,new wt(Mt(3.2404542*i-1.5371385*r-.4985314*u),Mt(-.969266*i+1.8760108*r+.041556*u),Mt(.0556434*i-.2040259*r+1.0572252*u))}function mt(t,n,e){return t>0?new gt(Math.atan2(e,n)*Ja,Math.sqrt(n*n+e*e),t):new gt(NaN,NaN,t)}function bt(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function xt(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function Mt(t){return Math.round(255*(.00304>=t?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function wt(t,n,e){return this instanceof wt?(this.r=~~t,this.g=~~n,void(this.b=~~e)):arguments.length<2?t instanceof wt?new wt(t.r,t.g,t.b):Tt(""+t,wt,dt):new wt(t,n,e)}function St(t){return new wt(t>>16,t>>8&255,255&t)}function kt(t){return St(t)+""}function _t(t){return 16>t?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function Tt(t,n,e){var r,i,u,a=0,o=0,c=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return n(Ct(i[0]),Ct(i[1]),Ct(i[2]))}return(u=lo.get(t))?n(u.r,u.g,u.b):(null==t||"#"!==t.charAt(0)||isNaN(u=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&u)>>4,a=a>>4|a,o=240&u,o=o>>4|o,c=15&u,c=c<<4|c):7===t.length&&(a=(16711680&u)>>16,o=(65280&u)>>8,c=255&u)),n(a,o,c))}function Nt(t,n,e){var r,i,u=Math.min(t/=255,n/=255,e/=255),a=Math.max(t,n,e),o=a-u,c=(a+u)/2;return o?(i=.5>c?o/(a+u):o/(2-a-u),r=t==a?(n-e)/o+(e>n?6:0):n==a?(e-t)/o+2:(t-n)/o+4,r*=60):(r=NaN,i=c>0&&1>c?0:r),new ht(r,i,c)}function At(t,n,e){t=Et(t),n=Et(n),e=Et(e);var r=xt((.4124564*t+.3575761*n+.1804375*e)/io),i=xt((.2126729*t+.7151522*n+.072175*e)/uo),u=xt((.0193339*t+.119192*n+.9503041*e)/ao);return vt(116*i-16,500*(r-i),200*(i-u))}function Et(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ct(t){var n=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*n):n}function Dt(t){return"function"==typeof t?t:function(){return t}}function zt(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Lt(n,e,t,r)}}function Lt(t,n,e,r){function i(){var t,n=c.status;if(!n&&jt(c)||n>=200&&300>n||304===n){try{t=e.call(u,c)}catch(r){return void a.error.call(u,r)}a.load.call(u,t)}else a.error.call(u,c)}var u={},a=ha.dispatch("beforesend","progress","load","error"),o={},c=new XMLHttpRequest,l=null;return!this.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=i:c.onreadystatechange=function(){c.readyState>3&&i()},c.onprogress=function(t){var n=ha.event;ha.event=t;try{a.progress.call(u,c)}finally{ha.event=n}},u.header=function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?o[t]:(null==n?delete o[t]:o[t]=n+"",u)},u.mimeType=function(t){return arguments.length?(n=null==t?null:t+"",u):n},u.responseType=function(t){return arguments.length?(l=t,u):l},u.response=function(t){return e=t,u},["get","post"].forEach(function(t){u[t]=function(){return u.send.apply(u,[t].concat(ga(arguments)))}}),u.send=function(e,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),c.open(e,t,!0),null==n||"accept"in o||(o.accept=n+",*/*"),c.setRequestHeader)for(var f in o)c.setRequestHeader(f,o[f]);return null!=n&&c.overrideMimeType&&c.overrideMimeType(n),null!=l&&(c.responseType=l),null!=i&&u.on("error",i).on("load",function(t){i(null,t)}),a.beforesend.call(u,c),c.send(null==r?null:r),u},u.abort=function(){return c.abort(),u},ha.rebind(u,a,"on"),null==r?u:u.get(Vt(r))}function Vt(t){return 1===t.length?function(n,e){t(null==n?e:null)}:t}function jt(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}function Ft(t,n,e){var r=arguments.length;2>r&&(n=0),3>r&&(e=Date.now());var i=e+n,u={c:t,t:i,n:null};return so?so.n=u:fo=u,so=u,ho||(go=clearTimeout(go),ho=1,po(Pt)),u}function Pt(){var t=Ot(),n=Ut()-t;n>24?(isFinite(n)&&(clearTimeout(go),go=setTimeout(Pt,n)),ho=0):(ho=1,po(Pt))}function Ot(){for(var t=Date.now(),n=fo;n;)t>=n.t&&n.c(t-n.t)&&(n.c=null),n=n.n;return t}function Ut(){for(var t,n=fo,e=1/0;n;)n.c?(n.t<e&&(e=n.t),n=(t=n).n):n=t?t.n=n.n:fo=n.n;return so=t,e}function Ht(t,n){return n-(t?Math.ceil(Math.log(t)/Math.LN10):1)}function qt(t,n){var e=Math.pow(10,3*ka(8-n));return{scale:n>8?function(t){return t/e}:function(t){return t*e},symbol:t}}function Yt(t){var n=t.decimal,e=t.thousands,r=t.grouping,i=t.currency,u=r&&e?function(t,n){for(var i=t.length,u=[],a=0,o=r[0],c=0;i>0&&o>0&&(c+o+1>n&&(o=Math.max(1,n-c)),u.push(t.substring(i-=o,i+o)),!((c+=o+1)>n));)o=r[a=(a+1)%r.length];return u.reverse().join(e)}:S;return function(t){var e=yo.exec(t),r=e[1]||" ",a=e[2]||">",o=e[3]||"-",c=e[4]||"",l=e[5],f=+e[6],s=e[7],h=e[8],d=e[9],g=1,p="",v="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(l||"0"===r&&"="===a)&&(l=r="0",a="="),d){case"n":s=!0,d="g";break;case"%":g=100,v="%",d="f";break;case"p":g=100,v="%",d="r";break;case"b":case"o":case"x":case"X":"#"===c&&(p="0"+d.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":g=-1,d="r"}"$"===c&&(p=i[0],v=i[1]),"r"!=d||h||(d="g"),null!=h&&("g"==d?h=Math.max(1,Math.min(21,h)):"e"!=d&&"f"!=d||(h=Math.max(0,Math.min(20,h)))),d=mo.get(d)||Rt;var b=l&&s;return function(t){var e=v;if(y&&t%1)return"";var i=0>t||0===t&&0>1/t?(t=-t,"-"):"-"===o?"":o;if(0>g){var c=ha.formatPrefix(t,h);t=c.scale(t),e=c.symbol+v}else t*=g;t=d(t,h);var x,M,w=t.lastIndexOf(".");if(0>w){var S=m?t.lastIndexOf("e"):-1;0>S?(x=t,M=""):(x=t.substring(0,S),M=t.substring(S))}else x=t.substring(0,w),M=n+t.substring(w+1);!l&&s&&(x=u(x,1/0));var k=p.length+x.length+M.length+(b?0:i.length),_=f>k?new Array(k=f-k+1).join(r):"";return b&&(x=u(_+x,_.length?f-M.length:1/0)),i+=p,t=x+M,("<"===a?i+t+_:">"===a?_+i+t:"^"===a?_.substring(0,k>>=1)+i+t+_.substring(k):i+(b?t:_+t))+e}}}function Rt(t){return t+""}function It(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function Wt(t,n,e){function r(n){var e=t(n),r=u(e,1);return r-n>n-e?e:r}function i(e){return n(e=t(new xo(e-1)),1),e}function u(t,e){return n(t=new xo(+t),e),t}function a(t,r,u){var a=i(t),o=[];if(u>1)for(;r>a;)e(a)%u||o.push(new Date(+a)),n(a,1);else for(;r>a;)o.push(new Date(+a)),n(a,1);return o}function o(t,n,e){try{xo=It;var r=new It;return r._=t,a(r,n,e)}finally{xo=Date}}t.floor=t,t.round=r,t.ceil=i,t.offset=u,t.range=a;var c=t.utc=Bt(t);return c.floor=c,c.round=Bt(r),c.ceil=Bt(i),c.offset=Bt(u),c.range=o,t}function Bt(t){return function(n,e){try{xo=It;var r=new It;return r._=n,t(r,e)._}finally{xo=Date}}}function Xt(t){function n(t){function n(n){for(var e,i,u,a=[],o=-1,c=0;++o<r;)37===t.charCodeAt(o)&&(a.push(t.slice(c,o)),null!=(i=wo[e=t.charAt(++o)])&&(e=t.charAt(++o)),(u=A[e])&&(e=u(n,null==i?"e"===e?" ":"0":i)),a.push(e),c=o+1);return a.push(t.slice(c,o)),a.join("")}var r=t.length;return n.parse=function(n){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=e(r,t,n,0);if(i!=n.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var u=null!=r.Z&&xo!==It,a=new(u?It:xo);return"j"in r?a.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),a.setFullYear(r.y,0,1),a.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(a.getDay()+5)%7:r.w+7*r.U-(a.getDay()+6)%7)):a.setFullYear(r.y,r.m,r.d),a.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),u?a._:a},n.toString=function(){return t},n}function e(t,n,e,r){for(var i,u,a,o=0,c=n.length,l=e.length;c>o;){if(r>=l)return-1;if(i=n.charCodeAt(o++),37===i){if(a=n.charAt(o++),u=E[a in wo?n.charAt(o++):a],!u||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function r(t,n,e){w.lastIndex=0;var r=w.exec(n.slice(e));return r?(t.w=S.get(r[0].toLowerCase()),e+r[0].length):-1}function i(t,n,e){x.lastIndex=0;var r=x.exec(n.slice(e));return r?(t.w=M.get(r[0].toLowerCase()),e+r[0].length):-1}function u(t,n,e){T.lastIndex=0;var r=T.exec(n.slice(e));return r?(t.m=N.get(r[0].toLowerCase()),e+r[0].length):-1}function a(t,n,e){k.lastIndex=0;var r=k.exec(n.slice(e));return r?(t.m=_.get(r[0].toLowerCase()),e+r[0].length):-1}function o(t,n,r){return e(t,A.c.toString(),n,r)}function c(t,n,r){return e(t,A.x.toString(),n,r)}function l(t,n,r){return e(t,A.X.toString(),n,r)}function f(t,n,e){var r=b.get(n.slice(e,e+=2).toLowerCase());return null==r?-1:(t.p=r,e)}var s=t.dateTime,h=t.date,d=t.time,g=t.periods,p=t.days,v=t.shortDays,y=t.months,m=t.shortMonths;n.utc=function(t){function e(t){try{xo=It;var n=new xo;return n._=t,r(n)}finally{xo=Date}}var r=n(t);return e.parse=function(t){try{xo=It;var n=r.parse(t);return n&&n._}finally{xo=Date}},e.toString=r.toString,e},n.multi=n.utc.multi=gn;var b=ha.map(),x=Zt(p),M=$t(p),w=Zt(v),S=$t(v),k=Zt(y),_=$t(y),T=Zt(m),N=$t(m);g.forEach(function(t,n){b.set(t.toLowerCase(),n)});var A={a:function(t){return v[t.getDay()]},A:function(t){return p[t.getDay()]},b:function(t){return m[t.getMonth()]},B:function(t){return y[t.getMonth()]},c:n(s),d:function(t,n){return Jt(t.getDate(),n,2)},e:function(t,n){return Jt(t.getDate(),n,2)},H:function(t,n){return Jt(t.getHours(),n,2)},I:function(t,n){return Jt(t.getHours()%12||12,n,2)},j:function(t,n){return Jt(1+bo.dayOfYear(t),n,3)},L:function(t,n){return Jt(t.getMilliseconds(),n,3)},m:function(t,n){return Jt(t.getMonth()+1,n,2)},M:function(t,n){return Jt(t.getMinutes(),n,2)},p:function(t){return g[+(t.getHours()>=12)]},S:function(t,n){return Jt(t.getSeconds(),n,2)},U:function(t,n){return Jt(bo.sundayOfYear(t),n,2)},w:function(t){return t.getDay()},W:function(t,n){return Jt(bo.mondayOfYear(t),n,2)},x:n(h),X:n(d),y:function(t,n){return Jt(t.getFullYear()%100,n,2)},Y:function(t,n){return Jt(t.getFullYear()%1e4,n,4)},Z:hn,"%":function(){return"%"}},E={a:r,A:i,b:u,B:a,c:o,d:an,e:an,H:cn,I:cn,j:on,L:sn,m:un,M:ln,p:f,S:fn,U:Qt,w:Gt,W:Kt,x:c,X:l,y:nn,Y:tn,Z:en,"%":dn};return n}function Jt(t,n,e){var r=0>t?"-":"",i=(r?-t:t)+"",u=i.length;return r+(e>u?new Array(e-u+1).join(n)+i:i)}function Zt(t){return new RegExp("^(?:"+t.map(ha.requote).join("|")+")","i")}function $t(t){for(var n=new g,e=-1,r=t.length;++e<r;)n.set(t[e].toLowerCase(),e);return n}function Gt(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Qt(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function Kt(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function tn(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function nn(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+2));return r?(t.y=rn(+r[0]),e+r[0].length):-1}function en(t,n,e){return/^[+-]\d{4}$/.test(n=n.slice(e,e+5))?(t.Z=-n,e+5):-1}function rn(t){return t+(t>68?1900:2e3)}function un(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function an(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function on(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+3));return r?(t.j=+r[0],e+r[0].length):-1}function cn(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function ln(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function fn(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function sn(t,n,e){So.lastIndex=0;var r=So.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function hn(t){var n=t.getTimezoneOffset(),e=n>0?"-":"+",r=ka(n)/60|0,i=ka(n)%60;return e+Jt(r,"0",2)+Jt(i,"0",2)}function dn(t,n,e){ko.lastIndex=0;var r=ko.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function gn(t){for(var n=t.length,e=-1;++e<n;)t[e][0]=this(t[e][0]);return function(n){for(var e=0,r=t[e];!r[1](n);)r=t[++e];return r[0](n)}}function pn(){}function vn(t,n,e){var r=e.s=t+n,i=r-t,u=r-i;e.t=t-u+(n-i)}function yn(t,n){t&&Ao.hasOwnProperty(t.type)&&Ao[t.type](t,n)}function mn(t,n,e){var r,i=-1,u=t.length-e;for(n.lineStart();++i<u;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function bn(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)mn(t[e],n,1);n.polygonEnd()}function xn(){function t(t,n){t*=Xa,n=n*Xa/2+Ra/4;var e=t-r,a=e>=0?1:-1,o=a*e,c=Math.cos(n),l=Math.sin(n),f=u*l,s=i*c+f*Math.cos(o),h=f*a*Math.sin(o);Co.add(Math.atan2(h,s)),r=t,i=c,u=l}var n,e,r,i,u;Do.point=function(a,o){Do.point=t,r=(n=a)*Xa,i=Math.cos(o=(e=o)*Xa/2+Ra/4),u=Math.sin(o)},Do.lineEnd=function(){t(n,e)}}function Mn(t){var n=t[0],e=t[1],r=Math.cos(e);return[r*Math.cos(n),r*Math.sin(n),Math.sin(e)]}function wn(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Sn(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function kn(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function _n(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Tn(t){var n=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function Nn(t){return[Math.atan2(t[1],t[0]),at(t[2])]}function An(t,n){return ka(t[0]-n[0])<qa&&ka(t[1]-n[1])<qa}function En(t,n){t*=Xa;var e=Math.cos(n*=Xa);Cn(e*Math.cos(t),e*Math.sin(t),Math.sin(n))}function Cn(t,n,e){++zo,Vo+=(t-Vo)/zo,jo+=(n-jo)/zo,Fo+=(e-Fo)/zo}function Dn(){function t(t,i){t*=Xa;var u=Math.cos(i*=Xa),a=u*Math.cos(t),o=u*Math.sin(t),c=Math.sin(i),l=Math.atan2(Math.sqrt((l=e*c-r*o)*l+(l=r*a-n*c)*l+(l=n*o-e*a)*l),n*a+e*o+r*c);Lo+=l,Po+=l*(n+(n=a)),Oo+=l*(e+(e=o)),Uo+=l*(r+(r=c)),Cn(n,e,r)}var n,e,r;Ro.point=function(i,u){i*=Xa;var a=Math.cos(u*=Xa);n=a*Math.cos(i),e=a*Math.sin(i),r=Math.sin(u),Ro.point=t,Cn(n,e,r)}}function zn(){Ro.point=En}function Ln(){function t(t,n){t*=Xa;var e=Math.cos(n*=Xa),a=e*Math.cos(t),o=e*Math.sin(t),c=Math.sin(n),l=i*c-u*o,f=u*a-r*c,s=r*o-i*a,h=Math.sqrt(l*l+f*f+s*s),d=r*a+i*o+u*c,g=h&&-ut(d)/h,p=Math.atan2(h,d);Ho+=g*l,qo+=g*f,Yo+=g*s,Lo+=p,Po+=p*(r+(r=a)),Oo+=p*(i+(i=o)),Uo+=p*(u+(u=c)),Cn(r,i,u)}var n,e,r,i,u;Ro.point=function(a,o){n=a,e=o,Ro.point=t,a*=Xa;var c=Math.cos(o*=Xa);r=c*Math.cos(a),i=c*Math.sin(a),u=Math.sin(o),Cn(r,i,u)},Ro.lineEnd=function(){t(n,e),Ro.lineEnd=zn,Ro.point=En}}function Vn(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return e=n.invert(e,r),e&&t.invert(e[0],e[1])}),e}function jn(){return!0}function Fn(t,n,e,r,i){var u=[],a=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e=t[0],r=t[n];if(An(e,r)){i.lineStart();for(var o=0;n>o;++o)i.point((e=t[o])[0],e[1]);return void i.lineEnd()}var c=new On(e,t,null,!0),l=new On(e,null,c,!1);c.o=l,u.push(c),a.push(l),c=new On(r,t,null,!1),l=new On(r,null,c,!0),c.o=l,u.push(c),a.push(l)}}),a.sort(n),Pn(u),Pn(a),u.length){for(var o=0,c=e,l=a.length;l>o;++o)a[o].e=c=!c;for(var f,s,h=u[0];;){for(var d=h,g=!0;d.v;)if((d=d.n)===h)return;f=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(g)for(var o=0,l=f.length;l>o;++o)i.point((s=f[o])[0],s[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(g){f=d.p.z;for(var o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1])}else r(d.x,d.p.x,-1,i);d=d.p}d=d.o,f=d.z,g=!g}while(!d.v);i.lineEnd()}}}function Pn(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function On(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Un(t,n,e,r){return function(i,u){function a(n,e){var r=i(n,e);t(n=r[0],e=r[1])&&u.point(n,e)}function o(t,n){var e=i(t,n);v.point(e[0],e[1])}function c(){m.point=o,v.lineStart()}function l(){m.point=a,v.lineEnd()}function f(t,n){p.push([t,n]);var e=i(t,n);x.point(e[0],e[1])}function s(){x.lineStart(),p=[]}function h(){f(p[0][0],p[0][1]),x.lineEnd();var t,n=x.clean(),e=b.buffer(),r=e.length;if(p.pop(),g.push(p),p=null,r)if(1&n){t=e[0];var i,r=t.length-1,a=-1;if(r>0){for(M||(u.polygonStart(),M=!0),u.lineStart();++a<r;)u.point((i=t[a])[0],i[1]);u.lineEnd()}}else r>1&&2&n&&e.push(e.pop().concat(e.shift())),d.push(e.filter(Hn))}var d,g,p,v=n(u),y=i.invert(r[0],r[1]),m={point:a,lineStart:c,lineEnd:l,polygonStart:function(){m.point=f,m.lineStart=s,m.lineEnd=h,d=[],g=[]},polygonEnd:function(){m.point=a,m.lineStart=c,m.lineEnd=l,d=ha.merge(d);var t=Bn(y,g);d.length?(M||(u.polygonStart(),M=!0),Fn(d,Yn,t,e,u)):t&&(M||(u.polygonStart(),M=!0),u.lineStart(),e(null,null,1,u),u.lineEnd()),M&&(u.polygonEnd(),M=!1),d=g=null},sphere:function(){u.polygonStart(),u.lineStart(),e(null,null,1,u),u.lineEnd(),u.polygonEnd()}},b=qn(),x=n(b),M=!1;return m}}function Hn(t){return t.length>1}function qn(){var t,n=[];return{lineStart:function(){n.push(t=[])},point:function(n,e){t.push([n,e])},lineEnd:T,buffer:function(){var e=n;return n=[],t=null,e},rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))}}}function Yn(t,n){return((t=t.x)[0]<0?t[1]-Ba-qa:Ba-t[1])-((n=n.x)[0]<0?n[1]-Ba-qa:Ba-n[1])}function Rn(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(u,a){var o=u>0?Ra:-Ra,c=ka(u-e);ka(c-Ra)<qa?(t.point(e,r=(r+a)/2>0?Ba:-Ba),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(u,r),n=0):i!==o&&c>=Ra&&(ka(e-i)<qa&&(e-=i*qa),ka(u-o)<qa&&(u-=o*qa),r=In(e,r,u,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),n=0),t.point(e=u,r=a),i=o},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}function In(t,n,e,r){var i,u,a=Math.sin(t-e);return ka(a)>qa?Math.atan((Math.sin(n)*(u=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(n))*Math.sin(t))/(i*u*a)):(n+r)/2}function Wn(t,n,e,r){var i;if(null==t)i=e*Ba,r.point(-Ra,i),r.point(0,i),r.point(Ra,i),r.point(Ra,0),r.point(Ra,-i),r.point(0,-i),r.point(-Ra,-i),r.point(-Ra,0),r.point(-Ra,i);else if(ka(t[0]-n[0])>qa){var u=t[0]<n[0]?Ra:-Ra;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(n[0],n[1])}function Bn(t,n){var e=t[0],r=t[1],i=[Math.sin(e),-Math.cos(e),0],u=0,a=0;Co.reset();for(var o=0,c=n.length;c>o;++o){var l=n[o],f=l.length;if(f)for(var s=l[0],h=s[0],d=s[1]/2+Ra/4,g=Math.sin(d),p=Math.cos(d),v=1;;){v===f&&(v=0),t=l[v];var y=t[0],m=t[1]/2+Ra/4,b=Math.sin(m),x=Math.cos(m),M=y-h,w=M>=0?1:-1,S=w*M,k=S>Ra,_=g*b;if(Co.add(Math.atan2(_*w*Math.sin(S),p*x+_*Math.cos(S))),u+=k?M+w*Ia:M,k^h>=e^y>=e){var T=Sn(Mn(s),Mn(t));Tn(T);var N=Sn(i,T);Tn(N);var A=(k^M>=0?-1:1)*at(N[2]);(r>A||r===A&&(T[0]||T[1]))&&(a+=k^M>=0?1:-1)}if(!v++)break;h=y,g=b,p=x,s=t}}return(-qa>u||qa>u&&0>Co)^1&a}function Xn(t){function n(t,n){return Math.cos(t)*Math.cos(n)>u}function e(t){var e,u,c,l,f;return{lineStart:function(){l=c=!1,f=1},point:function(s,h){var d,g=[s,h],p=n(s,h),v=a?p?0:i(s,h):p?i(s+(0>s?Ra:-Ra),h):0;if(!e&&(l=c=p)&&t.lineStart(),p!==c&&(d=r(e,g),(An(e,d)||An(g,d))&&(g[0]+=qa,g[1]+=qa,p=n(g[0],g[1]))),p!==c)f=0,p?(t.lineStart(),d=r(g,e),t.point(d[0],d[1])):(d=r(e,g),t.point(d[0],d[1]),t.lineEnd()),e=d;else if(o&&e&&a^p){var y;v&u||!(y=r(g,e,!0))||(f=0,a?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!p||e&&An(e,g)||t.point(g[0],g[1]),e=g,c=p,u=v},lineEnd:function(){c&&t.lineEnd(),e=null},clean:function(){return f|(l&&c)<<1}}}function r(t,n,e){var r=Mn(t),i=Mn(n),a=[1,0,0],o=Sn(r,i),c=wn(o,o),l=o[0],f=c-l*l;if(!f)return!e&&t;var s=u*c/f,h=-u*l/f,d=Sn(a,o),g=_n(a,s),p=_n(o,h);kn(g,p);var v=d,y=wn(g,v),m=wn(v,v),b=y*y-m*(wn(g,g)-1);if(!(0>b)){var x=Math.sqrt(b),M=_n(v,(-y-x)/m);if(kn(M,g),M=Nn(M),!e)return M;var w,S=t[0],k=n[0],_=t[1],T=n[1];S>k&&(w=S,S=k,k=w);var N=k-S,A=ka(N-Ra)<qa,E=A||qa>N;if(!A&&_>T&&(w=_,_=T,T=w),E?A?_+T>0^M[1]<(ka(M[0]-S)<qa?_:T):_<=M[1]&&M[1]<=T:N>Ra^(S<=M[0]&&M[0]<=k)){var C=_n(v,(-y+x)/m);return kn(C,g),[M,Nn(C)]}}}function i(n,e){var r=a?t:Ra-t,i=0;return-r>n?i|=1:n>r&&(i|=2),-r>e?i|=4:e>r&&(i|=8),i}var u=Math.cos(t),a=u>0,o=ka(u)>qa,c=xe(t,6*Xa);return Un(n,e,c,a?[0,-t]:[-Ra,t-Ra])}function Jn(t,n,e,r){return function(i){var u,a=i.a,o=i.b,c=a.x,l=a.y,f=o.x,s=o.y,h=0,d=1,g=f-c,p=s-l;if(u=t-c,g||!(u>0)){if(u/=g,0>g){if(h>u)return;d>u&&(d=u)}else if(g>0){if(u>d)return;u>h&&(h=u)}if(u=e-c,g||!(0>u)){if(u/=g,0>g){if(u>d)return;u>h&&(h=u)}else if(g>0){if(h>u)return;d>u&&(d=u)}if(u=n-l,p||!(u>0)){if(u/=p,0>p){if(h>u)return;d>u&&(d=u)}else if(p>0){if(u>d)return;u>h&&(h=u)}if(u=r-l,p||!(0>u)){if(u/=p,0>p){if(u>d)return;u>h&&(h=u)}else if(p>0){if(h>u)return;d>u&&(d=u)}return h>0&&(i.a={x:c+h*g,y:l+h*p}),1>d&&(i.b={x:c+d*g,y:l+d*p}),i}}}}}}function Zn(t,n,e,r){function i(r,i){return ka(r[0]-t)<qa?i>0?0:3:ka(r[0]-e)<qa?i>0?2:1:ka(r[1]-n)<qa?i>0?1:0:i>0?3:2}function u(t,n){return a(t.x,n.x)}function a(t,n){var e=i(t,1),r=i(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(o){function c(t){for(var n=0,e=v.length,r=t[1],i=0;e>i;++i)for(var u,a=1,o=v[i],c=o.length,l=o[0];c>a;++a)u=o[a],l[1]<=r?u[1]>r&&it(l,u,t)>0&&++n:u[1]<=r&&it(l,u,t)<0&&--n,l=u;return 0!==n}function l(u,o,c,l){var f=0,s=0;if(null==u||(f=i(u,c))!==(s=i(o,c))||a(u,o)<0^c>0){do l.point(0===f||3===f?t:e,f>1?r:n);while((f=(f+c+4)%4)!==s)}else l.point(o[0],o[1])}function f(i,u){return i>=t&&e>=i&&u>=n&&r>=u}function s(t,n){f(t,n)&&o.point(t,n)}function h(){E.point=g,v&&v.push(y=[]),k=!0,S=!1,M=w=NaN}function d(){p&&(g(m,b),x&&S&&N.rejoin(),p.push(N.buffer())),E.point=s,S&&o.lineEnd()}function g(t,n){t=Math.max(-Wo,Math.min(Wo,t)),n=Math.max(-Wo,Math.min(Wo,n));var e=f(t,n);if(v&&y.push([t,n]),k)m=t,b=n,x=e,k=!1,e&&(o.lineStart(),o.point(t,n));else if(e&&S)o.point(t,n);else{var r={a:{x:M,y:w},b:{x:t,y:n}};A(r)?(S||(o.lineStart(),o.point(r.a.x,r.a.y)),o.point(r.b.x,r.b.y),e||o.lineEnd(),_=!1):e&&(o.lineStart(),o.point(t,n),_=!1)}M=t,w=n,S=e}var p,v,y,m,b,x,M,w,S,k,_,T=o,N=qn(),A=Jn(t,n,e,r),E={point:s,lineStart:h,lineEnd:d,polygonStart:function(){o=N,p=[],v=[],_=!0},polygonEnd:function(){o=T,p=ha.merge(p);var n=c([t,r]),e=_&&n,i=p.length;(e||i)&&(o.polygonStart(),e&&(o.lineStart(),l(null,null,1,o),o.lineEnd()),i&&Fn(p,u,n,l,o),o.polygonEnd()),p=v=y=null}};return E}}function $n(t){var n=0,e=Ra/3,r=he(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Ra/180,e=t[1]*Ra/180):[n/Ra*180,e/Ra*180]},i}function Gn(t,n){function e(t,n){var e=Math.sqrt(u-2*i*Math.sin(n))/i;return[e*Math.sin(t*=i),a-e*Math.cos(t)]}var r=Math.sin(t),i=(r+Math.sin(n))/2,u=1+r*(2*i-r),a=Math.sqrt(u)/i;return e.invert=function(t,n){var e=a-n;return[Math.atan2(t,e)/i,at((u-(t*t+e*e)*i*i)/(2*i))]},e}function Qn(){function t(t,n){Xo+=i*t-r*n,r=t,i=n}var n,e,r,i;Qo.point=function(u,a){Qo.point=t,n=r=u,e=i=a},Qo.lineEnd=function(){t(n,e)}}function Kn(t,n){Jo>t&&(Jo=t),t>$o&&($o=t),Zo>n&&(Zo=n),n>Go&&(Go=n)}function te(){function t(t,n){a.push("M",t,",",n,u)}function n(t,n){a.push("M",t,",",n),o.point=e}function e(t,n){a.push("L",t,",",n)}function r(){o.point=t}function i(){a.push("Z")}var u=ne(4.5),a=[],o={point:t,lineStart:function(){o.point=n},lineEnd:r,polygonStart:function(){o.lineEnd=i},polygonEnd:function(){o.lineEnd=r,o.point=t},pointRadius:function(t){return u=ne(t),o},result:function(){if(a.length){var t=a.join("");return a=[],t}}};return o}function ne(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function ee(t,n){Vo+=t,jo+=n,++Fo}function re(){function t(t,r){var i=t-n,u=r-e,a=Math.sqrt(i*i+u*u);Po+=a*(n+t)/2,Oo+=a*(e+r)/2,Uo+=a,ee(n=t,e=r)}var n,e;tc.point=function(r,i){tc.point=t,ee(n=r,e=i)}}function ie(){tc.point=ee}function ue(){function t(t,n){var e=t-r,u=n-i,a=Math.sqrt(e*e+u*u);Po+=a*(r+t)/2,Oo+=a*(i+n)/2,Uo+=a,a=i*t-r*n,Ho+=a*(r+t),qo+=a*(i+n),Yo+=3*a,ee(r=t,i=n)}var n,e,r,i;tc.point=function(u,a){tc.point=t,ee(n=r=u,e=i=a)},tc.lineEnd=function(){t(n,e)}}function ae(t){function n(n,e){t.moveTo(n+a,e),t.arc(n,e,a,0,Ia)}function e(n,e){t.moveTo(n,e),o.point=r}function r(n,e){t.lineTo(n,e)}function i(){o.point=n}function u(){t.closePath()}var a=4.5,o={point:n,lineStart:function(){o.point=e},lineEnd:i,polygonStart:function(){o.lineEnd=u},polygonEnd:function(){o.lineEnd=i,o.point=n},pointRadius:function(t){return a=t,o},result:T};return o}function oe(t){function n(t){return(o?r:e)(t)}function e(n){return fe(n,function(e,r){e=t(e,r),n.point(e[0],e[1])})}function r(n){function e(e,r){e=t(e,r),n.point(e[0],e[1])}function r(){
b=NaN,k.point=u,n.lineStart()}function u(e,r){var u=Mn([e,r]),a=t(e,r);i(b,x,m,M,w,S,b=a[0],x=a[1],m=e,M=u[0],w=u[1],S=u[2],o,n),n.point(b,x)}function a(){k.point=e,n.lineEnd()}function c(){r(),k.point=l,k.lineEnd=f}function l(t,n){u(s=t,h=n),d=b,g=x,p=M,v=w,y=S,k.point=u}function f(){i(b,x,m,M,w,S,d,g,s,p,v,y,o,n),k.lineEnd=a,a()}var s,h,d,g,p,v,y,m,b,x,M,w,S,k={point:e,lineStart:r,lineEnd:a,polygonStart:function(){n.polygonStart(),k.lineStart=c},polygonEnd:function(){n.polygonEnd(),k.lineStart=r}};return k}function i(n,e,r,o,c,l,f,s,h,d,g,p,v,y){var m=f-n,b=s-e,x=m*m+b*b;if(x>4*u&&v--){var M=o+d,w=c+g,S=l+p,k=Math.sqrt(M*M+w*w+S*S),_=Math.asin(S/=k),T=ka(ka(S)-1)<qa||ka(r-h)<qa?(r+h)/2:Math.atan2(w,M),N=t(T,_),A=N[0],E=N[1],C=A-n,D=E-e,z=b*C-m*D;(z*z/x>u||ka((m*C+b*D)/x-.5)>.3||a>o*d+c*g+l*p)&&(i(n,e,r,o,c,l,A,E,T,M/=k,w/=k,S,v,y),y.point(A,E),i(A,E,T,M,w,S,f,s,h,d,g,p,v,y))}}var u=.5,a=Math.cos(30*Xa),o=16;return n.precision=function(t){return arguments.length?(o=(u=t*t)>0&&16,n):Math.sqrt(u)},n}function ce(t){var n=oe(function(n,e){return t([n*Ja,e*Ja])});return function(t){return de(n(t))}}function le(t){this.stream=t}function fe(t,n){return{point:n,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function se(t){return he(function(){return t})()}function he(t){function n(t){return t=o(t[0]*Xa,t[1]*Xa),[t[0]*h+c,l-t[1]*h]}function e(t){return t=o.invert((t[0]-c)/h,(l-t[1])/h),t&&[t[0]*Ja,t[1]*Ja]}function r(){o=Vn(a=ve(y,m,b),u);var t=u(p,v);return c=d-t[0]*h,l=g+t[1]*h,i()}function i(){return f&&(f.valid=!1,f=null),n}var u,a,o,c,l,f,s=oe(function(t,n){return t=u(t,n),[t[0]*h+c,l-t[1]*h]}),h=150,d=480,g=250,p=0,v=0,y=0,m=0,b=0,x=Io,M=S,w=null,k=null;return n.stream=function(t){return f&&(f.valid=!1),f=de(x(a,s(M(t)))),f.valid=!0,f},n.clipAngle=function(t){return arguments.length?(x=null==t?(w=t,Io):Xn((w=+t)*Xa),i()):w},n.clipExtent=function(t){return arguments.length?(k=t,M=t?Zn(t[0][0],t[0][1],t[1][0],t[1][1]):S,i()):k},n.scale=function(t){return arguments.length?(h=+t,r()):h},n.translate=function(t){return arguments.length?(d=+t[0],g=+t[1],r()):[d,g]},n.center=function(t){return arguments.length?(p=t[0]%360*Xa,v=t[1]%360*Xa,r()):[p*Ja,v*Ja]},n.rotate=function(t){return arguments.length?(y=t[0]%360*Xa,m=t[1]%360*Xa,b=t.length>2?t[2]%360*Xa:0,r()):[y*Ja,m*Ja,b*Ja]},ha.rebind(n,s,"precision"),function(){return u=t.apply(this,arguments),n.invert=u.invert&&e,r()}}function de(t){return fe(t,function(n,e){t.point(n*Xa,e*Xa)})}function ge(t,n){return[t,n]}function pe(t,n){return[t>Ra?t-Ia:-Ra>t?t+Ia:t,n]}function ve(t,n,e){return t?n||e?Vn(me(t),be(n,e)):me(t):n||e?be(n,e):pe}function ye(t){return function(n,e){return n+=t,[n>Ra?n-Ia:-Ra>n?n+Ia:n,e]}}function me(t){var n=ye(t);return n.invert=ye(-t),n}function be(t,n){function e(t,n){var e=Math.cos(n),o=Math.cos(t)*e,c=Math.sin(t)*e,l=Math.sin(n),f=l*r+o*i;return[Math.atan2(c*u-f*a,o*r-l*i),at(f*u+c*a)]}var r=Math.cos(t),i=Math.sin(t),u=Math.cos(n),a=Math.sin(n);return e.invert=function(t,n){var e=Math.cos(n),o=Math.cos(t)*e,c=Math.sin(t)*e,l=Math.sin(n),f=l*u-c*a;return[Math.atan2(c*u+l*a,o*r+f*i),at(f*r-o*i)]},e}function xe(t,n){var e=Math.cos(t),r=Math.sin(t);return function(i,u,a,o){var c=a*n;null!=i?(i=Me(e,i),u=Me(e,u),(a>0?u>i:i>u)&&(i+=a*Ia)):(i=t+a*Ia,u=t-.5*c);for(var l,f=i;a>0?f>u:u>f;f-=c)o.point((l=Nn([e,-r*Math.cos(f),-r*Math.sin(f)]))[0],l[1])}}function Me(t,n){var e=Mn(n);e[0]-=t,Tn(e);var r=ut(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-qa)%(2*Math.PI)}function we(t,n,e){var r=ha.range(t,n-qa,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Se(t,n,e){var r=ha.range(t,n-qa,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function ke(t){return t.source}function _e(t){return t.target}function Te(t,n,e,r){var i=Math.cos(n),u=Math.sin(n),a=Math.cos(r),o=Math.sin(r),c=i*Math.cos(t),l=i*Math.sin(t),f=a*Math.cos(e),s=a*Math.sin(e),h=2*Math.asin(Math.sqrt(ft(r-n)+i*a*ft(e-t))),d=1/Math.sin(h),g=h?function(t){var n=Math.sin(t*=h)*d,e=Math.sin(h-t)*d,r=e*c+n*f,i=e*l+n*s,a=e*u+n*o;return[Math.atan2(i,r)*Ja,Math.atan2(a,Math.sqrt(r*r+i*i))*Ja]}:function(){return[t*Ja,n*Ja]};return g.distance=h,g}function Ne(){function t(t,i){var u=Math.sin(i*=Xa),a=Math.cos(i),o=ka((t*=Xa)-n),c=Math.cos(o);nc+=Math.atan2(Math.sqrt((o=a*Math.sin(o))*o+(o=r*u-e*a*c)*o),e*u+r*a*c),n=t,e=u,r=a}var n,e,r;ec.point=function(i,u){n=i*Xa,e=Math.sin(u*=Xa),r=Math.cos(u),ec.point=t},ec.lineEnd=function(){ec.point=ec.lineEnd=T}}function Ae(t,n){function e(n,e){var r=Math.cos(n),i=Math.cos(e),u=t(r*i);return[u*i*Math.sin(n),u*Math.sin(e)]}return e.invert=function(t,e){var r=Math.sqrt(t*t+e*e),i=n(r),u=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*u,r*a),Math.asin(r&&e*u/r)]},e}function Ee(t,n){function e(t,n){a>0?-Ba+qa>n&&(n=-Ba+qa):n>Ba-qa&&(n=Ba-qa);var e=a/Math.pow(i(n),u);return[e*Math.sin(u*t),a-e*Math.cos(u*t)]}var r=Math.cos(t),i=function(t){return Math.tan(Ra/4+t/2)},u=t===n?Math.sin(t):Math.log(r/Math.cos(n))/Math.log(i(n)/i(t)),a=r*Math.pow(i(t),u)/u;return u?(e.invert=function(t,n){var e=a-n,r=rt(u)*Math.sqrt(t*t+e*e);return[Math.atan2(t,e)/u,2*Math.atan(Math.pow(a/r,1/u))-Ba]},e):De}function Ce(t,n){function e(t,n){var e=u-n;return[e*Math.sin(i*t),u-e*Math.cos(i*t)]}var r=Math.cos(t),i=t===n?Math.sin(t):(r-Math.cos(n))/(n-t),u=r/i+t;return ka(i)<qa?ge:(e.invert=function(t,n){var e=u-n;return[Math.atan2(t,e)/i,u-rt(i)*Math.sqrt(t*t+e*e)]},e)}function De(t,n){return[t,Math.log(Math.tan(Ra/4+n/2))]}function ze(t){var n,e=se(t),r=e.scale,i=e.translate,u=e.clipExtent;return e.scale=function(){var t=r.apply(e,arguments);return t===e?n?e.clipExtent(null):e:t},e.translate=function(){var t=i.apply(e,arguments);return t===e?n?e.clipExtent(null):e:t},e.clipExtent=function(t){var a=u.apply(e,arguments);if(a===e){if(n=null==t){var o=Ra*r(),c=i();u([[c[0]-o,c[1]-o],[c[0]+o,c[1]+o]])}}else n&&(a=null);return a},e.clipExtent(null)}function Le(t,n){return[Math.log(Math.tan(Ra/4+n/2)),-t]}function Ve(t){return t[0]}function je(t){return t[1]}function Fe(t){for(var n=t.length,e=[0,1],r=2,i=2;n>i;i++){for(;r>1&&it(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function Pe(t,n){return t[0]-n[0]||t[1]-n[1]}function Oe(t,n,e){return(e[0]-n[0])*(t[1]-n[1])<(e[1]-n[1])*(t[0]-n[0])}function Ue(t,n,e,r){var i=t[0],u=e[0],a=n[0]-i,o=r[0]-u,c=t[1],l=e[1],f=n[1]-c,s=r[1]-l,h=(o*(c-l)-s*(i-u))/(s*a-o*f);return[i+h*a,c+h*f]}function He(t){var n=t[0],e=t[t.length-1];return!(n[0]-e[0]||n[1]-e[1])}function qe(){cr(this),this.edge=this.site=this.circle=null}function Ye(t){var n=gc.pop()||new qe;return n.site=t,n}function Re(t){Ke(t),sc.remove(t),gc.push(t),cr(t)}function Ie(t){var n=t.circle,e=n.x,r=n.cy,i={x:e,y:r},u=t.P,a=t.N,o=[t];Re(t);for(var c=u;c.circle&&ka(e-c.circle.x)<qa&&ka(r-c.circle.cy)<qa;)u=c.P,o.unshift(c),Re(c),c=u;o.unshift(c),Ke(c);for(var l=a;l.circle&&ka(e-l.circle.x)<qa&&ka(r-l.circle.cy)<qa;)a=l.N,o.push(l),Re(l),l=a;o.push(l),Ke(l);var f,s=o.length;for(f=1;s>f;++f)l=o[f],c=o[f-1],ur(l.edge,c.site,l.site,i);c=o[0],l=o[s-1],l.edge=rr(c.site,l.site,null,i),Qe(c),Qe(l)}function We(t){for(var n,e,r,i,u=t.x,a=t.y,o=sc._;o;)if(r=Be(o,a)-u,r>qa)o=o.L;else{if(i=u-Xe(o,a),!(i>qa)){r>-qa?(n=o.P,e=o):i>-qa?(n=o,e=o.N):n=e=o;break}if(!o.R){n=o;break}o=o.R}var c=Ye(t);if(sc.insert(n,c),n||e){if(n===e)return Ke(n),e=Ye(n.site),sc.insert(c,e),c.edge=e.edge=rr(n.site,c.site),Qe(n),void Qe(e);if(!e)return void(c.edge=rr(n.site,c.site));Ke(n),Ke(e);var l=n.site,f=l.x,s=l.y,h=t.x-f,d=t.y-s,g=e.site,p=g.x-f,v=g.y-s,y=2*(h*v-d*p),m=h*h+d*d,b=p*p+v*v,x={x:(v*m-d*b)/y+f,y:(h*b-p*m)/y+s};ur(e.edge,l,g,x),c.edge=rr(l,t,null,x),e.edge=rr(t,g,null,x),Qe(n),Qe(e)}}function Be(t,n){var e=t.site,r=e.x,i=e.y,u=i-n;if(!u)return r;var a=t.P;if(!a)return-(1/0);e=a.site;var o=e.x,c=e.y,l=c-n;if(!l)return o;var f=o-r,s=1/u-1/l,h=f/l;return s?(-h+Math.sqrt(h*h-2*s*(f*f/(-2*l)-c+l/2+i-u/2)))/s+r:(r+o)/2}function Xe(t,n){var e=t.N;if(e)return Be(e,n);var r=t.site;return r.y===n?r.x:1/0}function Je(t){this.site=t,this.edges=[]}function Ze(t){for(var n,e,r,i,u,a,o,c,l,f,s=t[0][0],h=t[1][0],d=t[0][1],g=t[1][1],p=fc,v=p.length;v--;)if(u=p[v],u&&u.prepare())for(o=u.edges,c=o.length,a=0;c>a;)f=o[a].end(),r=f.x,i=f.y,l=o[++a%c].start(),n=l.x,e=l.y,(ka(r-n)>qa||ka(i-e)>qa)&&(o.splice(a,0,new ar(ir(u.site,f,ka(r-s)<qa&&g-i>qa?{x:s,y:ka(n-s)<qa?e:g}:ka(i-g)<qa&&h-r>qa?{x:ka(e-g)<qa?n:h,y:g}:ka(r-h)<qa&&i-d>qa?{x:h,y:ka(n-h)<qa?e:d}:ka(i-d)<qa&&r-s>qa?{x:ka(e-d)<qa?n:s,y:d}:null),u.site,null)),++c)}function $e(t,n){return n.angle-t.angle}function Ge(){cr(this),this.x=this.y=this.arc=this.site=this.cy=null}function Qe(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,u=e.site;if(r!==u){var a=i.x,o=i.y,c=r.x-a,l=r.y-o,f=u.x-a,s=u.y-o,h=2*(c*s-l*f);if(!(h>=-Ya)){var d=c*c+l*l,g=f*f+s*s,p=(s*d-l*g)/h,v=(c*g-f*d)/h,s=v+o,y=pc.pop()||new Ge;y.arc=t,y.site=i,y.x=p+a,y.y=s+Math.sqrt(p*p+v*v),y.cy=s,t.circle=y;for(var m=null,b=dc._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}dc.insert(m,y),m||(hc=y)}}}}function Ke(t){var n=t.circle;n&&(n.P||(hc=n.N),dc.remove(n),pc.push(n),cr(n),t.circle=null)}function tr(t){for(var n,e=lc,r=Jn(t[0][0],t[0][1],t[1][0],t[1][1]),i=e.length;i--;)n=e[i],(!nr(n,t)||!r(n)||ka(n.a.x-n.b.x)<qa&&ka(n.a.y-n.b.y)<qa)&&(n.a=n.b=null,e.splice(i,1))}function nr(t,n){var e=t.b;if(e)return!0;var r,i,u=t.a,a=n[0][0],o=n[1][0],c=n[0][1],l=n[1][1],f=t.l,s=t.r,h=f.x,d=f.y,g=s.x,p=s.y,v=(h+g)/2,y=(d+p)/2;if(p===d){if(a>v||v>=o)return;if(h>g){if(u){if(u.y>=l)return}else u={x:v,y:c};e={x:v,y:l}}else{if(u){if(u.y<c)return}else u={x:v,y:l};e={x:v,y:c}}}else if(r=(h-g)/(p-d),i=y-r*v,-1>r||r>1)if(h>g){if(u){if(u.y>=l)return}else u={x:(c-i)/r,y:c};e={x:(l-i)/r,y:l}}else{if(u){if(u.y<c)return}else u={x:(l-i)/r,y:l};e={x:(c-i)/r,y:c}}else if(p>d){if(u){if(u.x>=o)return}else u={x:a,y:r*a+i};e={x:o,y:r*o+i}}else{if(u){if(u.x<a)return}else u={x:o,y:r*o+i};e={x:a,y:r*a+i}}return t.a=u,t.b=e,!0}function er(t,n){this.l=t,this.r=n,this.a=this.b=null}function rr(t,n,e,r){var i=new er(t,n);return lc.push(i),e&&ur(i,t,n,e),r&&ur(i,n,t,r),fc[t.i].edges.push(new ar(i,t,n)),fc[n.i].edges.push(new ar(i,n,t)),i}function ir(t,n,e){var r=new er(t,null);return r.a=n,r.b=e,lc.push(r),r}function ur(t,n,e,r){t.a||t.b?t.l===e?t.b=r:t.a=r:(t.a=r,t.l=n,t.r=e)}function ar(t,n,e){var r=t.a,i=t.b;this.edge=t,this.site=n,this.angle=e?Math.atan2(e.y-n.y,e.x-n.x):t.l===n?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function or(){this._=null}function cr(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function lr(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function fr(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function sr(t){for(;t.L;)t=t.L;return t}function hr(t,n){var e,r,i,u=t.sort(dr).pop();for(lc=[],fc=new Array(t.length),sc=new or,dc=new or;;)if(i=hc,u&&(!i||u.y<i.y||u.y===i.y&&u.x<i.x))u.x===e&&u.y===r||(fc[u.i]=new Je(u),We(u),e=u.x,r=u.y),u=t.pop();else{if(!i)break;Ie(i.arc)}n&&(tr(n),Ze(n));var a={cells:fc,edges:lc};return sc=dc=lc=fc=null,a}function dr(t,n){return n.y-t.y||n.x-t.x}function gr(t,n,e){return(t.x-e.x)*(n.y-t.y)-(t.x-n.x)*(e.y-t.y)}function pr(t){return t.x}function vr(t){return t.y}function yr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function mr(t,n,e,r,i,u){if(!t(n,e,r,i,u)){var a=.5*(e+i),o=.5*(r+u),c=n.nodes;c[0]&&mr(t,c[0],e,r,a,o),c[1]&&mr(t,c[1],a,r,i,o),c[2]&&mr(t,c[2],e,o,a,u),c[3]&&mr(t,c[3],a,o,i,u)}}function br(t,n,e,r,i,u,a){var o,c=1/0;return function l(t,f,s,h,d){if(!(f>u||s>a||r>h||i>d)){if(g=t.point){var g,p=n-t.x,v=e-t.y,y=p*p+v*v;if(c>y){var m=Math.sqrt(c=y);r=n-m,i=e-m,u=n+m,a=e+m,o=g}}for(var b=t.nodes,x=.5*(f+h),M=.5*(s+d),w=n>=x,S=e>=M,k=S<<1|w,_=k+4;_>k;++k)if(t=b[3&k])switch(3&k){case 0:l(t,f,s,x,M);break;case 1:l(t,x,s,h,M);break;case 2:l(t,f,M,x,d);break;case 3:l(t,x,M,h,d)}}}(t,r,i,u,a),o}function xr(t,n){t=ha.rgb(t),n=ha.rgb(n);var e=t.r,r=t.g,i=t.b,u=n.r-e,a=n.g-r,o=n.b-i;return function(t){return"#"+_t(Math.round(e+u*t))+_t(Math.round(r+a*t))+_t(Math.round(i+o*t))}}function Mr(t,n){var e,r={},i={};for(e in t)e in n?r[e]=kr(t[e],n[e]):i[e]=t[e];for(e in n)e in t||(i[e]=n[e]);return function(t){for(e in r)i[e]=r[e](t);return i}}function wr(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function Sr(t,n){var e,r,i,u=yc.lastIndex=mc.lastIndex=0,a=-1,o=[],c=[];for(t+="",n+="";(e=yc.exec(t))&&(r=mc.exec(n));)(i=r.index)>u&&(i=n.slice(u,i),o[a]?o[a]+=i:o[++a]=i),(e=e[0])===(r=r[0])?o[a]?o[a]+=r:o[++a]=r:(o[++a]=null,c.push({i:a,x:wr(e,r)})),u=mc.lastIndex;return u<n.length&&(i=n.slice(u),o[a]?o[a]+=i:o[++a]=i),o.length<2?c[0]?(n=c[0].x,function(t){return n(t)+""}):function(){return n}:(n=c.length,function(t){for(var e,r=0;n>r;++r)o[(e=c[r]).i]=e.x(t);return o.join("")})}function kr(t,n){for(var e,r=ha.interpolators.length;--r>=0&&!(e=ha.interpolators[r](t,n)););return e}function _r(t,n){var e,r=[],i=[],u=t.length,a=n.length,o=Math.min(t.length,n.length);for(e=0;o>e;++e)r.push(kr(t[e],n[e]));for(;u>e;++e)i[e]=t[e];for(;a>e;++e)i[e]=n[e];return function(t){for(e=0;o>e;++e)i[e]=r[e](t);return i}}function Tr(t){return function(n){return 0>=n?0:n>=1?1:t(n)}}function Nr(t){return function(n){return 1-t(1-n)}}function Ar(t){return function(n){return.5*(.5>n?t(2*n):2-t(2-2*n))}}function Er(t){return t*t}function Cr(t){return t*t*t}function Dr(t){if(0>=t)return 0;if(t>=1)return 1;var n=t*t,e=n*t;return 4*(.5>t?e:3*(t-n)+e-.75)}function zr(t){return function(n){return Math.pow(n,t)}}function Lr(t){return 1-Math.cos(t*Ba)}function Vr(t){return Math.pow(2,10*(t-1))}function jr(t){return 1-Math.sqrt(1-t*t)}function Fr(t,n){var e;return arguments.length<2&&(n=.45),arguments.length?e=n/Ia*Math.asin(1/t):(t=1,e=n/4),function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-e)*Ia/n)}}function Pr(t){return t||(t=1.70158),function(n){return n*n*((t+1)*n-t)}}function Or(t){return 1/2.75>t?7.5625*t*t:2/2.75>t?7.5625*(t-=1.5/2.75)*t+.75:2.5/2.75>t?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function Ur(t,n){t=ha.hcl(t),n=ha.hcl(n);var e=t.h,r=t.c,i=t.l,u=n.h-e,a=n.c-r,o=n.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?n.c:r),isNaN(u)?(u=0,e=isNaN(e)?n.h:e):u>180?u-=360:-180>u&&(u+=360),function(t){return pt(e+u*t,r+a*t,i+o*t)+""}}function Hr(t,n){t=ha.hsl(t),n=ha.hsl(n);var e=t.h,r=t.s,i=t.l,u=n.h-e,a=n.s-r,o=n.l-i;return isNaN(a)&&(a=0,r=isNaN(r)?n.s:r),isNaN(u)?(u=0,e=isNaN(e)?n.h:e):u>180?u-=360:-180>u&&(u+=360),function(t){return dt(e+u*t,r+a*t,i+o*t)+""}}function qr(t,n){t=ha.lab(t),n=ha.lab(n);var e=t.l,r=t.a,i=t.b,u=n.l-e,a=n.a-r,o=n.b-i;return function(t){return yt(e+u*t,r+a*t,i+o*t)+""}}function Yr(t,n){return n-=t,function(e){return Math.round(t+n*e)}}function Rr(t){var n=[t.a,t.b],e=[t.c,t.d],r=Wr(n),i=Ir(n,e),u=Wr(Br(e,n,-i))||0;n[0]*e[1]<e[0]*n[1]&&(n[0]*=-1,n[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(n[1],n[0]):Math.atan2(-e[0],e[1]))*Ja,this.translate=[t.e,t.f],this.scale=[r,u],this.skew=u?Math.atan2(i,u)*Ja:0}function Ir(t,n){return t[0]*n[0]+t[1]*n[1]}function Wr(t){var n=Math.sqrt(Ir(t,t));return n&&(t[0]/=n,t[1]/=n),n}function Br(t,n,e){return t[0]+=e*n[0],t[1]+=e*n[1],t}function Xr(t){return t.length?t.pop()+",":""}function Jr(t,n,e,r){if(t[0]!==n[0]||t[1]!==n[1]){var i=e.push("translate(",null,",",null,")");r.push({i:i-4,x:wr(t[0],n[0])},{i:i-2,x:wr(t[1],n[1])})}else(n[0]||n[1])&&e.push("translate("+n+")")}function Zr(t,n,e,r){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),r.push({i:e.push(Xr(e)+"rotate(",null,")")-2,x:wr(t,n)})):n&&e.push(Xr(e)+"rotate("+n+")")}function $r(t,n,e,r){t!==n?r.push({i:e.push(Xr(e)+"skewX(",null,")")-2,x:wr(t,n)}):n&&e.push(Xr(e)+"skewX("+n+")")}function Gr(t,n,e,r){if(t[0]!==n[0]||t[1]!==n[1]){var i=e.push(Xr(e)+"scale(",null,",",null,")");r.push({i:i-4,x:wr(t[0],n[0])},{i:i-2,x:wr(t[1],n[1])})}else 1===n[0]&&1===n[1]||e.push(Xr(e)+"scale("+n+")")}function Qr(t,n){var e=[],r=[];return t=ha.transform(t),n=ha.transform(n),Jr(t.translate,n.translate,e,r),Zr(t.rotate,n.rotate,e,r),$r(t.skew,n.skew,e,r),Gr(t.scale,n.scale,e,r),t=n=null,function(t){for(var n,i=-1,u=r.length;++i<u;)e[(n=r[i]).i]=n.x(t);return e.join("")}}function Kr(t,n){return n=(n-=t=+t)||1/n,function(e){return(e-t)/n}}function ti(t,n){return n=(n-=t=+t)||1/n,function(e){return Math.max(0,Math.min(1,(e-t)/n))}}function ni(t){for(var n=t.source,e=t.target,r=ri(n,e),i=[n];n!==r;)n=n.parent,i.push(n);for(var u=i.length;e!==r;)i.splice(u,0,e),e=e.parent;return i}function ei(t){for(var n=[],e=t.parent;null!=e;)n.push(t),t=e,e=e.parent;return n.push(t),n}function ri(t,n){if(t===n)return t;for(var e=ei(t),r=ei(n),i=e.pop(),u=r.pop(),a=null;i===u;)a=i,i=e.pop(),u=r.pop();return a}function ii(t){t.fixed|=2}function ui(t){t.fixed&=-7}function ai(t){t.fixed|=4,t.px=t.x,t.py=t.y}function oi(t){t.fixed&=-5}function ci(t,n,e){var r=0,i=0;if(t.charge=0,!t.leaf)for(var u,a=t.nodes,o=a.length,c=-1;++c<o;)u=a[c],null!=u&&(ci(u,n,e),t.charge+=u.charge,r+=u.charge*u.cx,i+=u.charge*u.cy);if(t.point){t.leaf||(t.point.x+=Math.random()-.5,t.point.y+=Math.random()-.5);var l=n*e[t.point.index];t.charge+=t.pointCharge=l,r+=l*t.point.x,i+=l*t.point.y}t.cx=r/t.charge,t.cy=i/t.charge}function li(t,n){return ha.rebind(t,n,"sort","children","value"),t.nodes=t,t.links=pi,t}function fi(t,n){for(var e=[t];null!=(t=e.pop());)if(n(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)e.push(i[r])}function si(t,n){for(var e=[t],r=[];null!=(t=e.pop());)if(r.push(t),(u=t.children)&&(i=u.length))for(var i,u,a=-1;++a<i;)e.push(u[a]);for(;null!=(t=r.pop());)n(t)}function hi(t){return t.children}function di(t){return t.value}function gi(t,n){return n.value-t.value}function pi(t){return ha.merge(t.map(function(t){return(t.children||[]).map(function(n){return{source:t,target:n}})}))}function vi(t){return t.x}function yi(t){return t.y}function mi(t,n,e){t.y0=n,t.y=e}function bi(t){return ha.range(t.length)}function xi(t){for(var n=-1,e=t[0].length,r=[];++n<e;)r[n]=0;return r}function Mi(t){for(var n,e=1,r=0,i=t[0][1],u=t.length;u>e;++e)(n=t[e][1])>i&&(r=e,i=n);return r}function wi(t){return t.reduce(Si,0)}function Si(t,n){return t+n[1]}function ki(t,n){return _i(t,Math.ceil(Math.log(n.length)/Math.LN2+1))}function _i(t,n){for(var e=-1,r=+t[0],i=(t[1]-r)/n,u=[];++e<=n;)u[e]=i*e+r;return u}function Ti(t){return[ha.min(t),ha.max(t)]}function Ni(t,n){return t.value-n.value}function Ai(t,n){var e=t._pack_next;t._pack_next=n,n._pack_prev=t,n._pack_next=e,e._pack_prev=n}function Ei(t,n){t._pack_next=n,n._pack_prev=t}function Ci(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return.999*i*i>e*e+r*r}function Di(t){function n(t){f=Math.min(t.x-t.r,f),s=Math.max(t.x+t.r,s),h=Math.min(t.y-t.r,h),d=Math.max(t.y+t.r,d)}if((e=t.children)&&(l=e.length)){var e,r,i,u,a,o,c,l,f=1/0,s=-(1/0),h=1/0,d=-(1/0);if(e.forEach(zi),r=e[0],r.x=-r.r,r.y=0,n(r),l>1&&(i=e[1],i.x=i.r,i.y=0,n(i),l>2))for(u=e[2],ji(r,i,u),n(u),Ai(r,u),r._pack_prev=u,Ai(u,i),i=r._pack_next,a=3;l>a;a++){ji(r,i,u=e[a]);var g=0,p=1,v=1;for(o=i._pack_next;o!==i;o=o._pack_next,p++)if(Ci(o,u)){g=1;break}if(1==g)for(c=r._pack_prev;c!==o._pack_prev&&!Ci(c,u);c=c._pack_prev,v++);g?(v>p||p==v&&i.r<r.r?Ei(r,i=o):Ei(r=c,i),a--):(Ai(r,u),i=u,n(u))}var y=(f+s)/2,m=(h+d)/2,b=0;for(a=0;l>a;a++)u=e[a],u.x-=y,u.y-=m,b=Math.max(b,u.r+Math.sqrt(u.x*u.x+u.y*u.y));t.r=b,e.forEach(Li)}}function zi(t){t._pack_next=t._pack_prev=t}function Li(t){delete t._pack_next,delete t._pack_prev}function Vi(t,n,e,r){var i=t.children;if(t.x=n+=r*t.x,t.y=e+=r*t.y,t.r*=r,i)for(var u=-1,a=i.length;++u<a;)Vi(i[u],n,e,r)}function ji(t,n,e){var r=t.r+e.r,i=n.x-t.x,u=n.y-t.y;if(r&&(i||u)){var a=n.r+e.r,o=i*i+u*u;a*=a,r*=r;var c=.5+(r-a)/(2*o),l=Math.sqrt(Math.max(0,2*a*(r+o)-(r-=o)*r-a*a))/(2*o);e.x=t.x+c*i+l*u,e.y=t.y+c*u-l*i}else e.x=t.x+r,e.y=t.y}function Fi(t,n){return t.parent==n.parent?1:2}function Pi(t){var n=t.children;return n.length?n[0]:t.t}function Oi(t){var n,e=t.children;return(n=e.length)?e[n-1]:t.t}function Ui(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function Hi(t){for(var n,e=0,r=0,i=t.children,u=i.length;--u>=0;)n=i[u],n.z+=e,n.m+=e,e+=n.s+(r+=n.c)}function qi(t,n,e){return t.a.parent===n.parent?t.a:e}function Yi(t){return 1+ha.max(t,function(t){return t.y})}function Ri(t){return t.reduce(function(t,n){return t+n.x},0)/t.length}function Ii(t){var n=t.children;return n&&n.length?Ii(n[0]):t}function Wi(t){var n,e=t.children;return e&&(n=e.length)?Wi(e[n-1]):t}function Bi(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function Xi(t,n){var e=t.x+n[3],r=t.y+n[0],i=t.dx-n[1]-n[3],u=t.dy-n[0]-n[2];return 0>i&&(e+=i/2,i=0),0>u&&(r+=u/2,u=0),{x:e,y:r,dx:i,dy:u}}function Ji(t){var n=t[0],e=t[t.length-1];return e>n?[n,e]:[e,n]}function Zi(t){return t.rangeExtent?t.rangeExtent():Ji(t.range())}function $i(t,n,e,r){var i=e(t[0],t[1]),u=r(n[0],n[1]);return function(t){return u(i(t))}}function Gi(t,n){var e,r=0,i=t.length-1,u=t[r],a=t[i];return u>a&&(e=r,r=i,i=e,e=u,u=a,a=e),t[r]=n.floor(u),t[i]=n.ceil(a),t}function Qi(t){return t?{floor:function(n){return Math.floor(n/t)*t},ceil:function(n){return Math.ceil(n/t)*t}}:Ec}function Ki(t,n,e,r){var i=[],u=[],a=0,o=Math.min(t.length,n.length)-1;for(t[o]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<=o;)i.push(e(t[a-1],t[a])),u.push(r(n[a-1],n[a]));return function(n){var e=ha.bisect(t,n,1,o)-1;return u[e](i[e](n))}}function tu(t,n,e,r){function i(){var i=Math.min(t.length,n.length)>2?Ki:$i,c=r?ti:Kr;return a=i(t,n,c,e),o=i(n,t,c,kr),u}function u(t){return a(t)}var a,o;return u.invert=function(t){return o(t)},u.domain=function(n){return arguments.length?(t=n.map(Number),i()):t},u.range=function(t){return arguments.length?(n=t,i()):n},u.rangeRound=function(t){return u.range(t).interpolate(Yr)},u.clamp=function(t){return arguments.length?(r=t,i()):r},u.interpolate=function(t){return arguments.length?(e=t,i()):e},u.ticks=function(n){return iu(t,n)},u.tickFormat=function(n,e){return uu(t,n,e)},u.nice=function(n){return eu(t,n),i()},u.copy=function(){return tu(t,n,e,r)},i()}function nu(t,n){return ha.rebind(t,n,"range","rangeRound","interpolate","clamp")}function eu(t,n){return Gi(t,Qi(ru(t,n)[2])),Gi(t,Qi(ru(t,n)[2])),t}function ru(t,n){null==n&&(n=10);var e=Ji(t),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/n)/Math.LN10)),u=n/r*i;return.15>=u?i*=10:.35>=u?i*=5:.75>=u&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function iu(t,n){return ha.range.apply(ha,ru(t,n))}function uu(t,n,e){var r=ru(t,n);if(e){var i=yo.exec(e);if(i.shift(),"s"===i[8]){var u=ha.formatPrefix(Math.max(ka(r[0]),ka(r[1])));return i[7]||(i[7]="."+au(u.scale(r[2]))),i[8]="f",e=ha.format(i.join("")),function(t){return e(u.scale(t))+u.symbol}}i[7]||(i[7]="."+ou(i[8],r)),e=i.join("")}else e=",."+au(r[2])+"f";return ha.format(e)}function au(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}function ou(t,n){var e=au(n[2]);return t in Cc?Math.abs(e-au(Math.max(ka(n[0]),ka(n[1]))))+ +("e"!==t):e-2*("%"===t)}function cu(t,n,e,r){function i(t){return(e?Math.log(0>t?0:t):-Math.log(t>0?0:-t))/Math.log(n)}function u(t){return e?Math.pow(n,t):-Math.pow(n,-t)}function a(n){return t(i(n))}return a.invert=function(n){return u(t.invert(n))},a.domain=function(n){return arguments.length?(e=n[0]>=0,t.domain((r=n.map(Number)).map(i)),a):r},a.base=function(e){return arguments.length?(n=+e,t.domain(r.map(i)),a):n},a.nice=function(){var n=Gi(r.map(i),e?Math:zc);return t.domain(n),r=n.map(u),a},a.ticks=function(){var t=Ji(r),a=[],o=t[0],c=t[1],l=Math.floor(i(o)),f=Math.ceil(i(c)),s=n%1?2:n;if(isFinite(f-l)){if(e){for(;f>l;l++)for(var h=1;s>h;h++)a.push(u(l)*h);a.push(u(l))}else for(a.push(u(l));l++<f;)for(var h=s-1;h>0;h--)a.push(u(l)*h);for(l=0;a[l]<o;l++);for(f=a.length;a[f-1]>c;f--);a=a.slice(l,f)}return a},a.tickFormat=function(t,e){if(!arguments.length)return Dc;arguments.length<2?e=Dc:"function"!=typeof e&&(e=ha.format(e));var r=Math.max(1,n*t/a.ticks().length);return function(t){var a=t/u(Math.round(i(t)));return n-.5>a*n&&(a*=n),r>=a?e(t):""}},a.copy=function(){return cu(t.copy(),n,e,r)},nu(a,t)}function lu(t,n,e){function r(n){return t(i(n))}var i=fu(n),u=fu(1/n);return r.invert=function(n){return u(t.invert(n))},r.domain=function(n){return arguments.length?(t.domain((e=n.map(Number)).map(i)),r):e},r.ticks=function(t){return iu(e,t)},r.tickFormat=function(t,n){return uu(e,t,n)},r.nice=function(t){return r.domain(eu(e,t))},r.exponent=function(a){return arguments.length?(i=fu(n=a),u=fu(1/n),t.domain(e.map(i)),r):n},r.copy=function(){return lu(t.copy(),n,e)},nu(r,t)}function fu(t){return function(n){return 0>n?-Math.pow(-n,t):Math.pow(n,t)}}function su(t,n){function e(e){return u[((i.get(e)||("range"===n.t?i.set(e,t.push(e)):NaN))-1)%u.length]}function r(n,e){return ha.range(t.length).map(function(t){return n+e*t})}var i,u,a;return e.domain=function(r){if(!arguments.length)return t;t=[],i=new g;for(var u,a=-1,o=r.length;++a<o;)i.has(u=r[a])||i.set(u,t.push(u));return e[n.t].apply(e,n.a)},e.range=function(t){return arguments.length?(u=t,a=0,n={t:"range",a:arguments},e):u},e.rangePoints=function(i,o){arguments.length<2&&(o=0);var c=i[0],l=i[1],f=t.length<2?(c=(c+l)/2,0):(l-c)/(t.length-1+o);return u=r(c+f*o/2,f),a=0,n={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(i,o){arguments.length<2&&(o=0);var c=i[0],l=i[1],f=t.length<2?(c=l=Math.round((c+l)/2),0):(l-c)/(t.length-1+o)|0;return u=r(c+Math.round(f*o/2+(l-c-(t.length-1+o)*f)/2),f),a=0,n={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(i,o,c){arguments.length<2&&(o=0),arguments.length<3&&(c=o);var l=i[1]<i[0],f=i[l-0],s=i[1-l],h=(s-f)/(t.length-o+2*c);return u=r(f+h*c,h),l&&u.reverse(),a=h*(1-o),n={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(i,o,c){arguments.length<2&&(o=0),arguments.length<3&&(c=o);var l=i[1]<i[0],f=i[l-0],s=i[1-l],h=Math.floor((s-f)/(t.length-o+2*c));return u=r(f+Math.round((s-f-(t.length-o)*h)/2),h),l&&u.reverse(),a=Math.round(h*(1-o)),n={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return a},e.rangeExtent=function(){return Ji(n.a[0])},e.copy=function(){return su(t,n)},e.domain(t)}function hu(t,n){function e(){var e=0,u=n.length;for(i=[];++e<u;)i[e-1]=ha.quantile(t,e/u);return r}function r(t){return isNaN(t=+t)?void 0:n[ha.bisect(i,t)]}var i;return r.domain=function(n){return arguments.length?(t=n.map(c).filter(l).sort(o),e()):t},r.range=function(t){return arguments.length?(n=t,e()):n},r.quantiles=function(){return i},r.invertExtent=function(e){return e=n.indexOf(e),0>e?[NaN,NaN]:[e>0?i[e-1]:t[0],e<i.length?i[e]:t[t.length-1]]},r.copy=function(){return hu(t,n)},e()}function du(t,n,e){function r(n){return e[Math.max(0,Math.min(a,Math.floor(u*(n-t))))]}function i(){return u=e.length/(n-t),a=e.length-1,r}var u,a;return r.domain=function(e){return arguments.length?(t=+e[0],n=+e[e.length-1],i()):[t,n]},r.range=function(t){return arguments.length?(e=t,i()):e},r.invertExtent=function(n){return n=e.indexOf(n),n=0>n?NaN:n/u+t,[n,n+1/u]},r.copy=function(){return du(t,n,e)},i()}function gu(t,n){function e(e){return e>=e?n[ha.bisect(t,e)]:void 0}return e.domain=function(n){return arguments.length?(t=n,e):t},e.range=function(t){return arguments.length?(n=t,e):n},e.invertExtent=function(e){return e=n.indexOf(e),[t[e-1],t[e]]},e.copy=function(){return gu(t,n)},e}function pu(t){function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=e.map(n),n):t},n.ticks=function(n){return iu(t,n)},n.tickFormat=function(n,e){return uu(t,n,e)},n.copy=function(){return pu(t)},n}function vu(){return 0}function yu(t){return t.innerRadius}function mu(t){return t.outerRadius}function bu(t){return t.startAngle}function xu(t){return t.endAngle}function Mu(t){return t&&t.padAngle}function wu(t,n,e,r){return(t-e)*n-(n-r)*t>0?0:1}function Su(t,n,e,r,i){var u=t[0]-n[0],a=t[1]-n[1],o=(i?r:-r)/Math.sqrt(u*u+a*a),c=o*a,l=-o*u,f=t[0]+c,s=t[1]+l,h=n[0]+c,d=n[1]+l,g=(f+h)/2,p=(s+d)/2,v=h-f,y=d-s,m=v*v+y*y,b=e-r,x=f*d-h*s,M=(0>y?-1:1)*Math.sqrt(Math.max(0,b*b*m-x*x)),w=(x*y-v*M)/m,S=(-x*v-y*M)/m,k=(x*y+v*M)/m,_=(-x*v+y*M)/m,T=w-g,N=S-p,A=k-g,E=_-p;return T*T+N*N>A*A+E*E&&(w=k,S=_),[[w-c,S-l],[w*e/b,S*e/b]]}function ku(t){function n(n){function a(){l.push("M",u(t(f),o))}for(var c,l=[],f=[],s=-1,h=n.length,d=Dt(e),g=Dt(r);++s<h;)i.call(this,c=n[s],s)?f.push([+d.call(this,c,s),+g.call(this,c,s)]):f.length&&(a(),f=[]);return f.length&&a(),l.length?l.join(""):null}var e=Ve,r=je,i=jn,u=_u,a=u.key,o=.7;return n.x=function(t){return arguments.length?(e=t,n):e},n.y=function(t){return arguments.length?(r=t,n):r},n.defined=function(t){return arguments.length?(i=t,n):i},n.interpolate=function(t){return arguments.length?(a="function"==typeof t?u=t:(u=Oc.get(t)||_u).key,n):a},n.tension=function(t){return arguments.length?(o=t,n):o},n}function _u(t){return t.length>1?t.join("L"):t+"Z"}function Tu(t){return t.join("L")+"Z"}function Nu(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("H",(r[0]+(r=t[n])[0])/2,"V",r[1]);return e>1&&i.push("H",r[0]),i.join("")}function Au(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("V",(r=t[n])[1],"H",r[0]);return i.join("")}function Eu(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("H",(r=t[n])[0],"V",r[1]);return i.join("")}function Cu(t,n){return t.length<4?_u(t):t[1]+Lu(t.slice(1,-1),Vu(t,n))}function Du(t,n){return t.length<3?Tu(t):t[0]+Lu((t.push(t[0]),t),Vu([t[t.length-2]].concat(t,[t[1]]),n))}function zu(t,n){return t.length<3?_u(t):t[0]+Lu(t,Vu(t,n))}function Lu(t,n){if(n.length<1||t.length!=n.length&&t.length!=n.length+2)return _u(t);var e=t.length!=n.length,r="",i=t[0],u=t[1],a=n[0],o=a,c=1;if(e&&(r+="Q"+(u[0]-2*a[0]/3)+","+(u[1]-2*a[1]/3)+","+u[0]+","+u[1],i=t[1],c=2),n.length>1){o=n[1],u=t[c],c++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(u[0]-o[0])+","+(u[1]-o[1])+","+u[0]+","+u[1];for(var l=2;l<n.length;l++,c++)u=t[c],o=n[l],r+="S"+(u[0]-o[0])+","+(u[1]-o[1])+","+u[0]+","+u[1]}if(e){var f=t[c];r+="Q"+(u[0]+2*o[0]/3)+","+(u[1]+2*o[1]/3)+","+f[0]+","+f[1]}return r}function Vu(t,n){for(var e,r=[],i=(1-n)/2,u=t[0],a=t[1],o=1,c=t.length;++o<c;)e=u,u=a,a=t[o],r.push([i*(a[0]-e[0]),i*(a[1]-e[1])]);return r}function ju(t){if(t.length<3)return _u(t);var n=1,e=t.length,r=t[0],i=r[0],u=r[1],a=[i,i,i,(r=t[1])[0]],o=[u,u,u,r[1]],c=[i,",",u,"L",Uu(qc,a),",",Uu(qc,o)];for(t.push(t[e-1]);++n<=e;)r=t[n],a.shift(),a.push(r[0]),o.shift(),o.push(r[1]),Hu(c,a,o);return t.pop(),c.push("L",r),c.join("")}function Fu(t){if(t.length<4)return _u(t);for(var n,e=[],r=-1,i=t.length,u=[0],a=[0];++r<3;)n=t[r],u.push(n[0]),a.push(n[1]);for(e.push(Uu(qc,u)+","+Uu(qc,a)),--r;++r<i;)n=t[r],u.shift(),u.push(n[0]),a.shift(),a.push(n[1]),Hu(e,u,a);return e.join("")}function Pu(t){for(var n,e,r=-1,i=t.length,u=i+4,a=[],o=[];++r<4;)e=t[r%i],a.push(e[0]),o.push(e[1]);for(n=[Uu(qc,a),",",Uu(qc,o)],--r;++r<u;)e=t[r%i],a.shift(),a.push(e[0]),o.shift(),o.push(e[1]),Hu(n,a,o);return n.join("")}function Ou(t,n){var e=t.length-1;if(e)for(var r,i,u=t[0][0],a=t[0][1],o=t[e][0]-u,c=t[e][1]-a,l=-1;++l<=e;)r=t[l],i=l/e,r[0]=n*r[0]+(1-n)*(u+i*o),r[1]=n*r[1]+(1-n)*(a+i*c);return ju(t)}function Uu(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function Hu(t,n,e){t.push("C",Uu(Uc,n),",",Uu(Uc,e),",",Uu(Hc,n),",",Uu(Hc,e),",",Uu(qc,n),",",Uu(qc,e))}function qu(t,n){return(n[1]-t[1])/(n[0]-t[0])}function Yu(t){for(var n=0,e=t.length-1,r=[],i=t[0],u=t[1],a=r[0]=qu(i,u);++n<e;)r[n]=(a+(a=qu(i=u,u=t[n+1])))/2;return r[n]=a,r}function Ru(t){for(var n,e,r,i,u=[],a=Yu(t),o=-1,c=t.length-1;++o<c;)n=qu(t[o],t[o+1]),ka(n)<qa?a[o]=a[o+1]=0:(e=a[o]/n,r=a[o+1]/n,i=e*e+r*r,i>9&&(i=3*n/Math.sqrt(i),a[o]=i*e,a[o+1]=i*r));for(o=-1;++o<=c;)i=(t[Math.min(c,o+1)][0]-t[Math.max(0,o-1)][0])/(6*(1+a[o]*a[o])),u.push([i||0,a[o]*i||0]);return u}function Iu(t){return t.length<3?_u(t):t[0]+Lu(t,Ru(t))}function Wu(t){for(var n,e,r,i=-1,u=t.length;++i<u;)n=t[i],
e=n[0],r=n[1]-Ba,n[0]=e*Math.cos(r),n[1]=e*Math.sin(r);return t}function Bu(t){function n(n){function c(){p.push("M",o(t(y),s),f,l(t(v.reverse()),s),"Z")}for(var h,d,g,p=[],v=[],y=[],m=-1,b=n.length,x=Dt(e),M=Dt(i),w=e===r?function(){return d}:Dt(r),S=i===u?function(){return g}:Dt(u);++m<b;)a.call(this,h=n[m],m)?(v.push([d=+x.call(this,h,m),g=+M.call(this,h,m)]),y.push([+w.call(this,h,m),+S.call(this,h,m)])):v.length&&(c(),v=[],y=[]);return v.length&&c(),p.length?p.join(""):null}var e=Ve,r=Ve,i=0,u=je,a=jn,o=_u,c=o.key,l=o,f="L",s=.7;return n.x=function(t){return arguments.length?(e=r=t,n):r},n.x0=function(t){return arguments.length?(e=t,n):e},n.x1=function(t){return arguments.length?(r=t,n):r},n.y=function(t){return arguments.length?(i=u=t,n):u},n.y0=function(t){return arguments.length?(i=t,n):i},n.y1=function(t){return arguments.length?(u=t,n):u},n.defined=function(t){return arguments.length?(a=t,n):a},n.interpolate=function(t){return arguments.length?(c="function"==typeof t?o=t:(o=Oc.get(t)||_u).key,l=o.reverse||o,f=o.closed?"M":"L",n):c},n.tension=function(t){return arguments.length?(s=t,n):s},n}function Xu(t){return t.radius}function Ju(t){return[t.x,t.y]}function Zu(t){return function(){var n=t.apply(this,arguments),e=n[0],r=n[1]-Ba;return[e*Math.cos(r),e*Math.sin(r)]}}function $u(){return 64}function Gu(){return"circle"}function Qu(t){var n=Math.sqrt(t/Ra);return"M0,"+n+"A"+n+","+n+" 0 1,1 0,"+-n+"A"+n+","+n+" 0 1,1 0,"+n+"Z"}function Ku(t){return function(){var n,e,r;(n=this[t])&&(r=n[e=n.active])&&(r.timer.c=null,r.timer.t=NaN,--n.count?delete n[e]:delete this[t],n.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function ta(t,n,e){return Ea(t,Jc),t.namespace=n,t.id=e,t}function na(t,n,e,r){var i=t.id,u=t.namespace;return J(t,"function"==typeof e?function(t,a,o){t[u][i].tween.set(n,r(e.call(t,t.__data__,a,o)))}:(e=r(e),function(t){t[u][i].tween.set(n,e)}))}function ea(t){return null==t&&(t=""),function(){this.textContent=t}}function ra(t){return null==t?"__transition__":"__transition_"+t+"__"}function ia(t,n,e,r,i){function u(t){var n=p.delay;return l.t=n+c,t>=n?a(t-n):void(l.c=a)}function a(e){var i=d.active,u=d[i];u&&(u.timer.c=null,u.timer.t=NaN,--d.count,delete d[i],u.event&&u.event.interrupt.call(t,t.__data__,u.index));for(var a in d)if(r>+a){var g=d[a];g.timer.c=null,g.timer.t=NaN,--d.count,delete d[a]}l.c=o,Ft(function(){return l.c&&o(e||1)&&(l.c=null,l.t=NaN),1},0,c),d.active=r,p.event&&p.event.start.call(t,t.__data__,n),h=[],p.tween.forEach(function(e,r){(r=r.call(t,t.__data__,n))&&h.push(r)}),s=p.ease,f=p.duration}function o(i){for(var u=i/f,a=s(u),o=h.length;o>0;)h[--o].call(t,a);return u>=1?(p.event&&p.event.end.call(t,t.__data__,n),--d.count?delete d[r]:delete t[e],1):void 0}var c,l,f,s,h,d=t[e]||(t[e]={active:0,count:0}),p=d[r];p||(c=i.time,l=Ft(u,0,c),p=d[r]={tween:new g,time:c,timer:l,delay:i.delay,duration:i.duration,ease:i.ease,index:n},i=null,++d.count)}function ua(t,n,e){t.attr("transform",function(t){var r=n(t);return"translate("+(isFinite(r)?r:e(t))+",0)"})}function aa(t,n,e){t.attr("transform",function(t){var r=n(t);return"translate(0,"+(isFinite(r)?r:e(t))+")"})}function oa(t){return t.toISOString()}function ca(t,n,e){function r(n){return t(n)}function i(t,e){var r=t[1]-t[0],i=r/e,u=ha.bisect(rl,i);return u==rl.length?[n.year,ru(t.map(function(t){return t/31536e6}),e)[2]]:u?n[i/rl[u-1]<rl[u]/i?u-1:u]:[al,ru(t,e)[2]]}return r.invert=function(n){return la(t.invert(n))},r.domain=function(n){return arguments.length?(t.domain(n),r):t.domain().map(la)},r.nice=function(t,n){function e(e){return!isNaN(e)&&!t.range(e,la(+e+1),n).length}var u=r.domain(),a=Ji(u),o=null==t?i(a,10):"number"==typeof t&&i(a,t);return o&&(t=o[0],n=o[1]),r.domain(Gi(u,n>1?{floor:function(n){for(;e(n=t.floor(n));)n=la(n-1);return n},ceil:function(n){for(;e(n=t.ceil(n));)n=la(+n+1);return n}}:t))},r.ticks=function(t,n){var e=Ji(r.domain()),u=null==t?i(e,10):"number"==typeof t?i(e,t):!t.range&&[{range:t},n];return u&&(t=u[0],n=u[1]),t.range(e[0],la(+e[1]+1),1>n?1:n)},r.tickFormat=function(){return e},r.copy=function(){return ca(t.copy(),n,e)},nu(r,t)}function la(t){return new Date(t)}function fa(t){return JSON.parse(t.responseText)}function sa(t){var n=pa.createRange();return n.selectNode(pa.body),n.createContextualFragment(t.responseText)}var ha={version:"3.5.16"},da=[].slice,ga=function(t){return da.call(t)},pa=this.document;if(pa)try{ga(pa.documentElement.childNodes)[0].nodeType}catch(va){ga=function(t){for(var n=t.length,e=new Array(n);n--;)e[n]=t[n];return e}}if(Date.now||(Date.now=function(){return+new Date}),pa)try{pa.createElement("DIV").style.setProperty("opacity",0,"")}catch(ya){var ma=this.Element.prototype,ba=ma.setAttribute,xa=ma.setAttributeNS,Ma=this.CSSStyleDeclaration.prototype,wa=Ma.setProperty;ma.setAttribute=function(t,n){ba.call(this,t,n+"")},ma.setAttributeNS=function(t,n,e){xa.call(this,t,n,e+"")},Ma.setProperty=function(t,n,e){wa.call(this,t,n+"",e)}}ha.ascending=o,ha.descending=function(t,n){return t>n?-1:n>t?1:n>=t?0:NaN},ha.min=function(t,n){var e,r,i=-1,u=t.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=t[i])&&e>r&&(e=r)}else{for(;++i<u;)if(null!=(r=n.call(t,t[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=n.call(t,t[i],i))&&e>r&&(e=r)}return e},ha.max=function(t,n){var e,r,i=-1,u=t.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=t[i])&&r>e&&(e=r)}else{for(;++i<u;)if(null!=(r=n.call(t,t[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=n.call(t,t[i],i))&&r>e&&(e=r)}return e},ha.extent=function(t,n){var e,r,i,u=-1,a=t.length;if(1===arguments.length){for(;++u<a;)if(null!=(r=t[u])&&r>=r){e=i=r;break}for(;++u<a;)null!=(r=t[u])&&(e>r&&(e=r),r>i&&(i=r))}else{for(;++u<a;)if(null!=(r=n.call(t,t[u],u))&&r>=r){e=i=r;break}for(;++u<a;)null!=(r=n.call(t,t[u],u))&&(e>r&&(e=r),r>i&&(i=r))}return[e,i]},ha.sum=function(t,n){var e,r=0,i=t.length,u=-1;if(1===arguments.length)for(;++u<i;)l(e=+t[u])&&(r+=e);else for(;++u<i;)l(e=+n.call(t,t[u],u))&&(r+=e);return r},ha.mean=function(t,n){var e,r=0,i=t.length,u=-1,a=i;if(1===arguments.length)for(;++u<i;)l(e=c(t[u]))?r+=e:--a;else for(;++u<i;)l(e=c(n.call(t,t[u],u)))?r+=e:--a;return a?r/a:void 0},ha.quantile=function(t,n){var e=(t.length-1)*n+1,r=Math.floor(e),i=+t[r-1],u=e-r;return u?i+u*(t[r]-i):i},ha.median=function(t,n){var e,r=[],i=t.length,u=-1;if(1===arguments.length)for(;++u<i;)l(e=c(t[u]))&&r.push(e);else for(;++u<i;)l(e=c(n.call(t,t[u],u)))&&r.push(e);return r.length?ha.quantile(r.sort(o),.5):void 0},ha.variance=function(t,n){var e,r,i=t.length,u=0,a=0,o=-1,f=0;if(1===arguments.length)for(;++o<i;)l(e=c(t[o]))&&(r=e-u,u+=r/++f,a+=r*(e-u));else for(;++o<i;)l(e=c(n.call(t,t[o],o)))&&(r=e-u,u+=r/++f,a+=r*(e-u));return f>1?a/(f-1):void 0},ha.deviation=function(){var t=ha.variance.apply(this,arguments);return t?Math.sqrt(t):t};var Sa=f(o);ha.bisectLeft=Sa.left,ha.bisect=ha.bisectRight=Sa.right,ha.bisector=function(t){return f(1===t.length?function(n,e){return o(t(n),e)}:t)},ha.shuffle=function(t,n,e){(u=arguments.length)<3&&(e=t.length,2>u&&(n=0));for(var r,i,u=e-n;u;)i=Math.random()*u--|0,r=t[u+n],t[u+n]=t[i+n],t[i+n]=r;return t},ha.permute=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},ha.pairs=function(t){for(var n,e=0,r=t.length-1,i=t[0],u=new Array(0>r?0:r);r>e;)u[e]=[n=i,i=t[++e]];return u},ha.transpose=function(t){if(!(i=t.length))return[];for(var n=-1,e=ha.min(t,s),r=new Array(e);++n<e;)for(var i,u=-1,a=r[n]=new Array(i);++u<i;)a[u]=t[u][n];return r},ha.zip=function(){return ha.transpose(arguments)},ha.keys=function(t){var n=[];for(var e in t)n.push(e);return n},ha.values=function(t){var n=[];for(var e in t)n.push(t[e]);return n},ha.entries=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},ha.merge=function(t){for(var n,e,r,i=t.length,u=-1,a=0;++u<i;)a+=t[u].length;for(e=new Array(a);--i>=0;)for(r=t[i],n=r.length;--n>=0;)e[--a]=r[n];return e};var ka=Math.abs;ha.range=function(t,n,e){if(arguments.length<3&&(e=1,arguments.length<2&&(n=t,t=0)),(n-t)/e===1/0)throw new Error("infinite range");var r,i=[],u=h(ka(e)),a=-1;if(t*=u,n*=u,e*=u,0>e)for(;(r=t+e*++a)>n;)i.push(r/u);else for(;(r=t+e*++a)<n;)i.push(r/u);return i},ha.map=function(t,n){var e=new g;if(t instanceof g)t.forEach(function(t,n){e.set(t,n)});else if(Array.isArray(t)){var r,i=-1,u=t.length;if(1===arguments.length)for(;++i<u;)e.set(i,t[i]);else for(;++i<u;)e.set(n.call(t,r=t[i],i),r)}else for(var a in t)e.set(a,t[a]);return e};var _a="__proto__",Ta="\x00";d(g,{has:y,get:function(t){return this._[p(t)]},set:function(t,n){return this._[p(t)]=n},remove:m,keys:b,values:function(){var t=[];for(var n in this._)t.push(this._[n]);return t},entries:function(){var t=[];for(var n in this._)t.push({key:v(n),value:this._[n]});return t},size:x,empty:M,forEach:function(t){for(var n in this._)t.call(this,v(n),this._[n])}}),ha.nest=function(){function t(n,a,o){if(o>=u.length)return r?r.call(i,a):e?a.sort(e):a;for(var c,l,f,s,h=-1,d=a.length,p=u[o++],v=new g;++h<d;)(s=v.get(c=p(l=a[h])))?s.push(l):v.set(c,[l]);return n?(l=n(),f=function(e,r){l.set(e,t(n,r,o))}):(l={},f=function(e,r){l[e]=t(n,r,o)}),v.forEach(f),l}function n(t,e){if(e>=u.length)return t;var r=[],i=a[e++];return t.forEach(function(t,i){r.push({key:t,values:n(i,e)})}),i?r.sort(function(t,n){return i(t.key,n.key)}):r}var e,r,i={},u=[],a=[];return i.map=function(n,e){return t(e,n,0)},i.entries=function(e){return n(t(ha.map,e,0),0)},i.key=function(t){return u.push(t),i},i.sortKeys=function(t){return a[u.length-1]=t,i},i.sortValues=function(t){return e=t,i},i.rollup=function(t){return r=t,i},i},ha.set=function(t){var n=new w;if(t)for(var e=0,r=t.length;r>e;++e)n.add(t[e]);return n},d(w,{has:y,add:function(t){return this._[p(t+="")]=!0,t},remove:m,values:b,size:x,empty:M,forEach:function(t){for(var n in this._)t.call(this,v(n))}}),ha.behavior={},ha.rebind=function(t,n){for(var e,r=1,i=arguments.length;++r<i;)t[e=arguments[r]]=k(t,n,n[e]);return t};var Na=["webkit","ms","moz","Moz","o","O"];ha.dispatch=function(){for(var t=new N,n=-1,e=arguments.length;++n<e;)t[arguments[n]]=A(t);return t},N.prototype.on=function(t,n){var e=t.indexOf("."),r="";if(e>=0&&(r=t.slice(e+1),t=t.slice(0,e)),t)return arguments.length<2?this[t].on(r):this[t].on(r,n);if(2===arguments.length){if(null==n)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},ha.event=null,ha.requote=function(t){return t.replace(Aa,"\\$&")};var Aa=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Ea={}.__proto__?function(t,n){t.__proto__=n}:function(t,n){for(var e in n)t[e]=n[e]},Ca=function(t,n){return n.querySelector(t)},Da=function(t,n){return n.querySelectorAll(t)},za=function(t,n){var e=t.matches||t[_(t,"matchesSelector")];return(za=function(t,n){return e.call(t,n)})(t,n)};"function"==typeof Sizzle&&(Ca=function(t,n){return Sizzle(t,n)[0]||null},Da=Sizzle,za=Sizzle.matchesSelector),ha.selection=function(){return ha.select(pa.documentElement)};var La=ha.selection.prototype=[];La.select=function(t){var n,e,r,i,u=[];t=L(t);for(var a=-1,o=this.length;++a<o;){u.push(n=[]),n.parentNode=(r=this[a]).parentNode;for(var c=-1,l=r.length;++c<l;)(i=r[c])?(n.push(e=t.call(i,i.__data__,c,a)),e&&"__data__"in i&&(e.__data__=i.__data__)):n.push(null)}return z(u)},La.selectAll=function(t){var n,e,r=[];t=V(t);for(var i=-1,u=this.length;++i<u;)for(var a=this[i],o=-1,c=a.length;++o<c;)(e=a[o])&&(r.push(n=ga(t.call(e,e.__data__,o,i))),n.parentNode=e);return z(r)};var Va="http://www.w3.org/1999/xhtml",ja={svg:"http://www.w3.org/2000/svg",xhtml:Va,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ha.ns={prefix:ja,qualify:function(t){var n=t.indexOf(":"),e=t;return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),ja.hasOwnProperty(e)?{space:ja[e],local:t}:t}},La.attr=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node();return t=ha.ns.qualify(t),t.local?e.getAttributeNS(t.space,t.local):e.getAttribute(t)}for(n in t)this.each(j(n,t[n]));return this}return this.each(j(t,n))},La.classed=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node(),r=(t=O(t)).length,i=-1;if(n=e.classList){for(;++i<r;)if(!n.contains(t[i]))return!1}else for(n=e.getAttribute("class");++i<r;)if(!P(t[i]).test(n))return!1;return!0}for(n in t)this.each(U(n,t[n]));return this}return this.each(U(t,n))},La.style=function(t,n,e){var r=arguments.length;if(3>r){if("string"!=typeof t){2>r&&(n="");for(e in t)this.each(q(e,t[e],n));return this}if(2>r){var i=this.node();return a(i).getComputedStyle(i,null).getPropertyValue(t)}e=""}return this.each(q(t,n,e))},La.property=function(t,n){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(n in t)this.each(Y(n,t[n]));return this}return this.each(Y(t,n))},La.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},La.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},La.append=function(t){return t=R(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},La.insert=function(t,n){return t=R(t),n=L(n),this.select(function(){return this.insertBefore(t.apply(this,arguments),n.apply(this,arguments)||null)})},La.remove=function(){return this.each(I)},La.data=function(t,n){function e(t,e){var r,i,u,a=t.length,f=e.length,s=Math.min(a,f),h=new Array(f),d=new Array(f),p=new Array(a);if(n){var v,y=new g,m=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(y.has(v=n.call(i,i.__data__,r))?p[r]=i:y.set(v,i),m[r]=v);for(r=-1;++r<f;)(i=y.get(v=n.call(e,u=e[r],r)))?i!==!0&&(h[r]=i,i.__data__=u):d[r]=W(u),y.set(v,!0);for(r=-1;++r<a;)r in m&&y.get(m[r])!==!0&&(p[r]=t[r])}else{for(r=-1;++r<s;)i=t[r],u=e[r],i?(i.__data__=u,h[r]=i):d[r]=W(u);for(;f>r;++r)d[r]=W(e[r]);for(;a>r;++r)p[r]=t[r]}d.update=h,d.parentNode=h.parentNode=p.parentNode=t.parentNode,o.push(d),c.push(h),l.push(p)}var r,i,u=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(r=this[0]).length);++u<a;)(i=r[u])&&(t[u]=i.__data__);return t}var o=Z([]),c=z([]),l=z([]);if("function"==typeof t)for(;++u<a;)e(r=this[u],t.call(r,r.parentNode.__data__,u));else for(;++u<a;)e(r=this[u],t);return c.enter=function(){return o},c.exit=function(){return l},c},La.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},La.filter=function(t){var n,e,r,i=[];"function"!=typeof t&&(t=B(t));for(var u=0,a=this.length;a>u;u++){i.push(n=[]),n.parentNode=(e=this[u]).parentNode;for(var o=0,c=e.length;c>o;o++)(r=e[o])&&t.call(r,r.__data__,o,u)&&n.push(r)}return z(i)},La.order=function(){for(var t=-1,n=this.length;++t<n;)for(var e,r=this[t],i=r.length-1,u=r[i];--i>=0;)(e=r[i])&&(u&&u!==e.nextSibling&&u.parentNode.insertBefore(e,u),u=e);return this},La.sort=function(t){t=X.apply(this,arguments);for(var n=-1,e=this.length;++n<e;)this[n].sort(t);return this.order()},La.each=function(t){return J(this,function(n,e,r){t.call(n,n.__data__,e,r)})},La.call=function(t){var n=ga(arguments);return t.apply(n[0]=this,n),this},La.empty=function(){return!this.node()},La.node=function(){for(var t=0,n=this.length;n>t;t++)for(var e=this[t],r=0,i=e.length;i>r;r++){var u=e[r];if(u)return u}return null},La.size=function(){var t=0;return J(this,function(){++t}),t};var Fa=[];ha.selection.enter=Z,ha.selection.enter.prototype=Fa,Fa.append=La.append,Fa.empty=La.empty,Fa.node=La.node,Fa.call=La.call,Fa.size=La.size,Fa.select=function(t){for(var n,e,r,i,u,a=[],o=-1,c=this.length;++o<c;){r=(i=this[o]).update,a.push(n=[]),n.parentNode=i.parentNode;for(var l=-1,f=i.length;++l<f;)(u=i[l])?(n.push(r[l]=e=t.call(i.parentNode,u.__data__,l,o)),e.__data__=u.__data__):n.push(null)}return z(a)},Fa.insert=function(t,n){return arguments.length<2&&(n=$(this)),La.insert.call(this,t,n)},ha.select=function(t){var n;return"string"==typeof t?(n=[Ca(t,pa)],n.parentNode=pa.documentElement):(n=[t],n.parentNode=u(t)),z([n])},ha.selectAll=function(t){var n;return"string"==typeof t?(n=ga(Da(t,pa)),n.parentNode=pa.documentElement):(n=ga(t),n.parentNode=null),z([n])},La.on=function(t,n,e){var r=arguments.length;if(3>r){if("string"!=typeof t){2>r&&(n=!1);for(e in t)this.each(G(e,t[e],n));return this}if(2>r)return(r=this.node()["__on"+t])&&r._;e=!1}return this.each(G(t,n,e))};var Pa=ha.map({mouseenter:"mouseover",mouseleave:"mouseout"});pa&&Pa.forEach(function(t){"on"+t in pa&&Pa.remove(t)});var Oa,Ua=0;ha.mouse=function(t){return nt(t,C())};var Ha=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;ha.touch=function(t,n,e){if(arguments.length<3&&(e=n,n=C().changedTouches),n)for(var r,i=0,u=n.length;u>i;++i)if((r=n[i]).identifier===e)return nt(t,r)},ha.behavior.drag=function(){function t(){this.on("mousedown.drag",i).on("touchstart.drag",u)}function n(t,n,i,u,a){return function(){function o(){var t,e,r=n(h,p);r&&(t=r[0]-b[0],e=r[1]-b[1],g|=t|e,b=r,d({type:"drag",x:r[0]+l[0],y:r[1]+l[1],dx:t,dy:e}))}function c(){n(h,p)&&(y.on(u+v,null).on(a+v,null),m(g),d({type:"dragend"}))}var l,f=this,s=ha.event.target.correspondingElement||ha.event.target,h=f.parentNode,d=e.of(f,arguments),g=0,p=t(),v=".drag"+(null==p?"":"-"+p),y=ha.select(i(s)).on(u+v,o).on(a+v,c),m=tt(s),b=n(h,p);r?(l=r.apply(f,arguments),l=[l.x-b[0],l.y-b[1]]):l=[0,0],d({type:"dragstart"})}}var e=D(t,"drag","dragstart","dragend"),r=null,i=n(T,ha.mouse,a,"mousemove","mouseup"),u=n(et,ha.touch,S,"touchmove","touchend");return t.origin=function(n){return arguments.length?(r=n,t):r},ha.rebind(t,e,"on")},ha.touches=function(t,n){return arguments.length<2&&(n=C().touches),n?ga(n).map(function(n){var e=nt(t,n);return e.identifier=n.identifier,e}):[]};var qa=1e-6,Ya=qa*qa,Ra=Math.PI,Ia=2*Ra,Wa=Ia-qa,Ba=Ra/2,Xa=Ra/180,Ja=180/Ra,Za=Math.SQRT2,$a=2,Ga=4;ha.interpolateZoom=function(t,n){var e,r,i=t[0],u=t[1],a=t[2],o=n[0],c=n[1],l=n[2],f=o-i,s=c-u,h=f*f+s*s;if(Ya>h)r=Math.log(l/a)/Za,e=function(t){return[i+t*f,u+t*s,a*Math.exp(Za*t*r)]};else{var d=Math.sqrt(h),g=(l*l-a*a+Ga*h)/(2*a*$a*d),p=(l*l-a*a-Ga*h)/(2*l*$a*d),v=Math.log(Math.sqrt(g*g+1)-g),y=Math.log(Math.sqrt(p*p+1)-p);r=(y-v)/Za,e=function(t){var n=t*r,e=ct(v),o=a/($a*d)*(e*lt(Za*n+v)-ot(v));return[i+o*f,u+o*s,a*e/ct(Za*n+v)]}}return e.duration=1e3*r,e},ha.behavior.zoom=function(){function t(t){t.on(C,s).on(Ka+".zoom",d).on("dblclick.zoom",g).on(V,h)}function n(t){return[(t[0]-k.x)/k.k,(t[1]-k.y)/k.k]}function e(t){return[t[0]*k.k+k.x,t[1]*k.k+k.y]}function r(t){k.k=Math.max(T[0],Math.min(T[1],t))}function i(t,n){n=e(n),k.x+=t[0]-n[0],k.y+=t[1]-n[1]}function u(n,e,u,a){n.__chart__={x:k.x,y:k.y,k:k.k},r(Math.pow(2,a)),i(v=e,u),n=ha.select(n),N>0&&(n=n.transition().duration(N)),n.call(t.event)}function o(){M&&M.domain(x.range().map(function(t){return(t-k.x)/k.k}).map(x.invert)),S&&S.domain(w.range().map(function(t){return(t-k.y)/k.k}).map(w.invert))}function c(t){A++||t({type:"zoomstart"})}function l(t){o(),t({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function f(t){--A||(t({type:"zoomend"}),v=null)}function s(){function t(){o=1,i(ha.mouse(r),h),l(u)}function e(){s.on(z,null).on(L,null),d(o),f(u)}var r=this,u=j.of(r,arguments),o=0,s=ha.select(a(r)).on(z,t).on(L,e),h=n(ha.mouse(r)),d=tt(r);Xc.call(r),c(u)}function h(){function t(){var t=ha.touches(g);return d=k.k,t.forEach(function(t){t.identifier in v&&(v[t.identifier]=n(t))}),t}function e(){var n=ha.event.target;ha.select(n).on(x,a).on(M,o),w.push(n);for(var e=ha.event.changedTouches,r=0,i=e.length;i>r;++r)v[e[r].identifier]=null;var c=t(),l=Date.now();if(1===c.length){if(500>l-b){var f=c[0];u(g,f,v[f.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),E()}b=l}else if(c.length>1){var f=c[0],s=c[1],h=f[0]-s[0],d=f[1]-s[1];y=h*h+d*d}}function a(){var t,n,e,u,a=ha.touches(g);Xc.call(g);for(var o=0,c=a.length;c>o;++o,u=null)if(e=a[o],u=v[e.identifier]){if(n)break;t=e,n=u}if(u){var f=(f=e[0]-t[0])*f+(f=e[1]-t[1])*f,s=y&&Math.sqrt(f/y);t=[(t[0]+e[0])/2,(t[1]+e[1])/2],n=[(n[0]+u[0])/2,(n[1]+u[1])/2],r(s*d)}b=null,i(t,n),l(p)}function o(){if(ha.event.touches.length){for(var n=ha.event.changedTouches,e=0,r=n.length;r>e;++e)delete v[n[e].identifier];for(var i in v)return void t()}ha.selectAll(w).on(m,null),S.on(C,s).on(V,h),_(),f(p)}var d,g=this,p=j.of(g,arguments),v={},y=0,m=".zoom-"+ha.event.changedTouches[0].identifier,x="touchmove"+m,M="touchend"+m,w=[],S=ha.select(g),_=tt(g);e(),c(p),S.on(C,null).on(V,e)}function d(){var t=j.of(this,arguments);m?clearTimeout(m):(Xc.call(this),p=n(v=y||ha.mouse(this)),c(t)),m=setTimeout(function(){m=null,f(t)},50),E(),r(Math.pow(2,.002*Qa())*k.k),i(v,p),l(t)}function g(){var t=ha.mouse(this),e=Math.log(k.k)/Math.LN2;u(this,t,n(t),ha.event.shiftKey?Math.ceil(e)-1:Math.floor(e)+1)}var p,v,y,m,b,x,M,w,S,k={x:0,y:0,k:1},_=[960,500],T=to,N=250,A=0,C="mousedown.zoom",z="mousemove.zoom",L="mouseup.zoom",V="touchstart.zoom",j=D(t,"zoomstart","zoom","zoomend");return Ka||(Ka="onwheel"in pa?(Qa=function(){return-ha.event.deltaY*(ha.event.deltaMode?120:1)},"wheel"):"onmousewheel"in pa?(Qa=function(){return ha.event.wheelDelta},"mousewheel"):(Qa=function(){return-ha.event.detail},"MozMousePixelScroll")),t.event=function(t){t.each(function(){var t=j.of(this,arguments),n=k;Wc?ha.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},c(t)}).tween("zoom:zoom",function(){var e=_[0],r=_[1],i=v?v[0]:e/2,u=v?v[1]:r/2,a=ha.interpolateZoom([(i-k.x)/k.k,(u-k.y)/k.k,e/k.k],[(i-n.x)/n.k,(u-n.y)/n.k,e/n.k]);return function(n){var r=a(n),o=e/r[2];this.__chart__=k={x:i-r[0]*o,y:u-r[1]*o,k:o},l(t)}}).each("interrupt.zoom",function(){f(t)}).each("end.zoom",function(){f(t)}):(this.__chart__=k,c(t),l(t),f(t))})},t.translate=function(n){return arguments.length?(k={x:+n[0],y:+n[1],k:k.k},o(),t):[k.x,k.y]},t.scale=function(n){return arguments.length?(k={x:k.x,y:k.y,k:null},r(+n),o(),t):k.k},t.scaleExtent=function(n){return arguments.length?(T=null==n?to:[+n[0],+n[1]],t):T},t.center=function(n){return arguments.length?(y=n&&[+n[0],+n[1]],t):y},t.size=function(n){return arguments.length?(_=n&&[+n[0],+n[1]],t):_},t.duration=function(n){return arguments.length?(N=+n,t):N},t.x=function(n){return arguments.length?(M=n,x=n.copy(),k={x:0,y:0,k:1},t):M},t.y=function(n){return arguments.length?(S=n,w=n.copy(),k={x:0,y:0,k:1},t):S},ha.rebind(t,j,"on")};var Qa,Ka,to=[0,1/0];ha.color=st,st.prototype.toString=function(){return this.rgb()+""},ha.hsl=ht;var no=ht.prototype=new st;no.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,this.l/t)},no.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new ht(this.h,this.s,t*this.l)},no.rgb=function(){return dt(this.h,this.s,this.l)},ha.hcl=gt;var eo=gt.prototype=new st;eo.brighter=function(t){return new gt(this.h,this.c,Math.min(100,this.l+ro*(arguments.length?t:1)))},eo.darker=function(t){return new gt(this.h,this.c,Math.max(0,this.l-ro*(arguments.length?t:1)))},eo.rgb=function(){return pt(this.h,this.c,this.l).rgb()},ha.lab=vt;var ro=18,io=.95047,uo=1,ao=1.08883,oo=vt.prototype=new st;oo.brighter=function(t){return new vt(Math.min(100,this.l+ro*(arguments.length?t:1)),this.a,this.b)},oo.darker=function(t){return new vt(Math.max(0,this.l-ro*(arguments.length?t:1)),this.a,this.b)},oo.rgb=function(){return yt(this.l,this.a,this.b)},ha.rgb=wt;var co=wt.prototype=new st;co.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var n=this.r,e=this.g,r=this.b,i=30;return n||e||r?(n&&i>n&&(n=i),e&&i>e&&(e=i),r&&i>r&&(r=i),new wt(Math.min(255,n/t),Math.min(255,e/t),Math.min(255,r/t))):new wt(i,i,i)},co.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new wt(t*this.r,t*this.g,t*this.b)},co.hsl=function(){return Nt(this.r,this.g,this.b)},co.toString=function(){return"#"+_t(this.r)+_t(this.g)+_t(this.b)};var lo=ha.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});lo.forEach(function(t,n){lo.set(t,St(n))}),ha.functor=Dt,ha.xhr=zt(S),ha.dsv=function(t,n){function e(t,e,u){arguments.length<3&&(u=e,e=null);var a=Lt(t,n,null==e?r:i(e),u);return a.row=function(t){return arguments.length?a.response(null==(e=t)?r:i(t)):e},a}function r(t){return e.parse(t.responseText)}function i(t){return function(n){return e.parse(n.responseText,t)}}function u(n){return n.map(a).join(t)}function a(t){return o.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}var o=new RegExp('["'+t+"\n]"),c=t.charCodeAt(0);return e.parse=function(t,n){var r;return e.parseRows(t,function(t,e){if(r)return r(t,e-1);var i=new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}");r=n?function(t,e){return n(i(t),e)}:i})},e.parseRows=function(t,n){function e(){if(f>=l)return a;if(i)return i=!1,u;var n=f;if(34===t.charCodeAt(n)){for(var e=n;e++<l;)if(34===t.charCodeAt(e)){if(34!==t.charCodeAt(e+1))break;++e}f=e+2;var r=t.charCodeAt(e+1);return 13===r?(i=!0,10===t.charCodeAt(e+2)&&++f):10===r&&(i=!0),t.slice(n+1,e).replace(/""/g,'"')}for(;l>f;){var r=t.charCodeAt(f++),o=1;if(10===r)i=!0;else if(13===r)i=!0,10===t.charCodeAt(f)&&(++f,++o);else if(r!==c)continue;return t.slice(n,f-o)}return t.slice(n)}for(var r,i,u={},a={},o=[],l=t.length,f=0,s=0;(r=e())!==a;){for(var h=[];r!==u&&r!==a;)h.push(r),r=e();n&&null==(h=n(h,s++))||o.push(h)}return o},e.format=function(n){if(Array.isArray(n[0]))return e.formatRows(n);var r=new w,i=[];return n.forEach(function(t){for(var n in t)r.has(n)||i.push(r.add(n))}),[i.map(a).join(t)].concat(n.map(function(n){return i.map(function(t){return a(n[t])}).join(t)})).join("\n")},e.formatRows=function(t){return t.map(u).join("\n")},e},ha.csv=ha.dsv(",","text/csv"),ha.tsv=ha.dsv("	","text/tab-separated-values");var fo,so,ho,go,po=this[_(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};ha.timer=function(){Ft.apply(this,arguments)},ha.timer.flush=function(){Ot(),Ut()},ha.round=function(t,n){return n?Math.round(t*(n=Math.pow(10,n)))/n:Math.round(t)};var vo=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(qt);ha.formatPrefix=function(t,n){var e=0;return(t=+t)&&(0>t&&(t*=-1),n&&(t=ha.round(t,Ht(t,n))),e=1+Math.floor(1e-12+Math.log(t)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),vo[8+e/3]};var yo=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,mo=ha.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,n){return t.toPrecision(n)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},r:function(t,n){return(t=ha.round(t,Ht(t,n))).toFixed(Math.max(0,Math.min(20,Ht(t*(1+1e-15),n))))}}),bo=ha.time={},xo=Date;It.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){Mo.setUTCDate.apply(this._,arguments)},setDay:function(){Mo.setUTCDay.apply(this._,arguments)},setFullYear:function(){Mo.setUTCFullYear.apply(this._,arguments)},setHours:function(){Mo.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){Mo.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){Mo.setUTCMinutes.apply(this._,arguments)},setMonth:function(){Mo.setUTCMonth.apply(this._,arguments)},setSeconds:function(){Mo.setUTCSeconds.apply(this._,arguments)},setTime:function(){Mo.setTime.apply(this._,arguments)}};var Mo=Date.prototype;bo.year=Wt(function(t){return t=bo.day(t),t.setMonth(0,1),t},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t){return t.getFullYear()}),bo.years=bo.year.range,bo.years.utc=bo.year.utc.range,bo.day=Wt(function(t){var n=new xo(2e3,0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n},function(t,n){t.setDate(t.getDate()+n)},function(t){return t.getDate()-1}),bo.days=bo.day.range,bo.days.utc=bo.day.utc.range,bo.dayOfYear=function(t){var n=bo.year(t);return Math.floor((t-n-6e4*(t.getTimezoneOffset()-n.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,n){n=7-n;var e=bo[t]=Wt(function(t){return(t=bo.day(t)).setDate(t.getDate()-(t.getDay()+n)%7),t},function(t,n){t.setDate(t.getDate()+7*Math.floor(n))},function(t){var e=bo.year(t).getDay();return Math.floor((bo.dayOfYear(t)+(e+n)%7)/7)-(e!==n)});bo[t+"s"]=e.range,bo[t+"s"].utc=e.utc.range,bo[t+"OfYear"]=function(t){var e=bo.year(t).getDay();return Math.floor((bo.dayOfYear(t)+(e+n)%7)/7)}}),bo.week=bo.sunday,bo.weeks=bo.sunday.range,bo.weeks.utc=bo.sunday.utc.range,bo.weekOfYear=bo.sundayOfYear;var wo={"-":"",_:" ",0:"0"},So=/^\s*\d+/,ko=/^%/;
ha.locale=function(t){return{numberFormat:Yt(t),timeFormat:Xt(t)}};var _o=ha.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});ha.format=_o.numberFormat,ha.geo={},pn.prototype={s:0,t:0,add:function(t){vn(t,this.t,To),vn(To.s,this.s,this),this.s?this.t+=To.t:this.s=To.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var To=new pn;ha.geo.stream=function(t,n){t&&No.hasOwnProperty(t.type)?No[t.type](t,n):yn(t,n)};var No={Feature:function(t,n){yn(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)yn(e[r].geometry,n)}},Ao={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){mn(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)mn(e[r],n,0)},Polygon:function(t,n){bn(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)bn(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)yn(e[r],n)}};ha.geo.area=function(t){return Eo=0,ha.geo.stream(t,Do),Eo};var Eo,Co=new pn,Do={sphere:function(){Eo+=4*Ra},point:T,lineStart:T,lineEnd:T,polygonStart:function(){Co.reset(),Do.lineStart=xn},polygonEnd:function(){var t=2*Co;Eo+=0>t?4*Ra+t:t,Do.lineStart=Do.lineEnd=Do.point=T}};ha.geo.bounds=function(){function t(t,n){b.push(x=[f=t,h=t]),s>n&&(s=n),n>d&&(d=n)}function n(n,e){var r=Mn([n*Xa,e*Xa]);if(y){var i=Sn(y,r),u=[i[1],-i[0],0],a=Sn(u,i);Tn(a),a=Nn(a);var c=n-g,l=c>0?1:-1,p=a[0]*Ja*l,v=ka(c)>180;if(v^(p>l*g&&l*n>p)){var m=a[1]*Ja;m>d&&(d=m)}else if(p=(p+360)%360-180,v^(p>l*g&&l*n>p)){var m=-a[1]*Ja;s>m&&(s=m)}else s>e&&(s=e),e>d&&(d=e);v?g>n?o(f,n)>o(f,h)&&(h=n):o(n,h)>o(f,h)&&(f=n):h>=f?(f>n&&(f=n),n>h&&(h=n)):n>g?o(f,n)>o(f,h)&&(h=n):o(n,h)>o(f,h)&&(f=n)}else t(n,e);y=r,g=n}function e(){M.point=n}function r(){x[0]=f,x[1]=h,M.point=t,y=null}function i(t,e){if(y){var r=t-g;m+=ka(r)>180?r+(r>0?360:-360):r}else p=t,v=e;Do.point(t,e),n(t,e)}function u(){Do.lineStart()}function a(){i(p,v),Do.lineEnd(),ka(m)>qa&&(f=-(h=180)),x[0]=f,x[1]=h,y=null}function o(t,n){return(n-=t)<0?n+360:n}function c(t,n){return t[0]-n[0]}function l(t,n){return n[0]<=n[1]?n[0]<=t&&t<=n[1]:t<n[0]||n[1]<t}var f,s,h,d,g,p,v,y,m,b,x,M={point:t,lineStart:e,lineEnd:r,polygonStart:function(){M.point=i,M.lineStart=u,M.lineEnd=a,m=0,Do.polygonStart()},polygonEnd:function(){Do.polygonEnd(),M.point=t,M.lineStart=e,M.lineEnd=r,0>Co?(f=-(h=180),s=-(d=90)):m>qa?d=90:-qa>m&&(s=-90),x[0]=f,x[1]=h}};return function(t){d=h=-(f=s=1/0),b=[],ha.geo.stream(t,M);var n=b.length;if(n){b.sort(c);for(var e,r=1,i=b[0],u=[i];n>r;++r)e=b[r],l(e[0],i)||l(e[1],i)?(o(i[0],e[1])>o(i[0],i[1])&&(i[1]=e[1]),o(e[0],i[1])>o(i[0],i[1])&&(i[0]=e[0])):u.push(i=e);for(var a,e,g=-(1/0),n=u.length-1,r=0,i=u[n];n>=r;i=e,++r)e=u[r],(a=o(i[1],e[0]))>g&&(g=a,f=e[0],h=i[1])}return b=x=null,f===1/0||s===1/0?[[NaN,NaN],[NaN,NaN]]:[[f,s],[h,d]]}}(),ha.geo.centroid=function(t){zo=Lo=Vo=jo=Fo=Po=Oo=Uo=Ho=qo=Yo=0,ha.geo.stream(t,Ro);var n=Ho,e=qo,r=Yo,i=n*n+e*e+r*r;return Ya>i&&(n=Po,e=Oo,r=Uo,qa>Lo&&(n=Vo,e=jo,r=Fo),i=n*n+e*e+r*r,Ya>i)?[NaN,NaN]:[Math.atan2(e,n)*Ja,at(r/Math.sqrt(i))*Ja]};var zo,Lo,Vo,jo,Fo,Po,Oo,Uo,Ho,qo,Yo,Ro={sphere:T,point:En,lineStart:Dn,lineEnd:zn,polygonStart:function(){Ro.lineStart=Ln},polygonEnd:function(){Ro.lineStart=Dn}},Io=Un(jn,Rn,Wn,[-Ra,-Ra/2]),Wo=1e9;ha.geo.clipExtent=function(){var t,n,e,r,i,u,a={stream:function(t){return i&&(i.valid=!1),i=u(t),i.valid=!0,i},extent:function(o){return arguments.length?(u=Zn(t=+o[0][0],n=+o[0][1],e=+o[1][0],r=+o[1][1]),i&&(i.valid=!1,i=null),a):[[t,n],[e,r]]}};return a.extent([[0,0],[960,500]])},(ha.geo.conicEqualArea=function(){return $n(Gn)}).raw=Gn,ha.geo.albers=function(){return ha.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},ha.geo.albersUsa=function(){function t(t){var u=t[0],a=t[1];return n=null,e(u,a),n||(r(u,a),n)||i(u,a),n}var n,e,r,i,u=ha.geo.albers(),a=ha.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),o=ha.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),c={point:function(t,e){n=[t,e]}};return t.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&.234>i&&r>=-.425&&-.214>r?a:i>=.166&&.234>i&&r>=-.214&&-.115>r?o:u).invert(t)},t.stream=function(t){var n=u.stream(t),e=a.stream(t),r=o.stream(t);return{point:function(t,i){n.point(t,i),e.point(t,i),r.point(t,i)},sphere:function(){n.sphere(),e.sphere(),r.sphere()},lineStart:function(){n.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){n.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){n.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){n.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},t.precision=function(n){return arguments.length?(u.precision(n),a.precision(n),o.precision(n),t):u.precision()},t.scale=function(n){return arguments.length?(u.scale(n),a.scale(.35*n),o.scale(n),t.translate(u.translate())):u.scale()},t.translate=function(n){if(!arguments.length)return u.translate();var l=u.scale(),f=+n[0],s=+n[1];return e=u.translate(n).clipExtent([[f-.455*l,s-.238*l],[f+.455*l,s+.238*l]]).stream(c).point,r=a.translate([f-.307*l,s+.201*l]).clipExtent([[f-.425*l+qa,s+.12*l+qa],[f-.214*l-qa,s+.234*l-qa]]).stream(c).point,i=o.translate([f-.205*l,s+.212*l]).clipExtent([[f-.214*l+qa,s+.166*l+qa],[f-.115*l-qa,s+.234*l-qa]]).stream(c).point,t},t.scale(1070)};var Bo,Xo,Jo,Zo,$o,Go,Qo={point:T,lineStart:T,lineEnd:T,polygonStart:function(){Xo=0,Qo.lineStart=Qn},polygonEnd:function(){Qo.lineStart=Qo.lineEnd=Qo.point=T,Bo+=ka(Xo/2)}},Ko={point:Kn,lineStart:T,lineEnd:T,polygonStart:T,polygonEnd:T},tc={point:ee,lineStart:re,lineEnd:ie,polygonStart:function(){tc.lineStart=ue},polygonEnd:function(){tc.point=ee,tc.lineStart=re,tc.lineEnd=ie}};ha.geo.path=function(){function t(t){return t&&("function"==typeof o&&u.pointRadius(+o.apply(this,arguments)),a&&a.valid||(a=i(u)),ha.geo.stream(t,a)),u.result()}function n(){return a=null,t}var e,r,i,u,a,o=4.5;return t.area=function(t){return Bo=0,ha.geo.stream(t,i(Qo)),Bo},t.centroid=function(t){return Vo=jo=Fo=Po=Oo=Uo=Ho=qo=Yo=0,ha.geo.stream(t,i(tc)),Yo?[Ho/Yo,qo/Yo]:Uo?[Po/Uo,Oo/Uo]:Fo?[Vo/Fo,jo/Fo]:[NaN,NaN]},t.bounds=function(t){return $o=Go=-(Jo=Zo=1/0),ha.geo.stream(t,i(Ko)),[[Jo,Zo],[$o,Go]]},t.projection=function(t){return arguments.length?(i=(e=t)?t.stream||ce(t):S,n()):e},t.context=function(t){return arguments.length?(u=null==(r=t)?new te:new ae(t),"function"!=typeof o&&u.pointRadius(o),n()):r},t.pointRadius=function(n){return arguments.length?(o="function"==typeof n?n:(u.pointRadius(+n),+n),t):o},t.projection(ha.geo.albersUsa()).context(null)},ha.geo.transform=function(t){return{stream:function(n){var e=new le(n);for(var r in t)e[r]=t[r];return e}}},le.prototype={point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},ha.geo.projection=se,ha.geo.projectionMutator=he,(ha.geo.equirectangular=function(){return se(ge)}).raw=ge.invert=ge,ha.geo.rotation=function(t){function n(n){return n=t(n[0]*Xa,n[1]*Xa),n[0]*=Ja,n[1]*=Ja,n}return t=ve(t[0]%360*Xa,t[1]*Xa,t.length>2?t[2]*Xa:0),n.invert=function(n){return n=t.invert(n[0]*Xa,n[1]*Xa),n[0]*=Ja,n[1]*=Ja,n},n},pe.invert=ge,ha.geo.circle=function(){function t(){var t="function"==typeof r?r.apply(this,arguments):r,n=ve(-t[0]*Xa,-t[1]*Xa,0).invert,i=[];return e(null,null,1,{point:function(t,e){i.push(t=n(t,e)),t[0]*=Ja,t[1]*=Ja}}),{type:"Polygon",coordinates:[i]}}var n,e,r=[0,0],i=6;return t.origin=function(n){return arguments.length?(r=n,t):r},t.angle=function(r){return arguments.length?(e=xe((n=+r)*Xa,i*Xa),t):n},t.precision=function(r){return arguments.length?(e=xe(n*Xa,(i=+r)*Xa),t):i},t.angle(90)},ha.geo.distance=function(t,n){var e,r=(n[0]-t[0])*Xa,i=t[1]*Xa,u=n[1]*Xa,a=Math.sin(r),o=Math.cos(r),c=Math.sin(i),l=Math.cos(i),f=Math.sin(u),s=Math.cos(u);return Math.atan2(Math.sqrt((e=s*a)*e+(e=l*f-c*s*o)*e),c*f+l*s*o)},ha.geo.graticule=function(){function t(){return{type:"MultiLineString",coordinates:n()}}function n(){return ha.range(Math.ceil(u/v)*v,i,v).map(h).concat(ha.range(Math.ceil(l/y)*y,c,y).map(d)).concat(ha.range(Math.ceil(r/g)*g,e,g).filter(function(t){return ka(t%v)>qa}).map(f)).concat(ha.range(Math.ceil(o/p)*p,a,p).filter(function(t){return ka(t%y)>qa}).map(s))}var e,r,i,u,a,o,c,l,f,s,h,d,g=10,p=g,v=90,y=360,m=2.5;return t.lines=function(){return n().map(function(t){return{type:"LineString",coordinates:t}})},t.outline=function(){return{type:"Polygon",coordinates:[h(u).concat(d(c).slice(1),h(i).reverse().slice(1),d(l).reverse().slice(1))]}},t.extent=function(n){return arguments.length?t.majorExtent(n).minorExtent(n):t.minorExtent()},t.majorExtent=function(n){return arguments.length?(u=+n[0][0],i=+n[1][0],l=+n[0][1],c=+n[1][1],u>i&&(n=u,u=i,i=n),l>c&&(n=l,l=c,c=n),t.precision(m)):[[u,l],[i,c]]},t.minorExtent=function(n){return arguments.length?(r=+n[0][0],e=+n[1][0],o=+n[0][1],a=+n[1][1],r>e&&(n=r,r=e,e=n),o>a&&(n=o,o=a,a=n),t.precision(m)):[[r,o],[e,a]]},t.step=function(n){return arguments.length?t.majorStep(n).minorStep(n):t.minorStep()},t.majorStep=function(n){return arguments.length?(v=+n[0],y=+n[1],t):[v,y]},t.minorStep=function(n){return arguments.length?(g=+n[0],p=+n[1],t):[g,p]},t.precision=function(n){return arguments.length?(m=+n,f=we(o,a,90),s=Se(r,e,m),h=we(l,c,90),d=Se(u,i,m),t):m},t.majorExtent([[-180,-90+qa],[180,90-qa]]).minorExtent([[-180,-80-qa],[180,80+qa]])},ha.geo.greatArc=function(){function t(){return{type:"LineString",coordinates:[n||r.apply(this,arguments),e||i.apply(this,arguments)]}}var n,e,r=ke,i=_e;return t.distance=function(){return ha.geo.distance(n||r.apply(this,arguments),e||i.apply(this,arguments))},t.source=function(e){return arguments.length?(r=e,n="function"==typeof e?null:e,t):r},t.target=function(n){return arguments.length?(i=n,e="function"==typeof n?null:n,t):i},t.precision=function(){return arguments.length?t:0},t},ha.geo.interpolate=function(t,n){return Te(t[0]*Xa,t[1]*Xa,n[0]*Xa,n[1]*Xa)},ha.geo.length=function(t){return nc=0,ha.geo.stream(t,ec),nc};var nc,ec={sphere:T,point:T,lineStart:Ne,lineEnd:T,polygonStart:T,polygonEnd:T},rc=Ae(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(ha.geo.azimuthalEqualArea=function(){return se(rc)}).raw=rc;var ic=Ae(function(t){var n=Math.acos(t);return n&&n/Math.sin(n)},S);(ha.geo.azimuthalEquidistant=function(){return se(ic)}).raw=ic,(ha.geo.conicConformal=function(){return $n(Ee)}).raw=Ee,(ha.geo.conicEquidistant=function(){return $n(Ce)}).raw=Ce;var uc=Ae(function(t){return 1/t},Math.atan);(ha.geo.gnomonic=function(){return se(uc)}).raw=uc,De.invert=function(t,n){return[t,2*Math.atan(Math.exp(n))-Ba]},(ha.geo.mercator=function(){return ze(De)}).raw=De;var ac=Ae(function(){return 1},Math.asin);(ha.geo.orthographic=function(){return se(ac)}).raw=ac;var oc=Ae(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});(ha.geo.stereographic=function(){return se(oc)}).raw=oc,Le.invert=function(t,n){return[-n,2*Math.atan(Math.exp(t))-Ba]},(ha.geo.transverseMercator=function(){var t=ze(Le),n=t.center,e=t.rotate;return t.center=function(t){return t?n([-t[1],t[0]]):(t=n(),[t[1],-t[0]])},t.rotate=function(t){return t?e([t[0],t[1],t.length>2?t[2]+90:90]):(t=e(),[t[0],t[1],t[2]-90])},e([0,0,90])}).raw=Le,ha.geom={},ha.geom.hull=function(t){function n(t){if(t.length<3)return[];var n,i=Dt(e),u=Dt(r),a=t.length,o=[],c=[];for(n=0;a>n;n++)o.push([+i.call(this,t[n],n),+u.call(this,t[n],n),n]);for(o.sort(Pe),n=0;a>n;n++)c.push([o[n][0],-o[n][1]]);var l=Fe(o),f=Fe(c),s=f[0]===l[0],h=f[f.length-1]===l[l.length-1],d=[];for(n=l.length-1;n>=0;--n)d.push(t[o[l[n]][2]]);for(n=+s;n<f.length-h;++n)d.push(t[o[f[n]][2]]);return d}var e=Ve,r=je;return arguments.length?n(t):(n.x=function(t){return arguments.length?(e=t,n):e},n.y=function(t){return arguments.length?(r=t,n):r},n)},ha.geom.polygon=function(t){return Ea(t,cc),t};var cc=ha.geom.polygon.prototype=[];cc.area=function(){for(var t,n=-1,e=this.length,r=this[e-1],i=0;++n<e;)t=r,r=this[n],i+=t[1]*r[0]-t[0]*r[1];return.5*i},cc.centroid=function(t){var n,e,r=-1,i=this.length,u=0,a=0,o=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)n=o,o=this[r],e=n[0]*o[1]-o[0]*n[1],u+=(n[0]+o[0])*e,a+=(n[1]+o[1])*e;return[u*t,a*t]},cc.clip=function(t){for(var n,e,r,i,u,a,o=He(t),c=-1,l=this.length-He(this),f=this[l-1];++c<l;){for(n=t.slice(),t.length=0,i=this[c],u=n[(r=n.length-o)-1],e=-1;++e<r;)a=n[e],Oe(a,f,i)?(Oe(u,f,i)||t.push(Ue(u,a,f,i)),t.push(a)):Oe(u,f,i)&&t.push(Ue(u,a,f,i)),u=a;o&&t.push(t[0]),f=i}return t};var lc,fc,sc,hc,dc,gc=[],pc=[];Je.prototype.prepare=function(){for(var t,n=this.edges,e=n.length;e--;)t=n[e].edge,t.b&&t.a||n.splice(e,1);return n.sort($e),n.length},ar.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},or.prototype={insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=sr(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(lr(this,e),t=e,e=t.U),e.C=!1,r.C=!0,fr(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(fr(this,e),t=e,e=t.U),e.C=!1,r.C=!0,lr(this,r))),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,u=t.L,a=t.R;if(e=u?a?sr(a):u:a,i?i.L===t?i.L=e:i.R=e:this._=e,u&&a?(r=e.C,e.C=t.C,e.L=u,u.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r){if(t&&t.C)return void(t.C=!1);do{if(t===this._)break;if(t===i.L){if(n=i.R,n.C&&(n.C=!1,i.C=!0,lr(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,fr(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,lr(this,i),t=this._;break}}else if(n=i.L,n.C&&(n.C=!1,i.C=!0,fr(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,lr(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,fr(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},ha.geom.voronoi=function(t){function n(t){var n=new Array(t.length),r=o[0][0],i=o[0][1],u=o[1][0],a=o[1][1];return hr(e(t),o).cells.forEach(function(e,o){var c=e.edges,l=e.site,f=n[o]=c.length?c.map(function(t){var n=t.start();return[n.x,n.y]}):l.x>=r&&l.x<=u&&l.y>=i&&l.y<=a?[[r,a],[u,a],[u,i],[r,i]]:[];f.point=t[o]}),n}function e(t){return t.map(function(t,n){return{x:Math.round(u(t,n)/qa)*qa,y:Math.round(a(t,n)/qa)*qa,i:n}})}var r=Ve,i=je,u=r,a=i,o=vc;return t?n(t):(n.links=function(t){return hr(e(t)).edges.filter(function(t){return t.l&&t.r}).map(function(n){return{source:t[n.l.i],target:t[n.r.i]}})},n.triangles=function(t){var n=[];return hr(e(t)).cells.forEach(function(e,r){for(var i,u,a=e.site,o=e.edges.sort($e),c=-1,l=o.length,f=o[l-1].edge,s=f.l===a?f.r:f.l;++c<l;)i=f,u=s,f=o[c].edge,s=f.l===a?f.r:f.l,r<u.i&&r<s.i&&gr(a,u,s)<0&&n.push([t[r],t[u.i],t[s.i]])}),n},n.x=function(t){return arguments.length?(u=Dt(r=t),n):r},n.y=function(t){return arguments.length?(a=Dt(i=t),n):i},n.clipExtent=function(t){return arguments.length?(o=null==t?vc:t,n):o===vc?null:o},n.size=function(t){return arguments.length?n.clipExtent(t&&[[0,0],t]):o===vc?null:o&&o[1]},n)};var vc=[[-1e6,-1e6],[1e6,1e6]];ha.geom.delaunay=function(t){return ha.geom.voronoi().triangles(t)},ha.geom.quadtree=function(t,n,e,r,i){function u(t){function u(t,n,e,r,i,u,a,o){if(!isNaN(e)&&!isNaN(r))if(t.leaf){var c=t.x,f=t.y;if(null!=c)if(ka(c-e)+ka(f-r)<.01)l(t,n,e,r,i,u,a,o);else{var s=t.point;t.x=t.y=t.point=null,l(t,s,c,f,i,u,a,o),l(t,n,e,r,i,u,a,o)}else t.x=e,t.y=r,t.point=n}else l(t,n,e,r,i,u,a,o)}function l(t,n,e,r,i,a,o,c){var l=.5*(i+o),f=.5*(a+c),s=e>=l,h=r>=f,d=h<<1|s;t.leaf=!1,t=t.nodes[d]||(t.nodes[d]=yr()),s?i=l:o=l,h?a=f:c=f,u(t,n,e,r,i,a,o,c)}var f,s,h,d,g,p,v,y,m,b=Dt(o),x=Dt(c);if(null!=n)p=n,v=e,y=r,m=i;else if(y=m=-(p=v=1/0),s=[],h=[],g=t.length,a)for(d=0;g>d;++d)f=t[d],f.x<p&&(p=f.x),f.y<v&&(v=f.y),f.x>y&&(y=f.x),f.y>m&&(m=f.y),s.push(f.x),h.push(f.y);else for(d=0;g>d;++d){var M=+b(f=t[d],d),w=+x(f,d);p>M&&(p=M),v>w&&(v=w),M>y&&(y=M),w>m&&(m=w),s.push(M),h.push(w)}var S=y-p,k=m-v;S>k?m=v+S:y=p+k;var _=yr();if(_.add=function(t){u(_,t,+b(t,++d),+x(t,d),p,v,y,m)},_.visit=function(t){mr(t,_,p,v,y,m)},_.find=function(t){return br(_,t[0],t[1],p,v,y,m)},d=-1,null==n){for(;++d<g;)u(_,t[d],s[d],h[d],p,v,y,m);--d}else t.forEach(_.add);return s=h=t=f=null,_}var a,o=Ve,c=je;return(a=arguments.length)?(o=pr,c=vr,3===a&&(i=e,r=n,e=n=0),u(t)):(u.x=function(t){return arguments.length?(o=t,u):o},u.y=function(t){return arguments.length?(c=t,u):c},u.extent=function(t){return arguments.length?(null==t?n=e=r=i=null:(n=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),u):null==n?null:[[n,e],[r,i]]},u.size=function(t){return arguments.length?(null==t?n=e=r=i=null:(n=e=0,r=+t[0],i=+t[1]),u):null==n?null:[r-n,i-e]},u)},ha.interpolateRgb=xr,ha.interpolateObject=Mr,ha.interpolateNumber=wr,ha.interpolateString=Sr;var yc=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,mc=new RegExp(yc.source,"g");ha.interpolate=kr,ha.interpolators=[function(t,n){var e=typeof n;return("string"===e?lo.has(n.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(n)?xr:Sr:n instanceof st?xr:Array.isArray(n)?_r:"object"===e&&isNaN(n)?Mr:wr)(t,n)}],ha.interpolateArray=_r;var bc=function(){return S},xc=ha.map({linear:bc,poly:zr,quad:function(){return Er},cubic:function(){return Cr},sin:function(){return Lr},exp:function(){return Vr},circle:function(){return jr},elastic:Fr,back:Pr,bounce:function(){return Or}}),Mc=ha.map({"in":S,out:Nr,"in-out":Ar,"out-in":function(t){return Ar(Nr(t))}});ha.ease=function(t){var n=t.indexOf("-"),e=n>=0?t.slice(0,n):t,r=n>=0?t.slice(n+1):"in";return e=xc.get(e)||bc,r=Mc.get(r)||S,Tr(r(e.apply(null,da.call(arguments,1))))},ha.interpolateHcl=Ur,ha.interpolateHsl=Hr,ha.interpolateLab=qr,ha.interpolateRound=Yr,ha.transform=function(t){var n=pa.createElementNS(ha.ns.prefix.svg,"g");return(ha.transform=function(t){if(null!=t){n.setAttribute("transform",t);var e=n.transform.baseVal.consolidate()}return new Rr(e?e.matrix:wc)})(t)},Rr.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var wc={a:1,b:0,c:0,d:1,e:0,f:0};ha.interpolateTransform=Qr,ha.layout={},ha.layout.bundle=function(){return function(t){for(var n=[],e=-1,r=t.length;++e<r;)n.push(ni(t[e]));return n}},ha.layout.chord=function(){function t(){var t,l,s,h,d,g={},p=[],v=ha.range(u),y=[];for(e=[],r=[],t=0,h=-1;++h<u;){for(l=0,d=-1;++d<u;)l+=i[h][d];p.push(l),y.push(ha.range(u)),t+=l}for(a&&v.sort(function(t,n){return a(p[t],p[n])}),o&&y.forEach(function(t,n){t.sort(function(t,e){return o(i[n][t],i[n][e])})}),t=(Ia-f*u)/t,l=0,h=-1;++h<u;){for(s=l,d=-1;++d<u;){var m=v[h],b=y[m][d],x=i[m][b],M=l,w=l+=x*t;g[m+"-"+b]={index:m,subindex:b,startAngle:M,endAngle:w,value:x}}r[m]={index:m,startAngle:s,endAngle:l,value:p[m]},l+=f}for(h=-1;++h<u;)for(d=h-1;++d<u;){var S=g[h+"-"+d],k=g[d+"-"+h];(S.value||k.value)&&e.push(S.value<k.value?{source:k,target:S}:{source:S,target:k})}c&&n()}function n(){e.sort(function(t,n){return c((t.source.value+t.target.value)/2,(n.source.value+n.target.value)/2)})}var e,r,i,u,a,o,c,l={},f=0;return l.matrix=function(t){return arguments.length?(u=(i=t)&&i.length,e=r=null,l):i},l.padding=function(t){return arguments.length?(f=t,e=r=null,l):f},l.sortGroups=function(t){return arguments.length?(a=t,e=r=null,l):a},l.sortSubgroups=function(t){return arguments.length?(o=t,e=null,l):o},l.sortChords=function(t){return arguments.length?(c=t,e&&n(),l):c},l.chords=function(){return e||t(),e},l.groups=function(){return r||t(),r},l},ha.layout.force=function(){function t(t){return function(n,e,r,i){if(n.point!==t){var u=n.cx-t.x,a=n.cy-t.y,o=i-e,c=u*u+a*a;if(c>o*o/y){if(p>c){var l=n.charge/c;t.px-=u*l,t.py-=a*l}return!0}if(n.point&&c&&p>c){var l=n.pointCharge/c;t.px-=u*l,t.py-=a*l}}return!n.charge}}function n(t){t.px=ha.event.x,t.py=ha.event.y,c.resume()}var e,r,i,u,a,o,c={},l=ha.dispatch("start","tick","end"),f=[1,1],s=.9,h=Sc,d=kc,g=-30,p=_c,v=.1,y=.64,m=[],b=[];return c.tick=function(){if((i*=.99)<.005)return e=null,l.end({type:"end",alpha:i=0}),!0;var n,r,c,h,d,p,y,x,M,w=m.length,S=b.length;for(r=0;S>r;++r)c=b[r],h=c.source,d=c.target,x=d.x-h.x,M=d.y-h.y,(p=x*x+M*M)&&(p=i*a[r]*((p=Math.sqrt(p))-u[r])/p,x*=p,M*=p,d.x-=x*(y=h.weight+d.weight?h.weight/(h.weight+d.weight):.5),d.y-=M*y,h.x+=x*(y=1-y),h.y+=M*y);if((y=i*v)&&(x=f[0]/2,M=f[1]/2,r=-1,y))for(;++r<w;)c=m[r],c.x+=(x-c.x)*y,c.y+=(M-c.y)*y;if(g)for(ci(n=ha.geom.quadtree(m),i,o),r=-1;++r<w;)(c=m[r]).fixed||n.visit(t(c));for(r=-1;++r<w;)c=m[r],c.fixed?(c.x=c.px,c.y=c.py):(c.x-=(c.px-(c.px=c.x))*s,c.y-=(c.py-(c.py=c.y))*s);l.tick({type:"tick",alpha:i})},c.nodes=function(t){return arguments.length?(m=t,c):m},c.links=function(t){return arguments.length?(b=t,c):b},c.size=function(t){return arguments.length?(f=t,c):f},c.linkDistance=function(t){return arguments.length?(h="function"==typeof t?t:+t,c):h},c.distance=c.linkDistance,c.linkStrength=function(t){return arguments.length?(d="function"==typeof t?t:+t,c):d},c.friction=function(t){return arguments.length?(s=+t,c):s},c.charge=function(t){return arguments.length?(g="function"==typeof t?t:+t,c):g},c.chargeDistance=function(t){return arguments.length?(p=t*t,c):Math.sqrt(p)},c.gravity=function(t){return arguments.length?(v=+t,c):v},c.theta=function(t){return arguments.length?(y=t*t,c):Math.sqrt(y)},c.alpha=function(t){return arguments.length?(t=+t,i?t>0?i=t:(e.c=null,e.t=NaN,e=null,l.end({type:"end",alpha:i=0})):t>0&&(l.start({type:"start",alpha:i=t}),e=Ft(c.tick)),c):i},c.start=function(){function t(t,r){if(!e){for(e=new Array(i),c=0;i>c;++c)e[c]=[];for(c=0;l>c;++c){var u=b[c];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var a,o=e[n],c=-1,f=o.length;++c<f;)if(!isNaN(a=o[c][t]))return a;return Math.random()*r}var n,e,r,i=m.length,l=b.length,s=f[0],p=f[1];for(n=0;i>n;++n)(r=m[n]).index=n,r.weight=0;for(n=0;l>n;++n)r=b[n],"number"==typeof r.source&&(r.source=m[r.source]),"number"==typeof r.target&&(r.target=m[r.target]),++r.source.weight,++r.target.weight;for(n=0;i>n;++n)r=m[n],isNaN(r.x)&&(r.x=t("x",s)),isNaN(r.y)&&(r.y=t("y",p)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof h)for(n=0;l>n;++n)u[n]=+h.call(this,b[n],n);else for(n=0;l>n;++n)u[n]=h;if(a=[],"function"==typeof d)for(n=0;l>n;++n)a[n]=+d.call(this,b[n],n);else for(n=0;l>n;++n)a[n]=d;if(o=[],"function"==typeof g)for(n=0;i>n;++n)o[n]=+g.call(this,m[n],n);else for(n=0;i>n;++n)o[n]=g;return c.resume()},c.resume=function(){return c.alpha(.1)},c.stop=function(){return c.alpha(0)},c.drag=function(){return r||(r=ha.behavior.drag().origin(S).on("dragstart.force",ii).on("drag.force",n).on("dragend.force",ui)),arguments.length?void this.on("mouseover.force",ai).on("mouseout.force",oi).call(r):r},ha.rebind(c,l,"on")};var Sc=20,kc=1,_c=1/0;ha.layout.hierarchy=function(){function t(i){var u,a=[i],o=[];for(i.depth=0;null!=(u=a.pop());)if(o.push(u),(l=e.call(t,u,u.depth))&&(c=l.length)){for(var c,l,f;--c>=0;)a.push(f=l[c]),f.parent=u,f.depth=u.depth+1;r&&(u.value=0),u.children=l}else r&&(u.value=+r.call(t,u,u.depth)||0),delete u.children;return si(i,function(t){var e,i;n&&(e=t.children)&&e.sort(n),r&&(i=t.parent)&&(i.value+=t.value)}),o}var n=gi,e=hi,r=di;return t.sort=function(e){return arguments.length?(n=e,t):n},t.children=function(n){return arguments.length?(e=n,t):e},t.value=function(n){return arguments.length?(r=n,t):r},t.revalue=function(n){return r&&(fi(n,function(t){t.children&&(t.value=0)}),si(n,function(n){var e;n.children||(n.value=+r.call(t,n,n.depth)||0),(e=n.parent)&&(e.value+=n.value)})),n},t},ha.layout.partition=function(){function t(n,e,r,i){var u=n.children;if(n.x=e,n.y=n.depth*i,n.dx=r,n.dy=i,u&&(a=u.length)){var a,o,c,l=-1;for(r=n.value?r/n.value:0;++l<a;)t(o=u[l],e,c=o.value*r,i),e+=c}}function n(t){var e=t.children,r=0;if(e&&(i=e.length))for(var i,u=-1;++u<i;)r=Math.max(r,n(e[u]));return 1+r}function e(e,u){var a=r.call(this,e,u);return t(a[0],0,i[0],i[1]/n(a[0])),a}var r=ha.layout.hierarchy(),i=[1,1];return e.size=function(t){return arguments.length?(i=t,e):i},li(e,r)},ha.layout.pie=function(){function t(a){var o,c=a.length,l=a.map(function(e,r){return+n.call(t,e,r)}),f=+("function"==typeof r?r.apply(this,arguments):r),s=("function"==typeof i?i.apply(this,arguments):i)-f,h=Math.min(Math.abs(s)/c,+("function"==typeof u?u.apply(this,arguments):u)),d=h*(0>s?-1:1),g=ha.sum(l),p=g?(s-c*d)/g:0,v=ha.range(c),y=[];return null!=e&&v.sort(e===Tc?function(t,n){return l[n]-l[t]}:function(t,n){return e(a[t],a[n])}),v.forEach(function(t){y[t]={data:a[t],value:o=l[t],startAngle:f,endAngle:f+=o*p+d,padAngle:h}}),y}var n=Number,e=Tc,r=0,i=Ia,u=0;return t.value=function(e){return arguments.length?(n=e,t):n},t.sort=function(n){return arguments.length?(e=n,t):e},t.startAngle=function(n){return arguments.length?(r=n,t):r},t.endAngle=function(n){return arguments.length?(i=n,t):i},t.padAngle=function(n){return arguments.length?(u=n,t):u},t};var Tc={};ha.layout.stack=function(){function t(o,c){if(!(h=o.length))return o;var l=o.map(function(e,r){return n.call(t,e,r)}),f=l.map(function(n){return n.map(function(n,e){return[u.call(t,n,e),a.call(t,n,e)]})}),s=e.call(t,f,c);l=ha.permute(l,s),f=ha.permute(f,s);var h,d,g,p,v=r.call(t,f,c),y=l[0].length;for(g=0;y>g;++g)for(i.call(t,l[0][g],p=v[g],f[0][g][1]),d=1;h>d;++d)i.call(t,l[d][g],p+=f[d-1][g][1],f[d][g][1]);return o}var n=S,e=bi,r=xi,i=mi,u=vi,a=yi;return t.values=function(e){return arguments.length?(n=e,t):n},t.order=function(n){return arguments.length?(e="function"==typeof n?n:Nc.get(n)||bi,t):e},t.offset=function(n){return arguments.length?(r="function"==typeof n?n:Ac.get(n)||xi,t):r},t.x=function(n){return arguments.length?(u=n,t):u},t.y=function(n){return arguments.length?(a=n,t):a},t.out=function(n){return arguments.length?(i=n,t):i},t};var Nc=ha.map({"inside-out":function(t){var n,e,r=t.length,i=t.map(Mi),u=t.map(wi),a=ha.range(r).sort(function(t,n){return i[t]-i[n]}),o=0,c=0,l=[],f=[];for(n=0;r>n;++n)e=a[n],c>o?(o+=u[e],l.push(e)):(c+=u[e],f.push(e));return f.reverse().concat(l)},reverse:function(t){return ha.range(t.length).reverse()},"default":bi}),Ac=ha.map({silhouette:function(t){var n,e,r,i=t.length,u=t[0].length,a=[],o=0,c=[];for(e=0;u>e;++e){for(n=0,r=0;i>n;n++)r+=t[n][e][1];r>o&&(o=r),a.push(r)}for(e=0;u>e;++e)c[e]=(o-a[e])/2;return c},wiggle:function(t){var n,e,r,i,u,a,o,c,l,f=t.length,s=t[0],h=s.length,d=[];for(d[0]=c=l=0,e=1;h>e;++e){for(n=0,i=0;f>n;++n)i+=t[n][e][1];for(n=0,u=0,o=s[e][0]-s[e-1][0];f>n;++n){for(r=0,a=(t[n][e][1]-t[n][e-1][1])/(2*o);n>r;++r)a+=(t[r][e][1]-t[r][e-1][1])/o;u+=a*t[n][e][1]}d[e]=c-=i?u/i*o:0,l>c&&(l=c)}for(e=0;h>e;++e)d[e]-=l;return d},expand:function(t){var n,e,r,i=t.length,u=t[0].length,a=1/i,o=[];for(e=0;u>e;++e){for(n=0,r=0;i>n;n++)r+=t[n][e][1];if(r)for(n=0;i>n;n++)t[n][e][1]/=r;else for(n=0;i>n;n++)t[n][e][1]=a}for(e=0;u>e;++e)o[e]=0;return o},zero:xi});ha.layout.histogram=function(){function t(t,u){for(var a,o,c=[],l=t.map(e,this),f=r.call(this,l,u),s=i.call(this,f,l,u),u=-1,h=l.length,d=s.length-1,g=n?1:1/h;++u<d;)a=c[u]=[],a.dx=s[u+1]-(a.x=s[u]),a.y=0;if(d>0)for(u=-1;++u<h;)o=l[u],o>=f[0]&&o<=f[1]&&(a=c[ha.bisect(s,o,1,d)-1],a.y+=g,a.push(t[u]));return c}var n=!0,e=Number,r=Ti,i=ki;return t.value=function(n){return arguments.length?(e=n,t):e},t.range=function(n){return arguments.length?(r=Dt(n),t):r},t.bins=function(n){return arguments.length?(i="number"==typeof n?function(t){return _i(t,n)}:Dt(n),t):i},t.frequency=function(e){return arguments.length?(n=!!e,t):n},t},ha.layout.pack=function(){function t(t,u){var a=e.call(this,t,u),o=a[0],c=i[0],l=i[1],f=null==n?Math.sqrt:"function"==typeof n?n:function(){return n};if(o.x=o.y=0,si(o,function(t){t.r=+f(t.value)}),si(o,Di),r){var s=r*(n?1:Math.max(2*o.r/c,2*o.r/l))/2;si(o,function(t){t.r+=s}),si(o,Di),si(o,function(t){t.r-=s})}return Vi(o,c/2,l/2,n?1:1/Math.max(2*o.r/c,2*o.r/l)),a}var n,e=ha.layout.hierarchy().sort(Ni),r=0,i=[1,1];return t.size=function(n){return arguments.length?(i=n,t):i},t.radius=function(e){return arguments.length?(n=null==e||"function"==typeof e?e:+e,t):n},t.padding=function(n){return arguments.length?(r=+n,t):r},li(t,e)},ha.layout.tree=function(){function t(t,i){var f=a.call(this,t,i),s=f[0],h=n(s);if(si(h,e),h.parent.m=-h.z,fi(h,r),l)fi(s,u);else{var d=s,g=s,p=s;fi(s,function(t){t.x<d.x&&(d=t),t.x>g.x&&(g=t),t.depth>p.depth&&(p=t)});var v=o(d,g)/2-d.x,y=c[0]/(g.x+o(g,d)/2+v),m=c[1]/(p.depth||1);fi(s,function(t){t.x=(t.x+v)*y,t.y=t.depth*m})}return f}function n(t){for(var n,e={A:null,children:[t]},r=[e];null!=(n=r.pop());)for(var i,u=n.children,a=0,o=u.length;o>a;++a)r.push((u[a]=i={_:u[a],parent:n,children:(i=u[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return e.children[0]}function e(t){var n=t.children,e=t.parent.children,r=t.i?e[t.i-1]:null;if(n.length){Hi(t);var u=(n[0].z+n[n.length-1].z)/2;r?(t.z=r.z+o(t._,r._),t.m=t.z-u):t.z=u}else r&&(t.z=r.z+o(t._,r._));t.parent.A=i(t,r,t.parent.A||e[0])}function r(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function i(t,n,e){if(n){for(var r,i=t,u=t,a=n,c=i.parent.children[0],l=i.m,f=u.m,s=a.m,h=c.m;a=Oi(a),i=Pi(i),a&&i;)c=Pi(c),u=Oi(u),u.a=t,r=a.z+s-i.z-l+o(a._,i._),r>0&&(Ui(qi(a,t,e),t,r),l+=r,f+=r),s+=a.m,l+=i.m,h+=c.m,f+=u.m;a&&!Oi(u)&&(u.t=a,u.m+=s-f),i&&!Pi(c)&&(c.t=i,c.m+=l-h,e=t)}return e}function u(t){t.x*=c[0],t.y=t.depth*c[1]}var a=ha.layout.hierarchy().sort(null).value(null),o=Fi,c=[1,1],l=null;return t.separation=function(n){return arguments.length?(o=n,t):o},t.size=function(n){return arguments.length?(l=null==(c=n)?u:null,t):l?null:c},t.nodeSize=function(n){return arguments.length?(l=null==(c=n)?null:u,t):l?c:null},li(t,a)},ha.layout.cluster=function(){function t(t,u){var a,o=n.call(this,t,u),c=o[0],l=0;si(c,function(t){var n=t.children;n&&n.length?(t.x=Ri(n),t.y=Yi(n)):(t.x=a?l+=e(t,a):0,t.y=0,a=t)});var f=Ii(c),s=Wi(c),h=f.x-e(f,s)/2,d=s.x+e(s,f)/2;return si(c,i?function(t){t.x=(t.x-c.x)*r[0],t.y=(c.y-t.y)*r[1]}:function(t){t.x=(t.x-h)/(d-h)*r[0],t.y=(1-(c.y?t.y/c.y:1))*r[1]}),o}var n=ha.layout.hierarchy().sort(null).value(null),e=Fi,r=[1,1],i=!1;return t.separation=function(n){return arguments.length?(e=n,t):e},t.size=function(n){return arguments.length?(i=null==(r=n),t):i?null:r},t.nodeSize=function(n){return arguments.length?(i=null!=(r=n),t):i?r:null},li(t,n)},ha.layout.treemap=function(){function t(t,n){for(var e,r,i=-1,u=t.length;++i<u;)r=(e=t[i]).value*(0>n?0:n),e.area=isNaN(r)||0>=r?0:r}function n(e){var u=e.children;if(u&&u.length){var a,o,c,l=s(e),f=[],h=u.slice(),g=1/0,p="slice"===d?l.dx:"dice"===d?l.dy:"slice-dice"===d?1&e.depth?l.dy:l.dx:Math.min(l.dx,l.dy);for(t(h,l.dx*l.dy/e.value),f.area=0;(c=h.length)>0;)f.push(a=h[c-1]),f.area+=a.area,"squarify"!==d||(o=r(f,p))<=g?(h.pop(),g=o):(f.area-=f.pop().area,i(f,p,l,!1),p=Math.min(l.dx,l.dy),f.length=f.area=0,g=1/0);f.length&&(i(f,p,l,!0),f.length=f.area=0),u.forEach(n)}}function e(n){var r=n.children;if(r&&r.length){var u,a=s(n),o=r.slice(),c=[];for(t(o,a.dx*a.dy/n.value),c.area=0;u=o.pop();)c.push(u),
c.area+=u.area,null!=u.z&&(i(c,u.z?a.dx:a.dy,a,!o.length),c.length=c.area=0);r.forEach(e)}}function r(t,n){for(var e,r=t.area,i=0,u=1/0,a=-1,o=t.length;++a<o;)(e=t[a].area)&&(u>e&&(u=e),e>i&&(i=e));return r*=r,n*=n,r?Math.max(n*i*g/r,r/(n*u*g)):1/0}function i(t,n,e,r){var i,u=-1,a=t.length,o=e.x,l=e.y,f=n?c(t.area/n):0;if(n==e.dx){for((r||f>e.dy)&&(f=e.dy);++u<a;)i=t[u],i.x=o,i.y=l,i.dy=f,o+=i.dx=Math.min(e.x+e.dx-o,f?c(i.area/f):0);i.z=!0,i.dx+=e.x+e.dx-o,e.y+=f,e.dy-=f}else{for((r||f>e.dx)&&(f=e.dx);++u<a;)i=t[u],i.x=o,i.y=l,i.dx=f,l+=i.dy=Math.min(e.y+e.dy-l,f?c(i.area/f):0);i.z=!1,i.dy+=e.y+e.dy-l,e.x+=f,e.dx-=f}}function u(r){var i=a||o(r),u=i[0];return u.x=u.y=0,u.value?(u.dx=l[0],u.dy=l[1]):u.dx=u.dy=0,a&&o.revalue(u),t([u],u.dx*u.dy/u.value),(a?e:n)(u),h&&(a=i),i}var a,o=ha.layout.hierarchy(),c=Math.round,l=[1,1],f=null,s=Bi,h=!1,d="squarify",g=.5*(1+Math.sqrt(5));return u.size=function(t){return arguments.length?(l=t,u):l},u.padding=function(t){function n(n){var e=t.call(u,n,n.depth);return null==e?Bi(n):Xi(n,"number"==typeof e?[e,e,e,e]:e)}function e(n){return Xi(n,t)}if(!arguments.length)return f;var r;return s=null==(f=t)?Bi:"function"==(r=typeof t)?n:"number"===r?(t=[t,t,t,t],e):e,u},u.round=function(t){return arguments.length?(c=t?Math.round:Number,u):c!=Number},u.sticky=function(t){return arguments.length?(h=t,a=null,u):h},u.ratio=function(t){return arguments.length?(g=t,u):g},u.mode=function(t){return arguments.length?(d=t+"",u):d},li(u,o)},ha.random={normal:function(t,n){var e=arguments.length;return 2>e&&(n=1),1>e&&(t=0),function(){var e,r,i;do e=2*Math.random()-1,r=2*Math.random()-1,i=e*e+r*r;while(!i||i>1);return t+n*e*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=ha.random.normal.apply(ha,arguments);return function(){return Math.exp(t())}},bates:function(t){var n=ha.random.irwinHall(t);return function(){return n()/t}},irwinHall:function(t){return function(){for(var n=0,e=0;t>e;e++)n+=Math.random();return n}}},ha.scale={};var Ec={floor:S,ceil:S};ha.scale.linear=function(){return tu([0,1],[0,1],kr,!1)};var Cc={s:1,g:1,p:1,r:1,e:1};ha.scale.log=function(){return cu(ha.scale.linear().domain([0,1]),10,!0,[1,10])};var Dc=ha.format(".0e"),zc={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};ha.scale.pow=function(){return lu(ha.scale.linear(),1,[0,1])},ha.scale.sqrt=function(){return ha.scale.pow().exponent(.5)},ha.scale.ordinal=function(){return su([],{t:"range",a:[[]]})},ha.scale.category10=function(){return ha.scale.ordinal().range(Lc)},ha.scale.category20=function(){return ha.scale.ordinal().range(Vc)},ha.scale.category20b=function(){return ha.scale.ordinal().range(jc)},ha.scale.category20c=function(){return ha.scale.ordinal().range(Fc)};var Lc=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(kt),Vc=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(kt),jc=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(kt),Fc=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(kt);ha.scale.quantile=function(){return hu([],[])},ha.scale.quantize=function(){return du(0,1,[0,1])},ha.scale.threshold=function(){return gu([.5],[0,1])},ha.scale.identity=function(){return pu([0,1])},ha.svg={},ha.svg.arc=function(){function t(){var t=Math.max(0,+e.apply(this,arguments)),l=Math.max(0,+r.apply(this,arguments)),f=a.apply(this,arguments)-Ba,s=o.apply(this,arguments)-Ba,h=Math.abs(s-f),d=f>s?0:1;if(t>l&&(g=l,l=t,t=g),h>=Wa)return n(l,d)+(t?n(t,1-d):"")+"Z";var g,p,v,y,m,b,x,M,w,S,k,_,T=0,N=0,A=[];if((y=(+c.apply(this,arguments)||0)/2)&&(v=u===Pc?Math.sqrt(t*t+l*l):+u.apply(this,arguments),d||(N*=-1),l&&(N=at(v/l*Math.sin(y))),t&&(T=at(v/t*Math.sin(y)))),l){m=l*Math.cos(f+N),b=l*Math.sin(f+N),x=l*Math.cos(s-N),M=l*Math.sin(s-N);var E=Math.abs(s-f-2*N)<=Ra?0:1;if(N&&wu(m,b,x,M)===d^E){var C=(f+s)/2;m=l*Math.cos(C),b=l*Math.sin(C),x=M=null}}else m=b=0;if(t){w=t*Math.cos(s-T),S=t*Math.sin(s-T),k=t*Math.cos(f+T),_=t*Math.sin(f+T);var D=Math.abs(f-s+2*T)<=Ra?0:1;if(T&&wu(w,S,k,_)===1-d^D){var z=(f+s)/2;w=t*Math.cos(z),S=t*Math.sin(z),k=_=null}}else w=S=0;if(h>qa&&(g=Math.min(Math.abs(l-t)/2,+i.apply(this,arguments)))>.001){p=l>t^d?0:1;var L=g,V=g;if(Ra>h){var j=null==k?[w,S]:null==x?[m,b]:Ue([m,b],[k,_],[x,M],[w,S]),F=m-j[0],P=b-j[1],O=x-j[0],U=M-j[1],H=1/Math.sin(Math.acos((F*O+P*U)/(Math.sqrt(F*F+P*P)*Math.sqrt(O*O+U*U)))/2),q=Math.sqrt(j[0]*j[0]+j[1]*j[1]);V=Math.min(g,(t-q)/(H-1)),L=Math.min(g,(l-q)/(H+1))}if(null!=x){var Y=Su(null==k?[w,S]:[k,_],[m,b],l,L,d),R=Su([x,M],[w,S],l,L,d);g===L?A.push("M",Y[0],"A",L,",",L," 0 0,",p," ",Y[1],"A",l,",",l," 0 ",1-d^wu(Y[1][0],Y[1][1],R[1][0],R[1][1]),",",d," ",R[1],"A",L,",",L," 0 0,",p," ",R[0]):A.push("M",Y[0],"A",L,",",L," 0 1,",p," ",R[0])}else A.push("M",m,",",b);if(null!=k){var I=Su([m,b],[k,_],t,-V,d),W=Su([w,S],null==x?[m,b]:[x,M],t,-V,d);g===V?A.push("L",W[0],"A",V,",",V," 0 0,",p," ",W[1],"A",t,",",t," 0 ",d^wu(W[1][0],W[1][1],I[1][0],I[1][1]),",",1-d," ",I[1],"A",V,",",V," 0 0,",p," ",I[0]):A.push("L",W[0],"A",V,",",V," 0 0,",p," ",I[0])}else A.push("L",w,",",S)}else A.push("M",m,",",b),null!=x&&A.push("A",l,",",l," 0 ",E,",",d," ",x,",",M),A.push("L",w,",",S),null!=k&&A.push("A",t,",",t," 0 ",D,",",1-d," ",k,",",_);return A.push("Z"),A.join("")}function n(t,n){return"M0,"+t+"A"+t+","+t+" 0 1,"+n+" 0,"+-t+"A"+t+","+t+" 0 1,"+n+" 0,"+t}var e=yu,r=mu,i=vu,u=Pc,a=bu,o=xu,c=Mu;return t.innerRadius=function(n){return arguments.length?(e=Dt(n),t):e},t.outerRadius=function(n){return arguments.length?(r=Dt(n),t):r},t.cornerRadius=function(n){return arguments.length?(i=Dt(n),t):i},t.padRadius=function(n){return arguments.length?(u=n==Pc?Pc:Dt(n),t):u},t.startAngle=function(n){return arguments.length?(a=Dt(n),t):a},t.endAngle=function(n){return arguments.length?(o=Dt(n),t):o},t.padAngle=function(n){return arguments.length?(c=Dt(n),t):c},t.centroid=function(){var t=(+e.apply(this,arguments)+ +r.apply(this,arguments))/2,n=(+a.apply(this,arguments)+ +o.apply(this,arguments))/2-Ba;return[Math.cos(n)*t,Math.sin(n)*t]},t};var Pc="auto";ha.svg.line=function(){return ku(S)};var Oc=ha.map({linear:_u,"linear-closed":Tu,step:Nu,"step-before":Au,"step-after":Eu,basis:ju,"basis-open":Fu,"basis-closed":Pu,bundle:Ou,cardinal:zu,"cardinal-open":Cu,"cardinal-closed":Du,monotone:Iu});Oc.forEach(function(t,n){n.key=t,n.closed=/-closed$/.test(t)});var Uc=[0,2/3,1/3,0],Hc=[0,1/3,2/3,0],qc=[0,1/6,2/3,1/6];ha.svg.line.radial=function(){var t=ku(Wu);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},Au.reverse=Eu,Eu.reverse=Au,ha.svg.area=function(){return Bu(S)},ha.svg.area.radial=function(){var t=Bu(Wu);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},ha.svg.chord=function(){function t(t,o){var c=n(this,u,t,o),l=n(this,a,t,o);return"M"+c.p0+r(c.r,c.p1,c.a1-c.a0)+(e(c,l)?i(c.r,c.p1,c.r,c.p0):i(c.r,c.p1,l.r,l.p0)+r(l.r,l.p1,l.a1-l.a0)+i(l.r,l.p1,c.r,c.p0))+"Z"}function n(t,n,e,r){var i=n.call(t,e,r),u=o.call(t,i,r),a=c.call(t,i,r)-Ba,f=l.call(t,i,r)-Ba;return{r:u,a0:a,a1:f,p0:[u*Math.cos(a),u*Math.sin(a)],p1:[u*Math.cos(f),u*Math.sin(f)]}}function e(t,n){return t.a0==n.a0&&t.a1==n.a1}function r(t,n,e){return"A"+t+","+t+" 0 "+ +(e>Ra)+",1 "+n}function i(t,n,e,r){return"Q 0,0 "+r}var u=ke,a=_e,o=Xu,c=bu,l=xu;return t.radius=function(n){return arguments.length?(o=Dt(n),t):o},t.source=function(n){return arguments.length?(u=Dt(n),t):u},t.target=function(n){return arguments.length?(a=Dt(n),t):a},t.startAngle=function(n){return arguments.length?(c=Dt(n),t):c},t.endAngle=function(n){return arguments.length?(l=Dt(n),t):l},t},ha.svg.diagonal=function(){function t(t,i){var u=n.call(this,t,i),a=e.call(this,t,i),o=(u.y+a.y)/2,c=[u,{x:u.x,y:o},{x:a.x,y:o},a];return c=c.map(r),"M"+c[0]+"C"+c[1]+" "+c[2]+" "+c[3]}var n=ke,e=_e,r=Ju;return t.source=function(e){return arguments.length?(n=Dt(e),t):n},t.target=function(n){return arguments.length?(e=Dt(n),t):e},t.projection=function(n){return arguments.length?(r=n,t):r},t},ha.svg.diagonal.radial=function(){var t=ha.svg.diagonal(),n=Ju,e=t.projection;return t.projection=function(t){return arguments.length?e(Zu(n=t)):n},t},ha.svg.symbol=function(){function t(t,r){return(Yc.get(n.call(this,t,r))||Qu)(e.call(this,t,r))}var n=Gu,e=$u;return t.type=function(e){return arguments.length?(n=Dt(e),t):n},t.size=function(n){return arguments.length?(e=Dt(n),t):e},t};var Yc=ha.map({circle:Qu,cross:function(t){var n=Math.sqrt(t/5)/2;return"M"+-3*n+","+-n+"H"+-n+"V"+-3*n+"H"+n+"V"+-n+"H"+3*n+"V"+n+"H"+n+"V"+3*n+"H"+-n+"V"+n+"H"+-3*n+"Z"},diamond:function(t){var n=Math.sqrt(t/(2*Ic)),e=n*Ic;return"M0,"+-n+"L"+e+",0 0,"+n+" "+-e+",0Z"},square:function(t){var n=Math.sqrt(t)/2;return"M"+-n+","+-n+"L"+n+","+-n+" "+n+","+n+" "+-n+","+n+"Z"},"triangle-down":function(t){var n=Math.sqrt(t/Rc),e=n*Rc/2;return"M0,"+e+"L"+n+","+-e+" "+-n+","+-e+"Z"},"triangle-up":function(t){var n=Math.sqrt(t/Rc),e=n*Rc/2;return"M0,"+-e+"L"+n+","+e+" "+-n+","+e+"Z"}});ha.svg.symbolTypes=Yc.keys();var Rc=Math.sqrt(3),Ic=Math.tan(30*Xa);La.transition=function(t){for(var n,e,r=Wc||++Zc,i=ra(t),u=[],a=Bc||{time:Date.now(),ease:Dr,delay:0,duration:250},o=-1,c=this.length;++o<c;){u.push(n=[]);for(var l=this[o],f=-1,s=l.length;++f<s;)(e=l[f])&&ia(e,f,i,r,a),n.push(e)}return ta(u,i,r)},La.interrupt=function(t){return this.each(null==t?Xc:Ku(ra(t)))};var Wc,Bc,Xc=Ku(ra()),Jc=[],Zc=0;Jc.call=La.call,Jc.empty=La.empty,Jc.node=La.node,Jc.size=La.size,ha.transition=function(t,n){return t&&t.transition?Wc?t.transition(n):t:ha.selection().transition(t)},ha.transition.prototype=Jc,Jc.select=function(t){var n,e,r,i=this.id,u=this.namespace,a=[];t=L(t);for(var o=-1,c=this.length;++o<c;){a.push(n=[]);for(var l=this[o],f=-1,s=l.length;++f<s;)(r=l[f])&&(e=t.call(r,r.__data__,f,o))?("__data__"in r&&(e.__data__=r.__data__),ia(e,f,u,i,r[u][i]),n.push(e)):n.push(null)}return ta(a,u,i)},Jc.selectAll=function(t){var n,e,r,i,u,a=this.id,o=this.namespace,c=[];t=V(t);for(var l=-1,f=this.length;++l<f;)for(var s=this[l],h=-1,d=s.length;++h<d;)if(r=s[h]){u=r[o][a],e=t.call(r,r.__data__,h,l),c.push(n=[]);for(var g=-1,p=e.length;++g<p;)(i=e[g])&&ia(i,g,o,a,u),n.push(i)}return ta(c,o,a)},Jc.filter=function(t){var n,e,r,i=[];"function"!=typeof t&&(t=B(t));for(var u=0,a=this.length;a>u;u++){i.push(n=[]);for(var e=this[u],o=0,c=e.length;c>o;o++)(r=e[o])&&t.call(r,r.__data__,o,u)&&n.push(r)}return ta(i,this.namespace,this.id)},Jc.tween=function(t,n){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(t):J(this,null==n?function(n){n[r][e].tween.remove(t)}:function(i){i[r][e].tween.set(t,n)})},Jc.attr=function(t,n){function e(){this.removeAttribute(o)}function r(){this.removeAttributeNS(o.space,o.local)}function i(t){return null==t?e:(t+="",function(){var n,e=this.getAttribute(o);return e!==t&&(n=a(e,t),function(t){this.setAttribute(o,n(t))})})}function u(t){return null==t?r:(t+="",function(){var n,e=this.getAttributeNS(o.space,o.local);return e!==t&&(n=a(e,t),function(t){this.setAttributeNS(o.space,o.local,n(t))})})}if(arguments.length<2){for(n in t)this.attr(n,t[n]);return this}var a="transform"==t?Qr:kr,o=ha.ns.qualify(t);return na(this,"attr."+t,n,o.local?u:i)},Jc.attrTween=function(t,n){function e(t,e){var r=n.call(this,t,e,this.getAttribute(i));return r&&function(t){this.setAttribute(i,r(t))}}function r(t,e){var r=n.call(this,t,e,this.getAttributeNS(i.space,i.local));return r&&function(t){this.setAttributeNS(i.space,i.local,r(t))}}var i=ha.ns.qualify(t);return this.tween("attr."+t,i.local?r:e)},Jc.style=function(t,n,e){function r(){this.style.removeProperty(t)}function i(n){return null==n?r:(n+="",function(){var r,i=a(this).getComputedStyle(this,null).getPropertyValue(t);return i!==n&&(r=kr(i,n),function(n){this.style.setProperty(t,r(n),e)})})}var u=arguments.length;if(3>u){if("string"!=typeof t){2>u&&(n="");for(e in t)this.style(e,t[e],n);return this}e=""}return na(this,"style."+t,n,i)},Jc.styleTween=function(t,n,e){function r(r,i){var u=n.call(this,r,i,a(this).getComputedStyle(this,null).getPropertyValue(t));return u&&function(n){this.style.setProperty(t,u(n),e)}}return arguments.length<3&&(e=""),this.tween("style."+t,r)},Jc.text=function(t){return na(this,"text",t,ea)},Jc.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var n;this[t].count<2&&(n=this.parentNode)&&n.removeChild(this)})},Jc.ease=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].ease:("function"!=typeof t&&(t=ha.ease.apply(ha,arguments)),J(this,function(r){r[e][n].ease=t}))},Jc.delay=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].delay:J(this,"function"==typeof t?function(r,i,u){r[e][n].delay=+t.call(r,r.__data__,i,u)}:(t=+t,function(r){r[e][n].delay=t}))},Jc.duration=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].duration:J(this,"function"==typeof t?function(r,i,u){r[e][n].duration=Math.max(1,t.call(r,r.__data__,i,u))}:(t=Math.max(1,t),function(r){r[e][n].duration=t}))},Jc.each=function(t,n){var e=this.id,r=this.namespace;if(arguments.length<2){var i=Bc,u=Wc;try{Wc=e,J(this,function(n,i,u){Bc=n[r][e],t.call(n,n.__data__,i,u)})}finally{Bc=i,Wc=u}}else J(this,function(i){var u=i[r][e];(u.event||(u.event=ha.dispatch("start","end","interrupt"))).on(t,n)});return this},Jc.transition=function(){for(var t,n,e,r,i=this.id,u=++Zc,a=this.namespace,o=[],c=0,l=this.length;l>c;c++){o.push(t=[]);for(var n=this[c],f=0,s=n.length;s>f;f++)(e=n[f])&&(r=e[a][i],ia(e,f,a,u,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),t.push(e)}return ta(o,a,u)},ha.svg.axis=function(){function t(t){t.each(function(){var t,l=ha.select(this),f=this.__chart__||e,s=this.__chart__=e.copy(),h=null==c?s.ticks?s.ticks.apply(s,o):s.domain():c,d=null==n?s.tickFormat?s.tickFormat.apply(s,o):S:n,g=l.selectAll(".tick").data(h,s),p=g.enter().insert("g",".domain").attr("class","tick").style("opacity",qa),v=ha.transition(g.exit()).style("opacity",qa).remove(),y=ha.transition(g.order()).style("opacity",1),m=Math.max(i,0)+a,b=Zi(s),x=l.selectAll(".domain").data([0]),M=(x.enter().append("path").attr("class","domain"),ha.transition(x));p.append("line"),p.append("text");var w,k,_,T,N=p.select("line"),A=y.select("line"),E=g.select("text").text(d),C=p.select("text"),D=y.select("text"),z="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(t=ua,w="x",_="y",k="x2",T="y2",E.attr("dy",0>z?"0em":".71em").style("text-anchor","middle"),M.attr("d","M"+b[0]+","+z*u+"V0H"+b[1]+"V"+z*u)):(t=aa,w="y",_="x",k="y2",T="x2",E.attr("dy",".32em").style("text-anchor",0>z?"end":"start"),M.attr("d","M"+z*u+","+b[0]+"H0V"+b[1]+"H"+z*u)),N.attr(T,z*i),C.attr(_,z*m),A.attr(k,0).attr(T,z*i),D.attr(w,0).attr(_,z*m),s.rangeBand){var L=s,V=L.rangeBand()/2;f=s=function(t){return L(t)+V}}else f.rangeBand?f=s:v.call(t,s,f);p.call(t,f,s),y.call(t,s,s)})}var n,e=ha.scale.linear(),r=$c,i=6,u=6,a=3,o=[10],c=null;return t.scale=function(n){return arguments.length?(e=n,t):e},t.orient=function(n){return arguments.length?(r=n in Gc?n+"":$c,t):r},t.ticks=function(){return arguments.length?(o=ga(arguments),t):o},t.tickValues=function(n){return arguments.length?(c=n,t):c},t.tickFormat=function(e){return arguments.length?(n=e,t):n},t.tickSize=function(n){var e=arguments.length;return e?(i=+n,u=+arguments[e-1],t):i},t.innerTickSize=function(n){return arguments.length?(i=+n,t):i},t.outerTickSize=function(n){return arguments.length?(u=+n,t):u},t.tickPadding=function(n){return arguments.length?(a=+n,t):a},t.tickSubdivide=function(){return arguments.length&&t},t};var $c="bottom",Gc={top:1,right:1,bottom:1,left:1};ha.svg.brush=function(){function t(u){u.each(function(){var u=ha.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",i).on("touchstart.brush",i),a=u.selectAll(".background").data([0]);a.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),u.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var o=u.selectAll(".resize").data(p,S);o.exit().remove(),o.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return Qc[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),o.style("display",t.empty()?"none":null);var c,s=ha.transition(u),h=ha.transition(a);l&&(c=Zi(l),h.attr("x",c[0]).attr("width",c[1]-c[0]),e(s)),f&&(c=Zi(f),h.attr("y",c[0]).attr("height",c[1]-c[0]),r(s)),n(s)})}function n(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+s[+/e$/.test(t)]+","+h[+/^s/.test(t)]+")"})}function e(t){t.select(".extent").attr("x",s[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",s[1]-s[0])}function r(t){t.select(".extent").attr("y",h[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function i(){function i(){32==ha.event.keyCode&&(A||(b=null,D[0]-=s[1],D[1]-=h[1],A=2),E())}function p(){32==ha.event.keyCode&&2==A&&(D[0]+=s[1],D[1]+=h[1],A=0,E())}function v(){var t=ha.mouse(M),i=!1;x&&(t[0]+=x[0],t[1]+=x[1]),A||(ha.event.altKey?(b||(b=[(s[0]+s[1])/2,(h[0]+h[1])/2]),D[0]=s[+(t[0]<b[0])],D[1]=h[+(t[1]<b[1])]):b=null),T&&y(t,l,0)&&(e(k),i=!0),N&&y(t,f,1)&&(r(k),i=!0),i&&(n(k),S({type:"brush",mode:A?"move":"resize"}))}function y(t,n,e){var r,i,a=Zi(n),c=a[0],l=a[1],f=D[e],p=e?h:s,v=p[1]-p[0];return A&&(c-=f,l-=v+f),r=(e?g:d)?Math.max(c,Math.min(l,t[e])):t[e],A?i=(r+=f)+v:(b&&(f=Math.max(c,Math.min(l,2*b[e]-r))),r>f?(i=r,r=f):i=f),p[0]!=r||p[1]!=i?(e?o=null:u=null,p[0]=r,p[1]=i,!0):void 0}function m(){v(),k.style("pointer-events","all").selectAll(".resize").style("display",t.empty()?"none":null),ha.select("body").style("cursor",null),z.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),C(),S({type:"brushend"})}var b,x,M=this,w=ha.select(ha.event.target),S=c.of(M,arguments),k=ha.select(M),_=w.datum(),T=!/^(n|s)$/.test(_)&&l,N=!/^(e|w)$/.test(_)&&f,A=w.classed("extent"),C=tt(M),D=ha.mouse(M),z=ha.select(a(M)).on("keydown.brush",i).on("keyup.brush",p);if(ha.event.changedTouches?z.on("touchmove.brush",v).on("touchend.brush",m):z.on("mousemove.brush",v).on("mouseup.brush",m),k.interrupt().selectAll("*").interrupt(),A)D[0]=s[0]-D[0],D[1]=h[0]-D[1];else if(_){var L=+/w$/.test(_),V=+/^n/.test(_);x=[s[1-L]-D[0],h[1-V]-D[1]],D[0]=s[L],D[1]=h[V]}else ha.event.altKey&&(b=D.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),ha.select("body").style("cursor",w.style("cursor")),S({type:"brushstart"}),v()}var u,o,c=D(t,"brushstart","brush","brushend"),l=null,f=null,s=[0,0],h=[0,0],d=!0,g=!0,p=Kc[0];return t.event=function(t){t.each(function(){var t=c.of(this,arguments),n={x:s,y:h,i:u,j:o},e=this.__chart__||n;this.__chart__=n,Wc?ha.select(this).transition().each("start.brush",function(){u=e.i,o=e.j,s=e.x,h=e.y,t({type:"brushstart"})}).tween("brush:brush",function(){var e=_r(s,n.x),r=_r(h,n.y);return u=o=null,function(i){s=n.x=e(i),h=n.y=r(i),t({type:"brush",mode:"resize"})}}).each("end.brush",function(){u=n.i,o=n.j,t({type:"brush",mode:"resize"}),t({type:"brushend"})}):(t({type:"brushstart"}),t({type:"brush",mode:"resize"}),t({type:"brushend"}))})},t.x=function(n){return arguments.length?(l=n,p=Kc[!l<<1|!f],t):l},t.y=function(n){return arguments.length?(f=n,p=Kc[!l<<1|!f],t):f},t.clamp=function(n){return arguments.length?(l&&f?(d=!!n[0],g=!!n[1]):l?d=!!n:f&&(g=!!n),t):l&&f?[d,g]:l?d:f?g:null},t.extent=function(n){var e,r,i,a,c;return arguments.length?(l&&(e=n[0],r=n[1],f&&(e=e[0],r=r[0]),u=[e,r],l.invert&&(e=l(e),r=l(r)),e>r&&(c=e,e=r,r=c),e==s[0]&&r==s[1]||(s=[e,r])),f&&(i=n[0],a=n[1],l&&(i=i[1],a=a[1]),o=[i,a],f.invert&&(i=f(i),a=f(a)),i>a&&(c=i,i=a,a=c),i==h[0]&&a==h[1]||(h=[i,a])),t):(l&&(u?(e=u[0],r=u[1]):(e=s[0],r=s[1],l.invert&&(e=l.invert(e),r=l.invert(r)),e>r&&(c=e,e=r,r=c))),f&&(o?(i=o[0],a=o[1]):(i=h[0],a=h[1],f.invert&&(i=f.invert(i),a=f.invert(a)),i>a&&(c=i,i=a,a=c))),l&&f?[[e,i],[r,a]]:l?[e,r]:f&&[i,a])},t.clear=function(){return t.empty()||(s=[0,0],h=[0,0],u=o=null),t},t.empty=function(){return!!l&&s[0]==s[1]||!!f&&h[0]==h[1]},ha.rebind(t,c,"on")};var Qc={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Kc=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],tl=bo.format=_o.timeFormat,nl=tl.utc,el=nl("%Y-%m-%dT%H:%M:%S.%LZ");tl.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?oa:el,oa.parse=function(t){var n=new Date(t);return isNaN(n)?null:n},oa.toString=el.toString,bo.second=Wt(function(t){return new xo(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(t.getTime()+1e3*Math.floor(n))},function(t){return t.getSeconds()}),bo.seconds=bo.second.range,bo.seconds.utc=bo.second.utc.range,bo.minute=Wt(function(t){return new xo(6e4*Math.floor(t/6e4))},function(t,n){t.setTime(t.getTime()+6e4*Math.floor(n))},function(t){return t.getMinutes()}),bo.minutes=bo.minute.range,bo.minutes.utc=bo.minute.utc.range,bo.hour=Wt(function(t){var n=t.getTimezoneOffset()/60;return new xo(36e5*(Math.floor(t/36e5-n)+n))},function(t,n){t.setTime(t.getTime()+36e5*Math.floor(n))},function(t){return t.getHours()}),bo.hours=bo.hour.range,bo.hours.utc=bo.hour.utc.range,bo.month=Wt(function(t){return t=bo.day(t),t.setDate(1),t},function(t,n){t.setMonth(t.getMonth()+n)},function(t){return t.getMonth()}),bo.months=bo.month.range,bo.months.utc=bo.month.utc.range;var rl=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],il=[[bo.second,1],[bo.second,5],[bo.second,15],[bo.second,30],[bo.minute,1],[bo.minute,5],[bo.minute,15],[bo.minute,30],[bo.hour,1],[bo.hour,3],[bo.hour,6],[bo.hour,12],[bo.day,1],[bo.day,2],[bo.week,1],[bo.month,1],[bo.month,3],[bo.year,1]],ul=tl.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",jn]]),al={range:function(t,n,e){return ha.range(Math.ceil(t/e)*e,+n,e).map(la)},floor:S,ceil:S};il.year=bo.year,bo.scale=function(){return ca(ha.scale.linear(),il,ul)};var ol=il.map(function(t){return[t[0].utc,t[1]]}),cl=nl.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",jn]]);ol.year=bo.year.utc,bo.scale.utc=function(){return ca(ha.scale.linear(),ol,cl)},ha.text=zt(function(t){return t.responseText}),ha.json=function(t,n){return Lt(t,"application/json",fa,n)},ha.html=function(t,n){return Lt(t,"text/html",sa,n)},ha.xml=zt(function(t){return t.responseXML}),this.d3=ha,r=ha,i="function"==typeof r?r.call(n,e,n,t):r,!(void 0!==i&&(t.e=i))}()},function(t,n,e){!function(n,r){t.e=r(e(8),e(0),e(16))}(this,function(t,n,e){"use strict";function r(t){var n=t.ownerDocument.defaultView.getComputedStyle(t);return{width:parseFloat(n.width)-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight),height:parseFloat(n.height)-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)}}function i(t){for(;t.ownerSVGElement;)t=t.ownerSVGElement;return t}function u(t){if(!t)return{};var n=t.split(";"),e={};return n.forEach(function(t){var n=t.split(":");if(2===n.length){var r=n[0].trim(),i=n[1].trim();e[r]=isNaN(i)?i:Number(i)}}),e}function a(t){function n(){for(var n=[],e=0;e<t.childNodes.length;e++){var r=t.childNodes[e];1===r.nodeType&&r.getAttribute("layout-style")&&n.push(a(r))}return n}return{style:u(t.getAttribute("layout-style")),children:n(t),element:t}}function o(t,n){n&&(t.element.setAttribute("layout-width",t.layout.width),t.element.setAttribute("layout-height",t.layout.height)),t.element.setAttribute("layout-x",t.layout.left),t.element.setAttribute("layout-y",t.layout.top);var e=t.element.nodeName.match(/(?:svg|rect)/i);e&&(t.element.setAttribute("width",t.layout.width),t.element.setAttribute("height",t.layout.height)),e&&n&&(t.element.setAttribute("x",t.layout.left),t.element.setAttribute("y",t.layout.top)),!e&&n&&t.element.setAttribute("transform","translate("+t.layout.left+", "+t.layout.top+")"),t.children.forEach(function(t){o(t,!0)})}function c(t){return t.hasAttribute("layout-width")&&t.hasAttribute("layout-height")?{width:Number(t.getAttribute("layout-width")),height:Number(t.getAttribute("layout-height"))}:r(t)}function l(t){return t.hasAttribute("layout-x")&&t.hasAttribute("layout-y")?{x:Number(t.getAttribute("layout-x")),y:Number(t.getAttribute("layout-y"))}:{x:0,y:0}}function f(n){if("suspended"!==i(n).__layout__){var e=c(n),r=l(n),u=a(n);u.style.width=e.width,u.style.height=e.height,u.style.left=r.x,u.style.top=r.y,t(u),o(u)}}function s(t){return arguments.length?this.each(function(){i(this).__layout__=t?"suspended":""}):Boolean(i(this.node()).__layout__)}function h(t,n){var e=arguments.length;if(1===e&&"string"==typeof t){var r=this.node();return Number(r.getAttribute("layout-"+t))}return this.each(function(){if(2===e)"string"!=typeof t?(this.setAttribute("layout-width",t),this.setAttribute("layout-height",n),f(this)):this.setAttribute("layout-style",t+":"+n);else if(1===e){if("string"!=typeof t){var r=u(this.getAttribute("layout-style")),i=t;Object.keys(i).forEach(function(t){r[t]=i[t]});var a=Object.keys(r).map(function(t){return t+":"+r[t]}).join(";");this.setAttribute("layout-style",a)}}else 0===e&&f(this)})}function d(t,n){return t.map(function(t,e){return[n(t,e),t,e]}).reduce(function(t,n){return t[0]>n[0]?n:t},[Number.MAX_VALUE,null,-1])}function g(t,n){return!(t.x>=n.x+n.width||t.x+t.width<=n.x||t.y>=n.y+n.height||t.y+t.height<=n.y)}function p(t,n){var e=Math.max(t.x,n.x),r=Math.min(t.x+t.width,n.x+n.width),i=Math.max(t.y,n.y),u=Math.min(t.y+t.height,n.y+n.height);return(r-e)*(u-i)}function v(t,n){var e=t[n];return t.filter(function(t,e){return n!==e}).filter(function(t){return g(t,e)})}function y(t,e){var r=t[e],i=v(t,e);return n.sum(i.map(function(t){return p(r,t)}))}function m(t){return n.sum(t.map(function(n,e){return y(t,e)}))}function b(){var t=function(t){function n(t,n){return-y(e,n)}var e=t.slice(),r=!0;do{var i=d(e,n);i[0]<0?e.splice(i[2],1):r=!1}while(r);return e};return t}function x(t){return t[M(t)]}function M(t){return Math.floor(Math.random()*t.length)}function w(t,n,e){var r=t.slice();return r[n]=e,r}function S(t){var n=t.x,e=t.y,r=t.width,i=t.height;return[k(n,e,r,i),k(n-r,e,r,i),k(n-r,e-i,r,i),k(n,e-i,r,i),k(n,e-i/2,r,i),k(n-r/2,e,r,i),k(n-r,e-i/2,r,i),k(n-r/2,e-i,r,i)]}function k(t,n,e,r){return{x:t,y:n,width:e,height:r}}function _(){var t=null,n=function(n){var e=t[0],r=t[1];return null==e&&null==r||!(n.x<0||n.y<0||n.x>e||n.y>r||n.x+n.width>e||n.y+n.height>r)};return n.area=function(){return t[0]*t[1]},n.bounds=function(e){return arguments.length?(t=e,n):t},n}function T(){function t(t,n){var e=M(t),r=t[e],i=S(r),u=x(i);return w(n,e,u)}function e(t){for(var n=m(t),e=1,i=0;i<t.length;i++){var u=t[i];e+=r(u)?0:100}return n*e}var r=_(),i=1e3,u=1,a=function(n){for(var r=n,a=n,o=1/0,c=i;c>0;){var l=t(r,a),f=e(l),s=Math.exp((o-f)/c);(o>f||s>Math.random())&&(a=l,o=f),c-=u}return a};return a.temperature=function(t){return arguments.length?(i=t,a):i},a.cooling=function(t){return arguments.length?(u=t,a):u},n.rebind(a,r,"bounds"),a}function N(){function t(t,n){return n.map(function(t,n){return[t,n]}).filter(function(t,r){return v(n,t[1]).length||!e(t[0])}).forEach(function(r){var i=S(t[r[1]]),u=i.map(function(t){return w(n,r[1],t)}),a=d(u,function(t){var n=y(t,r[1]),i=e(t[r[1]]);return n+(i?0:e.area())})[1];n=a}),n}var e=_(),r=1,i=function(n){for(var e=n,i=n,u=Number.MAX_VALUE,a=1/0,o=0;r>o&&a>u;)a=u,i=t(e,i),u=m(i),o++;return i};return i.iterations=function(t){return arguments.length?(r=t,i):r},n.rebind(i,e,"bounds"),i}function A(){function t(t){for(var n=m(t),r=!0,i=0;i<t.length&&r;i++){var u=t[i];r=e(u)}return n+(r?0:e.area())}var e=_(),r=function(n){var e=[];return n.forEach(function(n){var r=S(n).map(function(t){var n=e.slice();return n.push(t),n});e=d(r,t)[1]}),e};return n.rebind(r,e,"bounds"),r}function E(){var t=null,n=function(n){return n.map(function(n,e){var r=n.x,i=n.y;return r+n.width>t[0]&&(r-=n.width),i+n.height>t[1]&&(i-=n.height),{x:r,y:i}})};return n.bounds=function(e){return arguments.length?(t=e,n):t},n}function C(t,e,r){return"object"!=typeof r?n.rebind.apply(n,arguments):(Object.keys(r).forEach(function(n){var i=e[r[n]];if("function"!=typeof i)throw new Error("The method "+r[n]+" does not exist on the source object");t[n]=function(){var n=i.apply(e,arguments);return n===e?t:n}}),t)}function D(t){return t[0].toUpperCase()+t.slice(1)}function z(t,n,e,r){function i(t){return r.some(function(n){return t.match(n)})}function u(t){return""!==e?e+D(t):t}e="undefined"!=typeof e?e:"",4===arguments.length&&Array.isArray(r)||(r=Array.prototype.slice.call(arguments,3)),r=r.map(function(t){if("string"==typeof t){if(!n.hasOwnProperty(t))throw new Error("The method "+t+" does not exist on the source object");t=new RegExp("^"+t+"$")}return t});var a={};for(var o in n)n.hasOwnProperty(o)&&!i(o)&&(a[u(o)]=o);C(t,n,a)}function L(t){return t.rangeExtent}function V(t){if(!L(t))return t.range();var n=t.range(),e=t.rangeExtent();if(n.length<=1)return e;var r=n[0]>n[1];return r?[e[1],e[0]]:e}function j(t,n){L(t)?t.rangePoints(n,1):t.range(n)}function F(){return this}function P(t){return t}function O(t,n){return n}function U(t){}function H(){var t=arguments;return function(n,e){for(var r=0,i=t.length;i>r;r++)if(null==t[r](n,e))return!1;return!0}}function q(){var t="g",e=!1,r="g",i={},u=O,a=function(a,o){var c=o||P;a.selectAll&&a.node||(a=n.select(a));var l=a.selectAll(t);e&&(l=l.filter(function(){return this.parentNode===a.node()}));var f=l.data(c,u),s=f.enter().insert(r).attr(i).style("opacity",Cn),h=n.transition(f.exit()).style("opacity",Cn).remove();return f=n.transition(f).style("opacity",1),f.enter=n.functor(s),f.exit=n.functor(h),f};return a.selector=function(n){return arguments.length?(t=n,a):t},a.children=function(t){return arguments.length?(e=t,a):e},a.element=function(t){return arguments.length?(r=t,a):r},a.attr=function(t){if(!arguments.length)return i;if(1===arguments.length)i=arguments[0];else if(2===arguments.length){var n=arguments[0],e=arguments[1];i[n]=e}return a},a.key=function(t){return arguments.length?(u=t,a):u},a}function Y(t){var e=n.functor([0,0]),r=function(t,n){return[t.x,t.y]},i=n.scale.identity(),u=n.scale.identity(),a=t||P,o=P,c=U,l=q().selector("g.rectangle").element("g").attr("class","rectangle"),f=function(t){var n=V(i),f=V(u);a.bounds&&i&&u&&a.bounds([Math.max(n[0],n[1]),Math.max(f[0],f[1])]),t.each(function(t,n){var i=t.map(function(t,n){var i=r(t,n),u=e(t,n);return{x:i[0],y:i[1],width:u[0],height:u[1]}}),u=a(i);u.forEach(function(t,n){t.dataIndex=n});var f=o(u),s=f.map(function(n){return t[n.dataIndex]}),h=l(this,s);h.attr("transform",function(t,n){var e=f[n];return"translate("+e.x+", "+e.y+")"}),h.attr({"layout-width":function(t,n){
return f[n].width},"layout-height":function(t,n){return f[n].height}}),h.call(c)})};return z(f,a),f.size=function(t){return arguments.length?(e=n.functor(t),f):e},f.position=function(t){return arguments.length?(r=n.functor(t),f):r},f.xScale=function(t){return arguments.length?(i=t,f):i},f.yScale=function(t){return arguments.length?(u=t,f):u},f.component=function(t){return arguments.length?(c=t,f):c},f.filter=function(t){return arguments.length?(o=t,f):o},f}function R(t){var n=null;return function(){null==n&&(n=requestAnimationFrame(function(){n=null,t()}))}}function I(t,n){return function(t,n){return{x:t,y:n}}}function W(t,n,e,r,i,u){return u=u||function(t,n,e,r){var i=t-e,u=n-r;return i*i+u*u},function(a,o){var c=i.filter(function(t,n){return H(e,r)(t,n)}),l=d(c,function(i){return u(a,o,t(e(i)),n(r(i)))})[1];return{datum:l,x:l?t(e(l)):a,y:l?n(r(l)):o}}}function B(t,n,e){return function(r,i){var u=t.xScale(),a=t.yScale(),o=t.xValue(),c=(t.yValue||t.yCloseValue).call(t);return W(u,a,o,c,n,e)(r,i)}}function X(t,n){function e(t,n,e,r){var i=t-e;return Math.abs(i)}return B(t,n,e)}function J(t,n){function e(t,n,e,r){var i=n-r;return Math.abs(i)}return B(t,n,e)}function Z(t){return function(e){if(e.length<=1)return 10;e.sort();var r=n.pairs(e).map(function(t){return Math.abs(t[0]-t[1])}),i=n.min(r);return t*i}}function $(){var t=[],e=[],r="percent",i=0,u=null,a=function(a){Array.isArray(a[0])||(a=[a]),t=t.map(function(t){return"string"!=typeof t?t:function(n){return n[t]}});var o=n.min(a,function(e){return n.min(e,function(e){return n.min(t.map(function(t){return t(e)}))})}),c=n.max(a,function(e){return n.max(e,function(e){return n.max(t.map(function(t){return t(e)}))})}),l="[object Date]"===Object.prototype.toString.call(o),f=l?o.getTime():o,s=l?c.getTime():c;if(null!=u){var h=l?u.getTime():u,d=Math.abs(s-h),g=Math.abs(f-h),p=Math.max(d,g);f=h-p,s=h+p}if("domain"===r)Array.isArray(i)?(f-=i[0],s+=i[1]):(f-=i,s+=i);else if("percent"===r)if(Array.isArray(i)){var v=[i[0]*(s-f),i[1]*(s-f)];f-=v[0],s+=v[1]}else{var y=i*(s-f)/2;f-=y,s+=y}return e.length&&(f=Math.min(f,n.min(e)),s=Math.max(s,n.max(e))),l&&(f=new Date(f),s=new Date(s)),[f,s]};return a.fields=function(n){return arguments.length?(Array.isArray(n)||(n=[n]),t=n,a):t},a.include=function(t){return arguments.length?(e=t,a):e},a.padUnit=function(t){return arguments.length?(r=t,a):r},a.pad=function(t){return arguments.length?(i=t,a):i},a.symmetricalAbout=function(t){return arguments.length?(u=t,a):u},a}function G(t){var n=t;return"number"==typeof n&&(n={top:t,bottom:t,left:t,right:t}),["top","bottom","left","right"].forEach(function(t){n[t]||(n[t]=0)}),n}function Q(){function t(){var t=n.select(this),e=t.datum()[0];if("DONE"!==e.state){var r=n.mouse(this),i=l.apply(this,r);if("SELECT_SOURCE"===e.state)e.source=e.target=i;else{if("SELECT_TARGET"!==e.state)throw new Error("Unknown state "+e.state);e.target=i}}}function e(){var e=n.select(this).on("click.measure",u).on("mousemove.measure",r).on("mouseleave.measure",i),a=e.datum();null==a[0]&&a.push({state:"SELECT_SOURCE"}),t.call(this),e.call(y)}function r(){var e=n.select(this);t.call(this),e.call(y)}function i(){var t=n.select(this),e=t.datum();null!=e[0]&&"SELECT_SOURCE"===e[0].state&&e.pop(),t.on("click.measure",null).on("mousemove.measure",null).on("mouseleave.measure",null)}function u(){var e=n.select(this),r=e.datum()[0];switch(r.state){case"SELECT_SOURCE":t.call(this),a.measuresource.apply(this,arguments),r.state="SELECT_TARGET";break;case"SELECT_TARGET":t.call(this),a.measuretarget.apply(this,arguments),r.state="DONE";break;case"DONE":a.measureclear.apply(this,arguments),r.state="SELECT_SOURCE",t.call(this);break;default:throw new Error("Unknown state "+r.state)}e.call(y)}var a=n.dispatch("measuresource","measuretarget","measureclear"),o=n.time.scale(),c=n.scale.linear(),l=function(t,n){return I(o,c)(t,n)},f=U,s=n.functor(""),h=n.functor(""),d=n.functor(2),g=function(t){return t.x},p=function(t){return t.y},v=q().selector("g.measure").element("g").attr("class","measure"),y=function(t){t.each(function(t,r){var i=n.select(this).style("pointer-events","all").on("mouseenter.measure",e),u=i.selectAll("rect").data([t]);u.enter().append("rect").style("visibility","hidden"),i.select("rect").attr("x",o.range()[0]).attr("y",c.range()[1]).attr("width",o.range()[1]).attr("height",c.range()[0]);var a=v(i,t),l=a.enter();l.append("line").attr("class","tangent"),l.append("line").attr("class","horizontal"),l.append("line").attr("class","vertical"),l.append("text").attr("class","horizontal"),l.append("text").attr("class","vertical"),a.select("line.tangent").attr("x1",function(t){return g(t.source)}).attr("y1",function(t){return p(t.source)}).attr("x2",function(t){return g(t.target)}).attr("y2",function(t){return p(t.target)}),a.select("line.horizontal").attr("x1",function(t){return g(t.source)}).attr("y1",function(t){return p(t.source)}).attr("x2",function(t){return g(t.target)}).attr("y2",function(t){return p(t.source)}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}),a.select("line.vertical").attr("x1",function(t){return g(t.target)}).attr("y1",function(t){return p(t.target)}).attr("x2",function(t){return g(t.target)}).attr("y2",function(t){return p(t.source)}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"});var y=d.apply(this,arguments);a.select("text.horizontal").attr("x",function(t){return g(t.source)+(g(t.target)-g(t.source))/2}).attr("y",function(t){return p(t.source)-y}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}).text(s),a.select("text.vertical").attr("x",function(t){return g(t.target)+y}).attr("y",function(t){return p(t.source)+(p(t.target)-p(t.source))/2}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}).text(h),f(a,t,r)})};return y.xScale=function(t){return arguments.length?(o=t,y):o},y.yScale=function(t){return arguments.length?(c=t,y):c},y.snap=function(t){return arguments.length?(l=t,y):l},y.decorate=function(t){return arguments.length?(f=t,y):f},y.xLabel=function(t){return arguments.length?(s=n.functor(t),y):s},y.yLabel=function(t){return arguments.length?(h=n.functor(t),y):h},y.padding=function(t){return arguments.length?(d=n.functor(t),y):d},n.rebind(y,a,"on"),y}function K(){var t=0,e=U,r=U,i=q().selector("g.container").element("g").attr({"class":"container","layout-style":"flex: 1"}),u=function(u){u.each(function(u,a){var o=G(t),c=i(this,[u]);c.enter().append("rect").layout("flex",1),c.enter().append("g").layout({position:"absolute",top:o.top,left:o.left,bottom:o.bottom,right:o.right}),n.select(this).layout(),c.select("g").call(e),r(c,u,a)})};return u.decorate=function(t){return arguments.length?(r=t,u):r},u.padding=function(n){return arguments.length?(t=n,u):t},u.component=function(t){return arguments.length?(e=t,u):e},u}function tt(){function t(){var t=n.select(this),e=t.datum()[0];if("DONE"!==e.state){var r=n.mouse(this),i=l.apply(this,r);if("SELECT_SOURCE"===e.state)e.source=e.target=i;else{if("SELECT_TARGET"!==e.state)throw new Error("Unknown state "+e.state);e.target=i}}}function e(){var e=n.select(this).on("click.fan",u).on("mousemove.fan",r).on("mouseleave.fan",i),a=e.datum();null==a[0]&&a.push({state:"SELECT_SOURCE"}),t.call(this),e.call(g)}function r(){var e=n.select(this);t.call(this),e.call(g)}function i(){var t=n.select(this),e=t.datum();null!=e[0]&&"SELECT_SOURCE"===e[0].state&&e.pop(),t.on("click.fan",null).on("mousemove.fan",null).on("mouseleave.fan",null)}function u(){var e=n.select(this),r=e.datum()[0];switch(r.state){case"SELECT_SOURCE":t.call(this),a.fansource.apply(this,arguments),r.state="SELECT_TARGET";break;case"SELECT_TARGET":t.call(this),a.fantarget.apply(this,arguments),r.state="DONE";break;case"DONE":a.fanclear.apply(this,arguments),r.state="SELECT_SOURCE",t.call(this);break;default:throw new Error("Unknown state "+r.state)}e.call(g)}var a=n.dispatch("fansource","fantarget","fanclear"),o=n.time.scale(),c=n.scale.linear(),l=function(t,n){return I(o,c)(t,n)},f=U,s=function(t){return t.x},h=function(t){return t.y},d=q().selector("g.fan").element("g").attr("class","fan"),g=function(t){t.each(function(t,r){var i=n.select(this).style("pointer-events","all").on("mouseenter.fan",e),u=i.selectAll("rect").data([t]);u.enter().append("rect").style("visibility","hidden"),i.select("rect").attr("x",o.range()[0]).attr("y",c.range()[1]).attr("width",o.range()[1]).attr("height",c.range()[0]);var a=d(i,t);a.each(function(t){if(t.x=o.range()[1],t.ay=t.by=t.cy=h(t.target),s(t.source)!==s(t.target)){if("DONE"===t.state&&s(t.source)>s(t.target)){var n=t.source;t.source=t.target,t.target=n}var e=(h(t.target)-h(t.source))/(s(t.target)-s(t.source)),r=t.x-s(t.source),i=e*r;t.ay=.618*i+h(t.source),t.by=.5*i+h(t.source),t.cy=.382*i+h(t.source)}});var l=a.enter();l.append("line").attr("class","trend"),l.append("line").attr("class","a"),l.append("line").attr("class","b"),l.append("line").attr("class","c"),l.append("polygon").attr("class","area"),a.select("line.trend").attr("x1",function(t){return s(t.source)}).attr("y1",function(t){return h(t.source)}).attr("x2",function(t){return s(t.target)}).attr("y2",function(t){return h(t.target)}),a.select("line.a").attr("x1",function(t){return s(t.source)}).attr("y1",function(t){return h(t.source)}).attr("x2",function(t){return t.x}).attr("y2",function(t){return t.ay}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}),a.select("line.b").attr("x1",function(t){return s(t.source)}).attr("y1",function(t){return h(t.source)}).attr("x2",function(t){return t.x}).attr("y2",function(t){return t.by}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}),a.select("line.c").attr("x1",function(t){return s(t.source)}).attr("y1",function(t){return h(t.source)}).attr("x2",function(t){return t.x}).attr("y2",function(t){return t.cy}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}),a.select("polygon.area").attr("points",function(t){return s(t.source)+","+h(t.source)+" "+t.x+","+t.ay+" "+t.x+","+t.cy}).style("visibility",function(t){return"DONE"!==t.state?"hidden":"visible"}),f(a,t,r)})};return g.xScale=function(t){return arguments.length?(o=t,g):o},g.yScale=function(t){return arguments.length?(c=t,g):c},g.snap=function(t){return arguments.length?(l=t,g):l},g.decorate=function(t){return arguments.length?(f=t,g):f},n.rebind(g,a,"on"),g}function nt(){var t=n.time.scale(),e=n.scale.linear(),r=[],i=F,u=O,a=U,o=q().selector("g.multi").children(!0).attr("class","multi").element("g").key(function(t,n){var e=this.__series__||t;return u.call(this,e,n)}),c=function(u){u.each(function(u,c){var l=o(this,r);l.each(function(r,a){this.__series__=r,(r.xScale||r.x).call(r,t),(r.yScale||r.y).call(r,e),n.select(this).datum(i.call(u,r,a)).call(r)}),n.selection.prototype.order.call(l),a(l,u,c)})};return c.xScale=function(n){return arguments.length?(t=n,c):t},c.yScale=function(t){return arguments.length?(e=t,c):e},c.series=function(t){return arguments.length?(r=t,c):r},c.mapping=function(t){return arguments.length?(i=t,c):i},c.key=function(t){return arguments.length?(u=t,c):u},c.decorate=function(t){return arguments.length?(a=t,c):a},c}function et(){var t=n.time.scale(),e=n.scale.linear(),r=P,i=O,u=r,a=U,o="horizontal",c=q().selector("g.annotation").element("g"),l=function(i){i.each(function(i,l){var f,s,h,d,g,p,v={x:-5,y:-5};switch(o){case"horizontal":h=function(t,n){return"translate("+t+", "+n+")"},d="x2",s=t,f=e,g="left-handle",p="right-handle";break;case"vertical":h=function(t,n){return"translate("+n+", "+t+")"},d="y2",s=e,f=t,v.transform="rotate(-90)",g="bottom-handle",p="top-handle";break;default:throw new Error("Invalid orientation")}var y=V(s),m=function(t){var n=f(r(t));return h(y[0],n)},b=y[1]-y[0],x=n.select(this);c.attr("class","annotation "+o);var M=c(x,i),w=M.enter().attr("transform",m);w.append("line").attr(d,b),w.append("g").classed(g,!0),w.append("g").classed(p,!0).attr("transform",h(b,0)).append("text").attr(v),M.attr("transform",m),M.select("line").attr(d,b),M.select("g."+p).attr("transform",h(b,0)),M.select("text").text(u),a(M,i,l)})};return l.xScale=function(n){return arguments.length?(t=n,l):t},l.yScale=function(t){return arguments.length?(e=t,l):e},l.value=function(t){return arguments.length?(r=n.functor(t),l):r},l.keyValue=function(t){return arguments.length?(i=n.functor(t),l):i},l.label=function(t){return arguments.length?(u=n.functor(t),l):u},l.decorate=function(t){return arguments.length?(a=t,l):a},l.orient=function(t){return arguments.length?(o=t,l):o},l}function rt(){function t(){}var e=n.time.scale(),r=n.scale.linear(),i=n.functor(0),u=n.functor(0),a=function(t,n){return t.x},o=function(t,n){return t.y};return t.x0=function(t,n){return e(u(t,n))},t.y0=function(t,n){return r(i(t,n))},t.x=t.x1=function(t,n){return e(a(t,n))},t.y=t.y1=function(t,n){return r(o(t,n))},t.defined=function(t,n){return H(u,i,a,o)(t,n)},t.xScale=function(n){return arguments.length?(e=n,t):e},t.yScale=function(n){return arguments.length?(r=n,t):r},t.x0Value=function(e){return arguments.length?(u=n.functor(e),t):u},t.y0Value=function(e){return arguments.length?(i=n.functor(e),t):i},t.xValue=t.x1Value=function(e){return arguments.length?(a=n.functor(e),t):a},t.yValue=t.y1Value=function(e){return arguments.length?(o=n.functor(e),t):o},t}function it(){var t=U,e=n.svg.symbol(),r=rt(),i=q().selector("g.point").element("g").attr("class","point"),u=function(t,n){return"translate("+r.x(t,n)+", "+r.y(t,n)+")"},a=function(n){n.each(function(n,a){var o=n.filter(r.defined),c=i(this,o);c.enter().attr("transform",u).append("path"),c.attr("transform",u).select("path").attr("d",e),t(c,n,a)})};return a.decorate=function(n){return arguments.length?(t=n,a):t},n.rebind(a,r,"xScale","xValue","yScale","yValue"),n.rebind(a,i,"key"),n.rebind(a,e,"size","type"),a}function ut(){function t(t){return n.scale.identity().range(V(t))}function e(){var t=n.mouse(this),e=n.select(this),r=c.apply(this,t),i=e.datum();i.push(r),e.call(v),u.trackingstart.apply(this,arguments)}function r(){var t=n.mouse(this),e=n.select(this),r=c.apply(this,t),i=e.datum();i[i.length-1]=r,e.call(v),u.trackingmove.apply(this,arguments)}function i(){var t=n.select(this),e=t.datum();e.pop(),t.call(v),u.trackingend.apply(this,arguments)}var u=n.dispatch("trackingstart","trackingmove","trackingend"),a=n.time.scale(),o=n.scale.linear(),c=function(t,n){return I(a,o)(t,n)},l=U,f=function(t){return t.x},s=function(t){return t.y},h=q().children(!0).selector("g.crosshair").element("g").attr("class","crosshair"),d=it().xValue(f).yValue(s),g=et().value(s).label(function(t){return t.y}),p=et().orient("vertical").value(f).label(function(t){return t.x}),v=function(u){u.each(function(u,c){var f=n.select(this).style("pointer-events","all").on("mouseenter.crosshair",e).on("mousemove.crosshair",r).on("wheel.crosshair",r).on("mouseleave.crosshair",i),s=f.selectAll("rect").data([u]);s.enter().append("rect").style("visibility","hidden"),f.select("rect").attr("x",V(a)[0]).attr("y",V(o)[1]).attr("width",V(a)[1]).attr("height",V(o)[0]);var v=h(f,u);v.enter().style("pointer-events","none");var y=nt().series([g,p,d]).xScale(t(a)).yScale(t(o)).mapping(function(){return[this]});v.call(y),l(v,u,c)})};return v.xScale=function(t){return arguments.length?(a=t,v):a},v.yScale=function(t){return arguments.length?(o=t,v):o},v.snap=function(t){return arguments.length?(c=t,v):c},v.decorate=function(t){return arguments.length?(l=t,v):l},n.rebind(v,u,"on"),C(v,g,{yLabel:"label"}),C(v,p,{xLabel:"label"}),v}function at(){var t=function(t,n){return t.value},e=function(t,n){return t.median},r=function(t,n){return t.upperQuartile},i=function(t,n){return t.lowerQuartile},u=function(t,n){return t.high},a=function(t,n){return t.low},o="vertical",c=n.functor(5),l=n.functor(.5),f=function(n){return n.map(function(n,f){var s=t(n,f),h=c(n,f),d=h/2,g=h*l(n,f),p=g/2,v=u(n,f),y=r(n,f),m=e(n,f),b=i(n,f),x=a(n,f),M=y-v,w=m-y,S=b-y,k=b-m,_=x-b;return"vertical"===o?"M"+s+","+v+"h"+-p+"h"+g+"h"+-p+"v"+M+"h"+-d+"v"+S+"h"+h+"v"+-S+"h"+-d+"m"+-d+","+w+"h"+h+"m"+-d+","+k+"v"+_+"h"+-p+"h"+g+"h"+-p:"M"+x+","+s+"v"+-p+"v"+g+"v"+-p+"h"+-_+"v"+-d+"h"+-S+"v"+h+"h"+S+"v"+-d+"m"+-k+","+-d+"v"+h+"m"+-w+","+-d+"h"+-M+"v"+-p+"v"+g+"v"+-p}).join("")};return f.value=function(e){return arguments.length?(t=n.functor(e),f):t},f.median=function(t){return arguments.length?(e=n.functor(t),f):e},f.upperQuartile=function(t){return arguments.length?(r=n.functor(t),f):r},f.lowerQuartile=function(t){return arguments.length?(i=n.functor(t),f):i},f.high=function(t){return arguments.length?(u=n.functor(t),f):u},f.low=function(t){return arguments.length?(a=n.functor(t),f):a},f.width=function(t){return arguments.length?(c=n.functor(t),f):c},f.orient=function(t){return arguments.length?(o=t,f):o},f.cap=function(t){return arguments.length?(l=n.functor(t),f):l},f}function ot(){var t=function(t,n){return t.x},e=function(t,n){return t.high},r=function(t,n){return t.low},i="vertical",u=n.functor(5),a=function(n){return n.map(function(n,a){var o=t(n,a),c=u(n,a),l=c/2,f=e(n,a),s=r(n,a),h=f-s;return"vertical"===i?"M"+o+","+f+"h"+-l+"h"+c+"h"+-l+"v"+-h+"h"+-l+"h"+c+"h"+-l:"M"+s+","+o+"v"+-l+"v"+c+"v"+-l+"h"+h+"v"+-l+"v"+c+"v"+-l}).join("")};return a.value=function(e){return arguments.length?(t=n.functor(e),a):t},a.high=function(t){return arguments.length?(e=n.functor(t),a):e},a.low=function(t){return arguments.length?(r=n.functor(t),a):r},a.width=function(t){return arguments.length?(u=n.functor(t),a):u},a.orient=function(t){return arguments.length?(i=t,a):i},a}function ct(){var t=function(t,n){return t.date},e=function(t,n){return t.open},r=function(t,n){return t.high},i=function(t,n){return t.low},u=function(t,n){return t.close},a=n.functor(3),o=function(n){return n.map(function(n,o){var c=t(n,o),l=e(n,o),f=r(n,o),s=i(n,o),h=u(n,o),d=a(n,o)/2,g="M"+c+","+s,p="V"+f,v="M"+c+","+l+"h"+-d,y="M"+c+","+h+"h"+d;return g+p+v+y}).join("")};return o.x=function(e){return arguments.length?(t=n.functor(e),o):t},o.open=function(t){return arguments.length?(e=n.functor(t),o):e},o.high=function(t){return arguments.length?(r=n.functor(t),o):r},o.low=function(t){return arguments.length?(i=n.functor(t),o):i},o.close=function(t){return arguments.length?(u=n.functor(t),o):u},o.width=function(t){return arguments.length?(a=n.functor(t),o):a},o}function lt(){var t=function(t,n){return t.date},e=function(t,n){return t.open},r=function(t,n){return t.high},i=function(t,n){return t.low},u=function(t,n){return t.close},a=n.functor(3),o=function(n){return n.map(function(n,o){var c=t(n,o),l=e(n,o),f=r(n,o),s=i(n,o),h=u(n,o),d=a(n,o),g="M"+(c-d/2)+","+l+"h"+d+"V"+h+"h"+-d+"V"+l+"z",p="M"+c+","+Math.min(h,l)+"V"+f,v="M"+c+","+Math.max(h,l)+"V"+s;return g+p+v}).join("")};return o.x=function(e){return arguments.length?(t=n.functor(e),o):t},o.open=function(t){return arguments.length?(e=n.functor(t),o):e},o.high=function(t){return arguments.length?(r=n.functor(t),o):r},o.low=function(t){return arguments.length?(i=n.functor(t),o):i},o.close=function(t){return arguments.length?(u=n.functor(t),o):u},o.width=function(t){return arguments.length?(a=n.functor(t),o):a},o}function ft(){var t=function(t,n){return t.x},e=function(t,n){return t.y},r="center",i="center",u=function(t,n){return t.height},a=n.functor(3),o=function(n,o){return n.map(function(n,c){var l,f=t.call(this,n,o||c),s=e.call(this,n,o||c),h=u.call(this,n,o||c),d=a.call(this,n,o||c);switch(r){case"left":l=d;break;case"right":l=0;break;case"center":l=d/2;break;default:throw new Error("Invalid horizontal alignment "+r)}var g;switch(i){case"bottom":g=-h;break;case"top":g=0;break;case"center":g=h/2;break;default:throw new Error("Invalid vertical alignment "+i)}var p="M"+(f-l)+","+(s-g)+"h"+d+"v"+h+"h"+-d+"z";return p},this).join("")};return o.x=function(e){return arguments.length?(t=n.functor(e),o):t},o.y=function(t){return arguments.length?(e=n.functor(t),o):e},o.width=function(t){return arguments.length?(a=n.functor(t),o):a},o.horizontalAlign=function(t){return arguments.length?(r=t,o):r},o.height=function(t){return arguments.length?(u=n.functor(t),o):u},o.verticalAlign=function(t){return arguments.length?(i=t,o):i},o}function st(){function t(t,n){return e[t]?e[t].apply(e,r):n}var e=n.scale.identity(),r=[10],i=null,u=function(){return null==i?t("ticks",e.domain()):i};return u.scale=function(t){return arguments.length?(e=t,u):e},u.ticks=function(t){return arguments.length?(r=arguments,u):r},u.tickValues=function(t){return arguments.length?(i=t,u):i},u}function ht(){function t(t,n){return function(e){return n(t(e),0)}}function e(t,n){return i()?"translate("+n+", "+t+")":"translate("+t+", "+n+")"}function r(t){return i()?t.map(function(t){return[t[1],t[0]]}):t}function i(){return"left"===o||"right"===o}function u(t,n){var e=d.scale();return e[t]?e[t].apply(e,d.ticks()):n}var a=U,o="bottom",c=null,l=6,f=6,s=3,h=n.svg.line(),d=st(),g=q().selector("g.tick").element("g").key(P).attr("class","tick"),p=q().selector("path.domain").element("path").attr("class","domain"),v=function(i){i.each(function(i,v){var y=d.scale(),m=this.__chart__||y;this.__chart__=y.copy();var b=d(),x=null==c?u("tickFormat",P):c,M="bottom"===o||"right"===o?1:-1,w=n.select(this),S=V(y),k=r([[S[0],M*l],[S[0],0],[S[1],0],[S[1],M*l]]),_=p(w,[i]);_.attr("d",h(k)),g.attr({transform:t(L(y)?y:m,e)});var T=g(w,b);T.enter().append("path");var N=M*(f+s);T.enter().append("text").attr("transform",e(0,N)),T.attr("class","tick orient-"+o),T.attr("transform",t(y,e)),T.select("path").attr("d",function(t){return h(r([[0,0],[0,M*f]]))}),T.select("text").attr("transform",e(0,N)).text(x),L(y)||T.exit().attr("transform",t(y,e)),a(T,i,v)})};return v.tickFormat=function(t){return arguments.length?(c=t,v):c},v.tickSize=function(t){var n=arguments.length;return n?(f=Number(t),l=Number(arguments[n-1]),v):f},v.innerTickSize=function(t){return arguments.length?(f=Number(t),v):f},v.outerTickSize=function(t){return arguments.length?(l=Number(t),v):l},v.tickPadding=function(t){return arguments.length?(s=t,v):s},v.orient=function(t){return arguments.length?(o=t,v):o},v.decorate=function(t){return arguments.length?(a=t,v):a},z(v,d),v}function dt(){var t="",n=function(t){return t.y},e=!1,r=function(t,n,e){return n===e.length-1?"Final":void 0},i={up:"up",down:"down",unchanged:"unchanged"},u=function(u){var a,o,c,l=u.length,f=0,s=0,h=[];for(e&&(s=n(u[0]),h.push({x:u[0][t],y0:0,y1:s,direction:i.unchanged}),f=1),f;l>f;f+=1)a=s,o=n(u[f])+s,h.push({x:u[f][t],y0:a,y1:o,direction:o-a>0?i.up:i.down}),c=r(u[f],f,u),c&&h.push({x:c,y0:0,y1:o,direction:i.unchanged}),s=o;return h};return u.xValueKey=function(n){return arguments.length?(t=n,u):t},u.yValue=function(t){return arguments.length?(n=t,u):n},u.total=function(t){return arguments.length?(r=t,u):r},u.startsWithTotal=function(t){return arguments.length?(e=t,u):e},u}function gt(){function t(t,n){return"vertical"===c?"translate("+f.x1(t,n)+", "+f.y0(t,n)+")":"translate("+f.x0(t,n)+", "+f.y1(t,n)+")"}function e(t,n){return"vertical"===c?f.y1(t,n)-f.y0(t,n):f.x1(t,n)-f.x0(t,n)}function r(t){return"vertical"===c?t.height:t.width}function i(t){return"vertical"===c?t.width:t.height}function u(){return"vertical"===c?f.x:f.y}var a=U,o=Z(.75),c="vertical",l=ft(),f=rt().xValue(function(t,n){return"vertical"===c?t.x:t.y}).yValue(function(t,n){return"vertical"===c?t.y:t.x}),s=q().selector("g.bar").element("g"),h=function(n){n.each(function(n,h){if("vertical"!==c&&"horizontal"!==c)throw new Error("The bar series does not support an orientation of "+c);s.attr("class","bar "+c);var d=n.filter(f.defined);l.x(0).y(0).width(0).height(0),"vertical"===c?l.verticalAlign("top"):l.horizontalAlign("right");var g=o(d.map(u()));i(l)(g);var p=s(this,d);p.enter().attr("transform",t).append("path").attr("d",function(t){return l([t])}),r(l)(e),p.attr("transform",t).select("path").attr("d",function(t){return l([t])}),a(p,d,h)})};return h.decorate=function(t){return arguments.length?(a=t,h):a},h.barWidth=function(t){return arguments.length?(o=n.functor(t),h):o},h.orient=function(t){return arguments.length?(c=t,h):c},n.rebind(h,f,"xScale","xValue","x1Value","x0Value","yScale","yValue","y1Value","y0Value"),n.rebind(h,s,"key"),h}function pt(){function t(){return"vertical"===n.orient()}var n=gt(),e=function(e){n.xValue(function(n,e){return t()?n.x:n.y1}).yValue(function(n,e){return t()?n.y1:n.x}).x0Value(function(n,e){return t()?0:n.y0}).y0Value(function(n,e){return t()?n.y0:0}).decorate(function(t,e,r){t.enter().attr("class","waterfall "+n.orient()).classed("up",function(t){return"up"===t.direction}).classed("down",function(t){return"down"===t.direction})}),n(e)};return z(e,n),e}function vt(){var t=n.time.scale(),e=n.scale.linear(),r=function(t,n){return t.upperQuartile},i=function(t,n){return t.lowerQuartile},u=function(t,n){return t.high},a=function(t,n){return t.low},o=function(t,n){return t.value},c=function(t,n){return t.median},l="vertical",f=Z(.5),s=U,h=q().selector("g.box-plot").element("g").attr("class","box-plot"),d=at().value(0),g=function(g){g.each(function(g,p){var v=g.filter(H(a,u,i,r,o,c)),y=h(this,v);y.enter().append("path");var m="vertical"===l?t:e,b=f(v.map(function(t,n){return m(o(t,n))}));d.orient(l).width(b),y.each(function(f,s){var h,g,p,v,y,m;if("vertical"===l){var b=e(u(f,s));h=t(o(f,s))+","+b,y=0,p=e(r(f,s))-b,g=e(c(f,s))-b,v=e(i(f,s))-b,m=e(a(f,s))-b}else{var x=t(a(f,s));h=x+","+e(o(f,s)),y=t(u(f,s))-x,p=t(r(f,s))-x,g=t(c(f,s))-x,v=t(i(f,s))-x,m=0}d.median(g).upperQuartile(p).lowerQuartile(v).high(y).low(m),n.select(this).attr("transform","translate("+h+")").select("path").attr("d",d([f]))}),s(y,g,p)})};return g.orient=function(t){return arguments.length?(l=t,g):l},g.xScale=function(n){return arguments.length?(t=n,g):t},g.yScale=function(t){return arguments.length?(e=t,g):e},g.lowerQuartile=function(t){return arguments.length?(i=n.functor(t),g):i},g.upperQuartile=function(t){return arguments.length?(r=n.functor(t),g):r},g.low=function(t){return arguments.length?(a=n.functor(t),g):a},g.high=function(t){return arguments.length?(u=n.functor(t),g):u},g.value=function(t){return arguments.length?(o=n.functor(t),g):o},g.median=function(t){return arguments.length?(c=n.functor(t),g):c},g.barWidth=function(t){return arguments.length?(f=n.functor(t),g):f},g.decorate=function(t){return arguments.length?(s=t,g):s},n.rebind(g,h,"key"),n.rebind(g,d,"cap"),g}function yt(){var t=n.time.scale(),e=n.scale.linear(),r=function(t,n){return t.high},i=function(t,n){return t.low},u=function(t,n){return t.value},a="vertical",o=Z(.5),c=U,l=q().selector("g.errorBar").element("g").attr("class","errorBar"),f=ot().value(0),s=function(s){s.each(function(s,h){var d=s.filter(H(i,r,u,u)),g=l(this,d);g.enter().append("path");var p="vertical"===a?t:e,v=o(d.map(function(t,n){return p(u(t,n))}));f.orient(a).width(v),g.each(function(o,c){var l,s,h;if("vertical"===a){var d=e(r(o,c));l=t(u(o,c))+","+d,s=0,h=e(i(o,c))-d}else{var g=t(i(o,c));l=g+","+e(u(o,c)),s=t(r(o,c))-g,h=0}f.high(s).low(h),n.select(this).attr("transform","translate("+l+")").select("path").attr("d",f([o]))}),c(g,s,h)})};return s.orient=function(t){return arguments.length?(a=t,s):a},s.xScale=function(n){return arguments.length?(t=n,s):t},s.yScale=function(t){return arguments.length?(e=t,s):e},s.low=function(t){return arguments.length?(i=n.functor(t),s):i},s.high=function(t){return arguments.length?(r=n.functor(t),s):r},s.value=function(t){return arguments.length?(u=n.functor(t),s):u},s.barWidth=function(t){return arguments.length?(o=n.functor(t),s):o},s.decorate=function(t){return arguments.length?(c=t,s):c},n.rebind(s,l,"key"),s}function mt(){function t(){}var e=n.time.scale(),r=n.scale.linear(),i=function(t,n){return t.date},u=function(t,n){return t.open},a=function(t,n){return t.high},o=function(t,n){return t.low},c=function(t,n){return t.close},l=Z(.75),f=function(t,n){return e(i(t,n))};return t.width=function(t){return l(t.map(f))},t.defined=function(t,n){return H(i,u,o,a,c)(t,n)},t.values=function(t,n){var e=c(t,n),i=u(t,n),l="";return e>i?l="up":i>e&&(l="down"),{x:f(t,n),yOpen:r(i),yHigh:r(a(t,n)),yLow:r(o(t,n)),yClose:r(e),direction:l}},t.xScale=function(n){return arguments.length?(e=n,t):e},t.yScale=function(n){return arguments.length?(r=n,t):r},t.xValue=function(n){return arguments.length?(i=n,t):i},t.yOpenValue=function(n){return arguments.length?(u=n,t):u},t.yHighValue=function(n){return arguments.length?(a=n,t):a},t.yLowValue=function(n){return arguments.length?(o=n,t):o},t.yValue=t.yCloseValue=function(n){return arguments.length?(c=n,t):c},t.barWidth=function(e){return arguments.length?(l=n.functor(e),t):l},t}function bt(){var t=gt(),e=Z(.75),r=U,i=n.scale.linear(),u=n.scale.linear(),a=function(t){return t.values},o=q().selector("g.stacked").element("g").attr("class","stacked"),c=function(n,e){return i(t.xValue()(n,e))},l=function(l){l.each(function(l){var f=e(a(l[0]).map(c)),s=f/(l.length-1);t.barWidth(s);var h=f/2;u.domain([0,l.length-1]).range([-h,h]);var d=o(this,l);d.enter().append("g"),d.select("g").datum(a).each(function(e,a){var o=n.select(this),c=function(t){return i(t)+u(a)};t.xScale(c),t.decorate(function(t,n){r(t,n,a)}),o.call(t)})})};return l.groupWidth=function(t){return arguments.length?(e=n.functor(t),l):e},l.decorate=function(t){return arguments.length?(r=t,l):r},l.xScale=function(t){return arguments.length?(i=t,l):i},l.values=function(t){return arguments.length?(a=t,l):a},n.rebind(l,t,"yValue","xValue","yScale"),l}function xt(){var t=U,e=function(t){return t.values},r=function(r){r.each(function(r){var i=n.select(this),u=q().selector("g.stacked").element("g").attr("class","stacked"),a=u(i,r);a.enter().append("g"),a.select("g").datum(e).call(t)})};return r.series=function(n){return arguments.length?(t=n,r):t},r.values=function(t){return arguments.length?(e=t,r):e},r}function Mt(){var t=U,e=rt(),r=n.svg.line().defined(e.defined).x(e.x).y(e.y),i=q().selector("path.line").element("path").attr("class","line"),u=function(n){n.each(function(n,e){var u=i(this,[n]);u.attr("d",r),t(u,n,e)})};return u.decorate=function(n){return arguments.length?(t=n,u):t},n.rebind(u,e,"xScale","xValue","yScale","yValue"),n.rebind(u,i,"key"),n.rebind(u,r,"interpolate","tension"),u}function wt(){var t=Mt().yValue(function(t){return t.y0+t.y}),n=xt().series(t),e=function(t){t.call(n)};return z(e,t),e}function St(){var t=gt().yValue(function(t){return t.y0+t.y}).y0Value(function(t){return t.y0}),n=xt().series(t),e=function(t){t.call(n)};return z(e,t),e}function kt(){var t=U,e=rt(),r=n.svg.area().defined(e.defined).x(e.x).y0(e.y0).y1(e.y1),i=q().selector("path.area").element("path").attr("class","area"),u=function(n){n.each(function(n,e){var u=i(this,[n]);u.attr("d",r),t(u,n,e)})};return u.decorate=function(n){return arguments.length?(t=n,u):t},n.rebind(u,e,"xScale","xValue","yScale","yValue","y1Value","y0Value"),n.rebind(u,i,"key"),n.rebind(u,r,"interpolate","tension"),u}function _t(){var t=kt().yValue(function(t){return t.y0+t.y}).y0Value(function(t){return t.y0}),n=xt().series(t),e=function(t){t.call(n)};return z(e,t),e}function Tt(t){function e(t){return"translate("+t.x+", "+t.yHigh+")"}var r=U,i=mt(),u=q().selector("g.ohlc").element("g").attr("class","ohlc"),a=function(t){t.each(function(t,a){var o=t.filter(i.defined),c=u(this,o);c.enter().attr("transform",function(t,n){return e(i.values(t,n))+" scale(1e-6, 1)"}).append("path");var l=ct().width(i.width(o));c.each(function(t,r){var u=i.values(t,r),a=n.transition(n.select(this)).attr({"class":"ohlc "+u.direction,transform:function(){return e(u)+" scale(1)"}});l.x(n.functor(0)).open(function(){return u.yOpen-u.yHigh}).high(function(){return u.yHigh-u.yHigh}).low(function(){return u.yLow-u.yHigh}).close(function(){return u.yClose-u.yHigh}),a.select("path").attr("d",l([t]))}),r(c,t,a)})};return a.decorate=function(t){return arguments.length?(r=t,a):r},n.rebind(a,u,"key"),z(a,i),a}function Nt(){var t=U,e=n.scale.linear(),r=n.scale.linear(),i=function(t,n){
return t.date.getDay()},u=n.scale.linear(),a=Mt(),o=Z(.75),c=q().selector("g.cycle").element("g").attr("class","cycle"),l=function(l){l.each(function(l,f){var s=n.nest().key(i).map(l),h=Object.keys(s),d=o(h.map(e)),g=d/2,p=c(this,h);p.each(function(t,i){var o=n.select(this);o.attr("transform","translate("+e(t)+", 0)"),(u.rangeBands||u.range)([-g,g]),a.xScale(u).yScale(r),n.select(this).datum(s[t]).call(a)}),t(p,h,f)})};return l.decorate=function(n){return arguments.length?(t=n,l):t},l.xScale=function(t){return arguments.length?(e=t,l):e},l.yScale=function(t){return arguments.length?(r=t,l):r},l.xValue=function(t){return arguments.length?(i=t,l):i},l.subScale=function(t){return arguments.length?(u=t,l):u},l.subSeries=function(t){return arguments.length?(a=t,l):a},l.barWidth=function(t){return arguments.length?(o=n.functor(t),l):o},n.rebind(l,c,"key"),l}function At(){function t(t){return"translate("+t.x+", "+t.yHigh+")"}var e=U,r=mt(),i=q().selector("g.candlestick").element("g").attr("class","candlestick"),u=function(u){u.each(function(u,a){var o=u.filter(r.defined),c=i(this,o);c.enter().attr("transform",function(n,e){return t(r.values(n,e))+" scale(1e-6, 1)"}).append("path");var l=lt().width(r.width(o));c.each(function(e,i){var u=r.values(e,i),a=n.transition(n.select(this)).attr({"class":"candlestick "+u.direction,transform:function(){return t(u)+" scale(1)"}});l.x(n.functor(0)).open(function(){return u.yOpen-u.yHigh}).high(function(){return u.yHigh-u.yHigh}).low(function(){return u.yLow-u.yHigh}).close(function(){return u.yClose-u.yHigh}),a.select("path").attr("d",l([e]))}),e(c,u,a)})};return u.decorate=function(t){return arguments.length?(e=t,u):e},n.rebind(u,i,"key"),z(u,r),u}function Et(){var t=ht(),e=n.functor(0),r=U,i=n.time.scale(),u=n.scale.linear(),a=q().selector("g.axis-adapter").element("g").attr({"class":"axis axis-adapter"}),o=function(n){n.each(function(n,c){var l,f=a(this,[n]);switch(o.orient()){case"top":case"bottom":l="translate(0,"+u(e(n))+")",t.scale(i);break;case"left":case"right":l="translate("+i(e(n))+",0)",t.scale(u);break;default:throw new Error("Invalid orientation")}f.enter().attr("transform",l),f.attr("transform",l),f.call(t),r(f,n,c)})};return o.baseline=function(t){return arguments.length?(e=n.functor(t),o):e},o.decorate=function(t){return arguments.length?(r=t,o):r},o.xScale=function(t){return arguments.length?(i=t,o):i},o.yScale=function(t){return arguments.length?(u=t,o):u},n.rebind(o,t,"orient","ticks","tickValues","tickSize","innerTickSize","outerTickSize","tickPadding","tickFormat")}function Ct(){var t={};return t.distance=function(t,n){return n.getTime()-t.getTime()},t.offset=function(t,n){return new Date(t.getTime()+n)},t.clampUp=P,t.clampDown=P,t.copy=function(){return t},t}function Dt(t,n,e){var r=t.map(function(r,i){if(i<t.length-1)return n.clampUp(r);var u=n.clampUp(r);return u<e[1]?u:n.clampDown(r)}),i=r.reduce(function(t,n){return 0===t.filter(function(t){return t.getTime()===n.getTime()}).length&&t.push(n),t},[]);return i}function zt(t,e){function r(n){var r=t.domain(),i=t.range(),u=e.distance(r[0],r[1]),a=e.distance(r[0],n),o=a/u,c=o*(i[1]-i[0])+i[0];return c}return arguments.length||(t=n.time.scale(),e=Ct()),r.invert=function(n){var r=t.domain(),i=t.range(),u=(n-i[0])/(i[1]-i[0]),a=e.distance(r[0],r[1]),o=u*a;return e.offset(r[0],o)},r.domain=function(n){if(!arguments.length)return t.domain();var i=e.clampUp(n[0]),u=e.clampDown(n[1]);return t.domain([i,u]),r},r.nice=function(){t.nice();var n=t.domain(),i=e.clampUp(n[0]),u=e.clampDown(n[1]);return t.domain([i,u]),r},r.ticks=function(){var n=t.ticks.apply(this,arguments);return Dt(n,e,r.domain())},r.copy=function(){return zt(t.copy(),e.copy())},r.discontinuityProvider=function(t){return arguments.length?(e=t,r):e},n.rebind(r,t,"range","rangeRound","interpolate","clamp","tickFormat")}function Lt(){return zt()}function Vt(){function t(t){return 0===t.getDay()||6===t.getDay()}var e=864e5,r=5*e,i=7*e,u={};return u.clampDown=function(e){if(e&&t(e)){var r=0===e.getDay()?2:1,i=n.time.day.ceil(e);return n.time.day.offset(i,-r)}return e},u.clampUp=function(e){if(e&&t(e)){var r=0===e.getDay()?1:2,i=n.time.day.floor(e);return n.time.day.offset(i,r)}return e},u.distance=function(t,e){t=u.clampUp(t),e=u.clampDown(e);var a=n.time.saturday.ceil(t);if(a>e)return e.getTime()-t.getTime();var o=a.getTime()-t.getTime(),c=n.time.saturday.ceil(e),l=c.getTime()-e.getTime(),f=(c.getTime()-a.getTime())/i;return f*r+o-l},u.offset=function(e,i){var a=t(e)?u.clampUp(e):e,o=i,c=n.time.saturday.ceil(a);if(o-=c.getTime()-a.getTime(),0>o)return new Date(a.getTime()+i);a=n.time.day.offset(c,2);var l=Math.floor(o/r);return a=n.time.day.offset(a,7*l),o-=l*r,a=new Date(a.getTime()+o)},u.copy=function(){return u},u}function jt(){var t=n.time.scale(),e=n.scale.linear(),r=function(t){return t.date},i=function(t){return t.elderRay},u=Z(.75),a=gt(),o=gt(),c=gt(),l=gt(),f=nt(),s=U,h=function(n){function h(t,n){return t*n>0&&Math.abs(t)<Math.abs(n)}a.xValue(r).yValue(function(t,n){return h(i(t).bullPower,i(t).bearPower)?void 0:i(t).bullPower}).barWidth(u),o.xValue(r).yValue(function(t,n){return h(i(t).bearPower,i(t).bullPower)?void 0:i(t).bearPower}).barWidth(u),c.xValue(r).yValue(function(t,n){return h(i(t).bullPower,i(t).bearPower)?i(t).bullPower:void 0}).barWidth(u),l.xValue(r).yValue(function(t,n){return h(i(t).bearPower,i(t).bullPower)?i(t).bearPower:void 0}).barWidth(u),f.xScale(t).yScale(e).series([a,o,c,l]).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi "+["bull","bear","bull top","bear top"][n]}),s(t,n,e)}),n.call(f)};return h.barWidth=function(t){return arguments.length?(u=n.functor(t),h):u},h.xScale=function(n){return arguments.length?(t=n,h):t},h.xValue=function(t){return arguments.length?(r=t,h):r},h.yScale=function(t){return arguments.length?(e=t,h):e},h.decorate=function(t){return arguments.length?(s=t,h):s},h}function Ft(){var t=n.time.scale(),e=n.scale.linear(),r=function(t,n){return t.close},i=function(t,n){return t.date},u=function(t){return t.envelope},a=U,o=kt().y0Value(function(t,n){return u(t).upper}).y1Value(function(t,n){return u(t).lower}),c=Mt().yValue(function(t,n){return u(t).upper}),l=Mt().yValue(function(t,n){return u(t).lower}),f=function(n){var r=nt().xScale(t).yScale(e).series([o,c,l]).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi envelope "+["area","upper","lower"][n]}),a(t,n,e)});o.xValue(i),c.xValue(i),l.xValue(i),n.call(r)};return f.xScale=function(n){return arguments.length?(t=n,f):t},f.yScale=function(t){return arguments.length?(e=t,f):e},f.xValue=function(t){return arguments.length?(i=t,f):i},f.yValue=function(t){return arguments.length?(r=t,f):r},f.root=function(t){return arguments.length?(u=t,f):u},f.decorate=function(t){return arguments.length?(a=t,f):a},f}function Pt(){var t=n.time.scale(),e=n.scale.linear(),r=nt(),i=U,u=et(),a=Mt().xValue(function(t,n){return t.date}).yValue(function(t,n){return t.force}),o=function(n){r.xScale(t).yScale(e).series([u,a]).mapping(function(t){return t===u?[0]:this}).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi "+["annotations","indicator"][n]}),i(t,n,e)}),n.call(r)};return o.xScale=function(n){return arguments.length?(t=n,u.xScale(n),o):t},o.yScale=function(t){return arguments.length?(e=t,u.yScale(t),o):e},o.decorate=function(t){return arguments.length?(i=t,o):i},n.rebind(o,a,"yValue","xValue"),o}function Ot(){var t=n.time.scale(),e=n.scale.linear(),r=80,i=20,u=nt(),a=U,o=et(),c=Mt().xValue(function(t,n){return t.date}).yValue(function(t,n){return t.stochastic.d}),l=Mt().yValue(function(t,n){return t.stochastic.k}),f=function(n){u.xScale(t).yScale(e).series([o,c,l]).mapping(function(t){return t===o?[r,i]:this}).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi stochastic "+["annotations","stochastic-d","stochastic-k"][n]}),a(t,n,e)}),n.call(u)};return f.xScale=function(n){return arguments.length?(t=n,f):t},f.yScale=function(t){return arguments.length?(e=t,f):e},f.upperValue=function(t){return arguments.length?(r=t,f):r},f.lowerValue=function(t){return arguments.length?(i=t,f):i},f.decorate=function(t){return arguments.length?(a=t,f):a},n.rebind(f,c,"yDValue","xDValue"),n.rebind(f,l,"yKValue","xKValue"),f}function Ut(){var t=n.time.scale(),e=n.scale.linear(),r=70,i=30,u=nt(),a=U,o=et(),c=Mt().xValue(function(t,n){return t.date}).yValue(function(t,n){return t.rsi}),l=function(n){u.xScale(t).yScale(e).series([o,c]).mapping(function(t){return t===o?[r,50,i]:this}).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi rsi "+["annotations","indicator"][n]}),a(t,n,e)}),n.call(u)};return l.xScale=function(n){return arguments.length?(t=n,l):t},l.yScale=function(t){return arguments.length?(e=t,l):e},l.upperValue=function(t){return arguments.length?(r=t,l):r},l.lowerValue=function(t){return arguments.length?(i=t,l):i},l.decorate=function(t){return arguments.length?(a=t,l):a},n.rebind(l,c,"yValue","xValue"),l}function Ht(){var t=n.time.scale(),e=n.scale.linear(),r=function(t){return t.date},i=function(t){return t.macd},u=Mt(),a=Mt(),o=gt(),c=nt(),l=U,f=function(n){u.xValue(r).yValue(function(t,n){return i(t).macd}),a.xValue(r).yValue(function(t,n){return i(t).signal}),o.xValue(r).yValue(function(t,n){return i(t).divergence}),c.xScale(t).yScale(e).series([o,u,a]).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi "+["macd-divergence","macd","macd-signal"][n]}),l(t,n,e)}),n.call(c)};return f.xScale=function(n){return arguments.length?(t=n,f):t},f.xValue=function(t){return arguments.length?(r=t,f):r},f.yScale=function(t){return arguments.length?(e=t,f):e},f.root=function(t){return arguments.length?(i=t,f):i},f.decorate=function(t){return arguments.length?(l=t,f):l},n.rebind(f,o,"barWidth"),f}function qt(){var t=n.time.scale(),e=n.scale.linear(),r=function(t,n){return t.close},i=function(t,n){return t.date},u=function(t){return t.bollingerBands},a=U,o=kt().y0Value(function(t,n){return u(t).upper}).y1Value(function(t,n){return u(t).lower}),c=Mt().yValue(function(t,n){return u(t).upper}),l=Mt().yValue(function(t,n){return u(t).average}),f=Mt().yValue(function(t,n){return u(t).lower}),s=function(n){var r=nt().xScale(t).yScale(e).series([o,c,f,l]).decorate(function(t,n,e){t.enter().attr("class",function(t,n){return"multi bollinger "+["area","upper","lower","average"][n]}),a(t,n,e)});o.xValue(i),c.xValue(i),l.xValue(i),f.xValue(i),n.call(r)};return s.xScale=function(n){return arguments.length?(t=n,s):t},s.yScale=function(t){return arguments.length?(e=t,s):e},s.xValue=function(t){return arguments.length?(i=t,s):i},s.yValue=function(t){return arguments.length?(r=t,s):r},s.root=function(t){return arguments.length?(u=t,s):u},s.decorate=function(t){return arguments.length?(a=t,s):a},s}function Yt(){var t=n.functor(void 0),e=n.functor(10),r=U,i=P,u=function(n){var u=e.apply(this,arguments),a=n.slice(0,u).map(i);return n.map(function(n,e){return u-1>e?t(n,e):(e>=u&&(a.shift(),a.push(i(n,e))),r(a))})};return u.undefinedValue=function(e){return arguments.length?(t=n.functor(e),u):t},u.windowSize=function(t){return arguments.length?(e=n.functor(t),u):e},u.accumulator=function(t){return arguments.length?(r=t,u):r},u.value=function(t){return arguments.length?(i=t,u):i},u}function Rt(){var t=U,e=Yt(),r=function(r){return n.zip(r,e(r)).forEach(function(n){t(n[0],n[1])})};return r.algorithm=function(t){return arguments.length?(e=t,r):e},r.merge=function(n){return arguments.length?(t=n,r):t},r}function It(){var t=9,n=P,e=function(e){var r,i=2/(t+1),u=0;return e.map(function(e,a){if(t-1>a)return void(u+=n(e,a));if(a===t-1){u+=n(e,a);var o=u/t;return r=o,o}var c=n(e,a)*i+(1-i)*r;return r=c,c})};return e.windowSize=function(n){return arguments.length?(t=n,e):t},e.value=function(t){return arguments.length?(n=t,e):n},e}function Wt(){var t=P,e=function(t,n){return t.high},r=function(t,n){return t.low},i=It().windowSize(13),u=function(u){i.value(t);var a=i(u),o=n.zip(u,a).map(function(t){return{bullPower:t[1]?e(t[0])-t[1]:void 0,bearPower:t[1]?r(t[0])-t[1]:void 0}});return o};return u.value=function(n){return arguments.length?(t=n,u):t},u.highValue=function(t){return arguments.length?(e=t,u):e},u.lowValue=function(t){return arguments.length?(r=t,u):e},C(u,i,{period:"windowSize"}),u}function Bt(){var t=Wt().value(function(t){return t.close}),e=Rt().algorithm(t).merge(function(t,n){t.elderRay=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"highValue","lowValue","period","value"),r}function Xt(){function t(t){return Array.apply(null,new Array(t)).map(r)}var e=Yt().accumulator(n.mean),r=n.functor(void 0),i=function(t){return null==e.value()(t)},u=function(n){for(var r=0;i(n[r])&&r<n.length;)r++;var u=n.slice(r);return t(r).concat(e(u))};return u.algorithm=function(t){return arguments.length?(e=t,u):e},u.undefinedValue=function(t){return arguments.length?(r=n.functor(t),u):r},u.defined=function(t){return arguments.length?(i=t,u):i},u}function Jt(){var t=.1,e=P,r=function(n){return n.map(function(n){return{lower:e(n)*(1-t),upper:e(n)*(1+t)}})};return r.factor=function(n){return arguments.length?(t=n,r):t},r.value=function(t){return arguments.length?(e=n.functor(t),r):e},r}function Zt(){var t=Jt(),e=Xt().undefinedValue({lower:void 0,upper:void 0}).algorithm(t),r=Rt().algorithm(e).merge(function(t,n){t.envelope=n}),i=function(t){return r(t)};return i.root=function(t){return t.envelope},n.rebind(i,r,"merge"),n.rebind(i,t,"value","factor"),i}function $t(){var t=function(t,n){return t.volume},e=function(t,n){return t.close},r=P,i=It().windowSize(13),u=Yt().windowSize(2).accumulator(function(n){return(e(n[1])-e(n[0]))*t(n[1])}),a=function(t){i.value(r);var n=u(t).filter(P),e=i(n);return t.length&&e.unshift(void 0),e};return a.volumeValue=function(n){return arguments.length?(t=n,a):t},a.closeValue=function(t){return arguments.length?(e=t,a):e},n.rebind(a,i,"windowSize"),a}function Gt(){var t=$t(),e=Rt().algorithm(t).merge(function(t,n){t.force=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"windowSize","volumeValue","closeValue"),r}function Qt(){var t=function(t,n){return t.close},e=function(t,n){return t.high},r=function(t,n){return t.low},i=Yt().windowSize(5).accumulator(function(i){var u=n.max(i,e),a=n.min(i,r);return 100*(t(i[i.length-1])-a)/(u-a)}),u=Yt().windowSize(3).accumulator(function(t){return void 0!==t[0]?n.mean(t):void 0}),a=function(t){var n=i(t),e=u(n);return n.map(function(t,n){var r=e[n];return{k:t,d:r}})};return a.closeValue=function(n){return arguments.length?(t=n,a):t},a.highValue=function(t){return arguments.length?(e=t,a):e},a.lowValue=function(t){return arguments.length?(r=t,a):e},C(a,i,{kWindowSize:"windowSize"}),C(a,u,{dWindowSize:"windowSize"}),a}function Kt(){var t=Qt(),e=Rt().algorithm(t).merge(function(t,n){t.stochastic=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"kWindowSize","dWindowSize","lowValue","closeValue","highValue"),r}function tn(){var t,e,r,i=function(t,n){return t.close},u=function(t,n){var e=n+(t[t.length-1]-n)/t.length;return e},a=function(t,n){return t+n},o=Yt().windowSize(14).accumulator(function(n){var o=n.map(i);if(!t)return void(t=o[0]);var c=[],l=[];o.forEach(function(n){var e=t>n?t-n:0,r=n>t?n-t:0;c.push(e),l.push(r),t=n});var f=e?u(c,e):c.reduce(a)/o.length,s=r?u(l,r):l.reduce(a)/o.length;e=f,r=s;var h=s/f;return 100-100/(1+h)}),c=function(t){return o(t)};return c.closeValue=function(t){return arguments.length?(i=t,c):i},n.rebind(c,o,"windowSize"),c}function nn(){var t=tn(),e=Rt().algorithm(t).merge(function(t,n){t.rsi=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"windowSize","closeValue"),r}function en(){var t=Yt().accumulator(n.mean).value(function(t){return t.close}),e=Rt().algorithm(t).merge(function(t,n){t.movingAverage=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"windowSize","undefinedValue","value"),r}function rn(){var t=P,e=It().windowSize(12),r=It().windowSize(29),i=It().windowSize(9),u=Xt().algorithm(i),a=function(i){e.value(t),r.value(t);var a=n.zip(e(i),r(i)).map(function(t){return void 0!==t[0]&&void 0!==t[1]?t[0]-t[1]:void 0}),o=u(a);return n.zip(a,o).map(function(t){return{macd:t[0],signal:t[1],divergence:void 0!==t[0]&&void 0!==t[1]?t[0]-t[1]:void 0}})};return a.value=function(n){return arguments.length?(t=n,a):t},C(a,e,{fastPeriod:"windowSize"}),C(a,r,{slowPeriod:"windowSize"}),C(a,i,{signalPeriod:"windowSize"}),a}function un(){var t=rn().value(function(t){return t.close}),e=Rt().algorithm(t).merge(function(t,n){t.macd=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"fastPeriod","slowPeriod","signalPeriod","value"),r}function an(){var t=It().value(function(t){return t.close}),e=Rt().algorithm(t).merge(function(t,n){t.exponentialMovingAverage=n}),r=function(t){return e(t)};return n.rebind(r,e,"merge"),n.rebind(r,t,"windowSize","value"),r}function on(){var t=n.functor(0),e=P,r=function(n){if(0===n.length)return[];var r=e(n[t(n)]);return n.map(function(t,n){return(e(t,n)-r)/r})};return r.baseIndex=function(e){return arguments.length?(t=n.functor(e),r):t},r.value=function(t){return arguments.length?(e=t,r):e},r}function cn(){var t=2,e=Yt().undefinedValue({upper:void 0,average:void 0,lower:void 0}).accumulator(function(e){var r=n.mean(e),i=n.deviation(e);return{upper:r+t*i,average:r,lower:r-t*i}}),r=function(t){return e(t)};return r.multiplier=function(n){return arguments.length?(t=n,r):t},n.rebind(r,e,"windowSize","value"),r}function ln(){var t=cn().value(function(t){return t.close}),e=Rt().algorithm(t).merge(function(t,n){t.bollingerBands=n}),r=function(t){return e(t)};return r.root=function(t){return t.bollingerBands},n.rebind(r,e,"merge"),n.rebind(r,t,"windowSize","value","multiplier"),r}function fn(){var t=10,n=function(n){for(var e=Math.ceil(n.length/t),r=[],i=0;e>i;i++)r.push(n.slice(i*t,(i+1)*t));return r};return n.bucketSize=function(e){return arguments.length?(t=e,n):t},n}function sn(){function t(t){for(var n=t.map(function(t){return[r(t),i(t)]}),e=[],u=1;u<n.length-1;u++){var a=n[u-1],o=n[u],c=n[u+1],l=(a[0]-c[0])*(o[1]-a[1]),f=(a[0]-o[0])*(c[1]-a[1]),s=Math.abs(.5*l*f);e.push(s)}return e}var e=fn(),r=P,i=P,u=function(r){if(e.bucketSize()>=r.length)return r;var i=t(r),u=e(i),a=e(r.slice(1,r.length-1)),o=a.map(function(t,e){var r=u[e],i=n.max(r),a=r.indexOf(i);return t[a]});return[].concat(r[0],o,r[r.length-1])};return n.rebind(u,e,"bucketSize"),u.x=function(t){return arguments.length?(r=t,u):r},u.y=function(t){return arguments.length?(i=t,u):i},u}function hn(){var t=P,e=P,r=fn(),i=function(i){if(r.bucketSize()>=i.length)return i;var u=r(i.slice(1,i.length-1)),a=i[0],o=i[i.length-1],c=[].concat(a,u,o),l=t(a),f=e(a),s=u.map(function(r,i){for(var u,a=-(1/0),o=n.mean(c[i+1],t),s=n.mean(c[i+1],e),h=0;h<r.length;h++){var d=t(r[h]),g=e(r[h]),p=(l-o)*(g-f),v=(l-d)*(s-f),y=Math.abs(.5*p*v);y>a&&(a=y,u=r[h])}return l=t(u),f=e(u),u});return[].concat(i[0],s,i[i.length-1])};return n.rebind(i,r,"bucketSize"),i.x=function(n){return arguments.length?(t=n,i):t},i.y=function(t){return arguments.length?(e=t,i):e},i}function dn(){var t=fn(),e=P,r=function(r){if(t.bucketSize()>r.length)return r;var i=n.extent(r),u=t(r.slice(1,r.length-1)),a=u.map(function(t,n){for(var r,u,a={},o=!0,c=0;c<t.length;c++){var l=e(t[c]);if(l===i[0]||l===i[1])return t[c];void 0===a[l]&&(a[l]=0),a[l]++,a[l]>a[r]||void 0===r?(r=l,u=c,o=!0):a[l]===a[r]&&(o=!1)}return o?t[u]:t[Math.floor(t.length/2)]});return[].concat(r[0],a,r[r.length-1])};return r.bucketSize=function(){return t.bucketSize.apply(this,arguments),r},r.value=function(t){return arguments.length?(e=t,r):e},r}function gn(){function t(t){var n=Object.keys(t[0]).filter(function(t){return t!==e}).map(function(n){var r=t.filter(function(t){return t[n]}).map(function(t){return{x:t[e],y:i(t,n)}});return{key:n,values:r}});return n}function n(t){var n=t.map(function(t){var n=Object.keys(t).filter(function(t){return t!==e});return{key:t[e],values:n.map(function(n){return{x:n,y:i(t,n)}})}});return n}var e="",r="vertical",i=function(t,n){return Number(t[n])},u=function(e){return"vertical"===r?t(e):n(e)};return u.xValueKey=function(t){return arguments.length?(e=t,u):e},u.yValue=function(t){return arguments.length?(i=t,u):i},u.orient=function(t){return arguments.length?(r=t,u):r},u}function pn(){var t=1,e=20,r=.1,i=.1,u=function(u){for(var a=n.random.normal(),o=t/e,c=[],l=0;e+1>l;l++){c.push(u);var f=a()*Math.sqrt(o)*i+(r-i*i/2)*o;u*=Math.exp(f)}return c};return u.period=function(n){return arguments.length?(t=n,u):t},u.steps=function(t){return arguments.length?(e=t,u):e},u.mu=function(t){return arguments.length?(r=t,u):r},u.sigma=function(t){return arguments.length?(i=t,u):i},u}function vn(){function t(t){var n=l.offset(t,f)-t;return(o.offset(t,c)-t)/n}function e(n,e){var r=t(n),i=d.period(r)(e),u={date:n,open:i[0],high:Math.max.apply(Math,i),low:Math.min.apply(Math,i),close:i[d.steps()]};return u.volume=h(u),u}function r(t){var n,r;do n=t?o.offset(t.date,c):new Date(u.getTime()),r=t?t.close:a,t=e(n,r);while(s&&!s(t));return t}function i(){var t,n={};return n.next=function(){var n=r(t);return t=n,n},n.take=function(t){return this.until(function(n,e){return!t||0>t||e===t})},n.until=function(n){for(var e=[],i=0,u=r(t);n&&!n(u,i);)e.push(u),t=u,u=r(t),i+=1;return e},n}var u=new Date,a=100,o=n.time.day,c=1,l=n.time.year,f=1,s=null,h=function(){var t=n.random.normal(1,.1);return Math.ceil(1e3*t())},d=pn(),g=function(t){var n=i();return n.take(t)};return g.stream=i,g.startDate=function(t){return arguments.length?(u=t,g):u},g.startPrice=function(t){return arguments.length?(a=t,g):a},g.interval=function(t){return arguments.length?(o=t,g):o},g.intervalStep=function(t){return arguments.length?(c=t,g):c},g.unitInterval=function(t){return arguments.length?(l=t,g):l},g.unitIntervalStep=function(t){return arguments.length?(f=t,g):f},g.filter=function(t){return arguments.length?(s=t,g):s},g.volume=function(t){return arguments.length?(h=n.functor(t),g):h},n.rebind(g,d,"steps","mu","sigma"),g}function yn(){return function(t){var n=t.date.getDay();return!(0===n||6===n)}}function mn(){function t(t){return t[0].toLowerCase()+t.substr(1)}var e="YAHOO",r="GOOG",i=null,u=null,a=null,o=null,c=!1,l=null,f=t,s=function(t){var s=[];null!=i&&s.push("api_key="+i),null!=u&&s.push("start_date="+u.toISOString().substring(0,10)),null!=a&&s.push("end_date="+a.toISOString().substring(0,10)),null!=o&&s.push("rows="+o),c||s.push("order=asc"),null!=l&&s.push("collapse="+l);var h="https://www.quandl.com/api/v3/datasets/"+e+"/"+r+"/data.json?"+s.join("&");n.json(h,function(n,e){if(n)return void t(n);var r=e.dataset_data,i=f||function(t){return t},u=r.column_names.map(function(t,n){return[n,i(t)]}).filter(function(t){return t[1]}),a=r.data.map(function(t){var n={};return u.forEach(function(e){n[e[1]]=0===e[0]?new Date(t[e[0]]):t[e[0]]}),n});t(n,a)})};return s.database=function(t){return arguments.length?(e=t,s):e},s.dataset=function(t){return arguments.length?(r=t,s):r},s.apiKey=function(t){return arguments.length?(i=t,s):i},s.start=function(t){return arguments.length?(u=t,s):u},s.end=function(t){return arguments.length?(a=t,s):a},s.rows=function(t){return arguments.length?(o=t,s):o},s.descending=function(t){return arguments.length?(c=t,s):c},s.collapse=function(t){return arguments.length?(l=t,s):l},s.columnNameMap=function(t){return arguments.length?(f=t,s):f},s.defaultColumnNameMap=t,s}function bn(){var t="BTC-USD",e=null,r=null,i=null,u=function(u){var a=[];null!=e&&a.push("start="+e.toISOString()),null!=r&&a.push("end="+r.toISOString()),null!=i&&a.push("granularity="+i);var o="https://api.exchange.coinbase.com/products/"+t+"/candles?"+a.join("&");n.json(o,function(t,n){return t?void u(t):(n=n.map(function(t){return{date:new Date(1e3*t[0]),open:t[3],high:t[2],low:t[1],close:t[4],volume:t[5]}}),void u(t,n))})};return u.product=function(n){return arguments.length?(t=n,u):t},u.start=function(t){return arguments.length?(e=t,u):e},u.end=function(t){return arguments.length?(r=t,u):r},u.granularity=function(t){return arguments.length?(i=t,u):i},u}function xn(t,e){function r(t){return q().selector("g."+t).element("g").attr("class",t)}t=t||n.scale.linear(),e=e||n.scale.linear();var i=10,u=9,a=U,o=Mt(),c={bottom:30,right:30},l=function(t){return t.values},f=function(t){return t.key},s=ht().ticks(2),h=ht().orient("right").ticks(3),d=r("multiple"),g=r("x-axis"),p=r("y-axis"),v=function(r){r.each(function(r,v){function y(t,n){return{xOffset:(S+i)*t,yOffset:(k+i)*n}}var m=n.select(this),b=G(c);b.position="absolute";var x=m.selectAll("svg").data([r]);x.enter().append("svg").layout("flex",1).append("g").attr("class","multiples-chart");var M=x.select("g").layout(b);m.layout();var w=Math.ceil(r.length/u),S=M.layout("width")/u-i,k=M.layout("height")/w-i;j(t,[0,S]),j(e,[k,0]),o.xScale(t).yScale(e);var _=d(M,r);_.attr("transform",function(t,n){var e=y(n%u,Math.floor(n/u));return"translate("+e.xOffset+","+e.yOffset+")"});var T=_.enter().append("g");T.append("rect").attr("class","background"),T.append("g").attr("transform","translate("+S/2+", 0)").append("text").attr("class","label").text(f),_.select("g").datum(l).call(o),_.select("rect").attr({width:S,height:k}),a(_,r,v);var N=g(M,n.range(u));N.attr("transform",function(t,n){var e="bottom"===s.orient()?w:0,r="bottom"===s.orient()?0:-i,u=y(n,e);return"translate("+u.xOffset+","+(u.yOffset+r)+")"}),s.scale(t),N.call(s);var A=p(M,n.range(w));A.attr("transform",function(t,n){var e="left"===h.orient()?0:u,r="left"===h.orient()?-i:0,a=y(e,n);return"translate("+(a.xOffset+r)+","+a.yOffset+")"}),h.scale(e),A.call(h)})},y=[/range\w*/,/tickFormat/];return z(v,t,"x",y),z(v,e,"y",y),z(v,s,"x"),z(v,h,"y"),v.columns=function(t){return arguments.length?(u=t,v):u},v.margin=function(t){return arguments.length?(c=t,v):c},v.padding=function(t){return arguments.length?(i=t,v):i},v.plotArea=function(t){return arguments.length?(o=t,v):o},v.values=function(t){return arguments.length?(l=t,v):l},v.key=function(t){return arguments.length?(f=t,v):f},v.decorate=function(t){return arguments.length?(a=t,v):a},v}function Mn(){var t=50,e=U,r=[["datum:",function(t){return t.datum}]],i=q().selector("g.cell").element("g").attr("class","cell tooltip"),u=function(u){u.each(function(u,a){var o=n.select(this),c=r.map(function(t,e){return{datum:u,label:n.functor(t[0]),value:n.functor(t[1])}}),l=i(o,c);l.enter().layout({flex:1,flexDirection:"row"}),l.enter().append("text").attr("class","label").layout("flex",t),l.enter().append("text").attr("class","value").layout("flex",100-t),l.select(".label").text(function(t,n){return t.label.call(this,t.datum,n)}),l.select(".value").text(function(t,n){return t.value.call(this,t.datum,n)}),e(l,u,a),o.layout()})};return u.decorate=function(t){return arguments.length?(e=t,u):e},u.split=function(n){return arguments.length?(t=n,u):t},u.items=function(t){return arguments.length?(r=t,u):r},u}function wn(){function t(t){function e(n){return t.filter(function(t){return i(t)===n})[0]}var r=l.xValue(),i=l.yValue(),u=n.max(t,i),a=n.min(t,i);return[{x:r(t[0]),y:i(t[0])},{x:r(e(u)),y:u},{x:r(e(a)),y:a},{x:r(t[t.length-1]),y:i(t[t.length-1])}]}var e=Lt(),i=n.scale.linear(),u=2,a=Mt(),o=it().xValue(function(t){return t.x}).yValue(function(t){return t.y}).decorate(function(t){t.attr("class",function(t,n){switch(n){case 0:return"open";case 1:return"high";case 2:return"low";case 3:return"close"}})}),c=nt().series([a,o]).mapping(function(n){switch(n){case o:return t(this);default:return this}}),l=function(t){o.size(u*u*Math.PI),t.each(function(t){var a=n.select(this),o=r(this),l=u;e.range([l,o.width-l]),i.range([o.height-l,l]),c.xScale(e).yScale(i),a.call(c)})};return C(l,e,{xDiscontinuityProvider:"discontinuityProvider",xDomain:"domain"}),C(l,i,{yDomain:"domain"}),C(l,a,"xValue","yValue"),l.xScale=function(){return e},l.yScale=function(){return i},l.radius=function(t){return arguments.length?(u=t,l):u},l}function Sn(t,e){function r(t,n){var e=[/range\w*/,/tickFormat/];if(!L(t)){e.push("ticks");var r={};r[n+"ScaleTicks"]="ticks",C(p,t,r)}z(p,t,n,e)}t=t||n.scale.linear(),e=e||n.scale.linear();var i={bottom:30,right:30},u="",a="",o=null,c=null,l="",f=Mt(),s=U,h=Et().orient("bottom").baseline(function(){if(null!==o)return e(o.apply(this,arguments));var t=V(e);return"bottom"===h.orient()?t[0]:t[1]}),d=Et().orient("right").baseline(function(){if(null!==c)return t(c.apply(this,arguments));var n=V(t);return"left"===d.orient()?n[0]:n[1]}),g=q().selector("svg.cartesian-chart").element("svg").attr({"class":"cartesian-chart","layout-style":"flex: 1"}),p=function(r){r.each(function(r,o){var c=n.select(this),p=g(c,[r]);p.enter().html('<g class="plot-area-container"> 	                        <rect class="background" 	                            layout-style="position: absolute; top: 0; bottom: 0; left: 0; right: 0"/> 	                        <g class="axes-container" 	                            layout-style="position: absolute; top: 0; bottom: 0; left: 0; right: 0"> 	                            <g class="x-axis" layout-style="height: 0; width: 0"/> 	                            <g class="y-axis" layout-style="height: 0; width: 0"/> 	                        </g> 	                        <svg class="plot-area" 	                            layout-style="position: absolute; top: 0; bottom: 0; left: 0; right: 0"/> 	                    </g> 	                    <g class="x-axis label-container"> 	                        <g layout-style="height: 0; width: 0"> 	                            <text class="label" dy="-0.5em"/> 	                        </g> 	                    </g> 	                    <g class="y-axis label-container"> 	                        <g layout-style="height: 0; width: 0"> 	                            <text class="label"/> 	                        </g> 	                    </g> 	                    <g class="title label-container"> 	                        <g layout-style="height: 0; width: 0"> 	                            <text class="label"/> 	                        </g> 	                    </g>');var v=G(i);p.select(".plot-area-container").layout({position:"absolute",top:v.top,left:v.left,bottom:v.bottom,right:v.right}),p.select(".title").layout({position:"absolute",top:0,alignItems:"center",left:v.left,right:v.right});var y={position:"absolute",top:v.top,bottom:v.bottom,alignItems:"center",flexDirection:"row"};y[d.orient()]=0,p.select(".y-axis.label-container").attr("class","y-axis label-container "+d.orient()).layout(y);var m={position:"absolute",left:v.left,right:v.right,alignItems:"center"};m[h.orient()]=0,p.select(".x-axis.label-container").attr("class","x-axis label-container "+h.orient()).layout(m),c.layout(),p.select(".title .label").text(l),p.select(".y-axis.label-container .label").text(u).attr("transform","right"===d.orient()?"rotate(90)":"rotate(-90)"),p.select(".x-axis.label-container .label").text(a);var b=p.select(".plot-area");j(t,[0,b.layout("width")]),j(e,[b.layout("height"),0]),h.xScale(t).yScale(n.scale.identity()),d.yScale(e).xScale(n.scale.identity()),p.select(".axes-container .x-axis").call(h),p.select(".axes-container .y-axis").call(d),f.xScale(t).yScale(e),b.call(f),s(p,r,o)})};r(t,"x"),r(e,"y");var v=["baseline","xScale","yScale"];return z(p,h,"x",v),z(p,d,"y",v),p.xBaseline=function(t){return arguments.length?(o=n.functor(t),p):o},p.yBaseline=function(t){return arguments.length?(c=n.functor(t),p):c},p.chartLabel=function(t){return arguments.length?(l=t,p):l},p.plotArea=function(t){return arguments.length?(f=t,p):f},p.xLabel=function(t){return arguments.length?(a=t,p):a},p.margin=function(t){return arguments.length?(i=t,p):i},p.yLabel=function(t){return arguments.length?(u=t,p):u},p.decorate=function(t){return arguments.length?(s=t,p):s},p}function kn(){var t=st(),n=st(),e=U,r=U,i=q().selector("line.x").element("line").attr("class","x gridline"),u=q().selector("line.y").element("line").attr("class","y gridline"),a=function(a){
a.each(function(a,o){var c=t.scale(),l=n.scale(),f=t(),s=i(this,f);s.attr({x1:c,x2:c,y1:V(l)[0],y2:V(l)[1]}),e(s,f,o);var h=n(),d=u(this,h);d.attr({x1:V(c)[0],x2:V(c)[1],y1:l,y2:l}),r(d,h,o)})};return a.yDecorate=function(t){return arguments.length?(r=t,a):r},a.xDecorate=function(t){return arguments.length?(e=t,a):e},C(a,i,{xKey:"key"}),C(a,u,{yKey:"key"}),z(a,t,"x"),z(a,n,"y"),a}function _n(){var t,e,r,i,u=n.time.scale(),a=n.scale.linear(),o=function(){return V(u)[0]},c=function(){return V(u)[1]},l=function(){return V(a)[0]},f=function(){return V(a)[1]},s=U,h=q().selector("g.annotation").element("g").attr("class","annotation"),d=function(t){t.each(function(t,e){var r=n.select(this),i=h(r,t);i.enter().append("path").classed("band",!0);var u=ft().horizontalAlign("right").verticalAlign("top").x(o).y(l).height(function(){return f.apply(this,arguments)-l.apply(this,arguments)}).width(function(){return c.apply(this,arguments)-o.apply(this,arguments)});i.select("path").attr("d",function(t,n){return u.call(this,[t],n)}),s(i,t,e)})};return d.xScale=function(t){return arguments.length?(u=t,d):u},d.yScale=function(t){return arguments.length?(a=t,d):a},d.decorate=function(t){return arguments.length?(s=t,d):s},d.x0=function(e){return arguments.length?(t=n.functor(e),o=function(){return u(t.apply(this,arguments))},d):t},d.x1=function(t){return arguments.length?(e=n.functor(t),c=function(){return u(e.apply(this,arguments))},d):e},d.y0=function(t){return arguments.length?(r=n.functor(t),l=function(){return a(r.apply(this,arguments))},d):r},d.y1=function(t){return arguments.length?(i=n.functor(t),f=function(){return a(i.apply(this,arguments))},d):i},d}t="default"in t?t["default"]:t,n="default"in n?n["default"]:n;var Tn={get randomItem(){return x},get randomIndex(){return M},get cloneAndReplace(){return w}},Nn={get isOrdinal(){return L},get range(){return V},get setRange(){return j}},An={get context(){return F},get identity(){return P},get index(){return O},get noop(){return U},get defined(){return H}};n.selection.prototype.layoutSuspended=s,n.transition.prototype.layoutSuspended=s,n.selection.prototype.layout=h,n.transition.prototype.layout=h;var En={boundingBox:E,greedy:A,local:N,annealing:T,removeOverlaps:b},Cn=1e-6,Dn={rectangles:Y,strategy:En},zn={dataJoin:q,expandRect:G,extent:$,fn:An,minimum:d,fractionalBarWidth:Z,innerDimensions:r,rebind:C,rebindAll:z,scale:Nn,noSnap:I,pointSnap:W,seriesPointSnap:B,seriesPointSnapXOnly:X,seriesPointSnapYOnly:J,render:R,array:Tn},Ln={crosshair:ut,fibonacciFan:tt,container:K,measure:Q},Vn={axis:ht,bar:ft,candlestick:lt,ohlc:ct,errorBar:ot,boxPlot:at},jn={waterfall:dt},Fn={area:_t,bar:St,stack:xt,line:wt},Pn={area:kt,axis:Et,bar:gt,candlestick:At,cycle:Nt,line:Mt,multi:nt,ohlc:Tt,point:it,stacked:Fn,groupedBar:bt,xyBase:rt,ohlcBase:mt,errorBar:yt,boxPlot:vt,waterfall:pt,algorithm:jn};Lt.tickTransformer=Dt;var On={discontinuity:{identity:Ct,skipWeekends:Vt},dateTime:Lt},Un={bollingerBands:qt,macd:Ht,relativeStrengthIndex:Ut,stochasticOscillator:Ot,forceIndex:Pt,envelope:Ft,elderRay:jt},Hn={bollingerBands:cn,exponentialMovingAverage:It,macd:rn,percentageChange:on,relativeStrengthIndex:tn,stochasticOscillator:Qt,slidingWindow:Yt,undefinedInputAdapter:Xt,forceIndex:$t,envelope:Jt,elderRay:Wt},qn={bollingerBands:ln,calculator:Hn,exponentialMovingAverage:an,macd:un,merge:Rt,movingAverage:en,relativeStrengthIndex:nn,stochasticOscillator:Kt,forceIndex:Gt,envelope:Zt,elderRay:Bt},Yn={algorithm:qn,renderer:Un},Rn={modeMedian:dn,largestTriangleThreeBucket:hn,largestTriangleOneBucket:sn,bucket:fn},In={filter:{skipWeekends:yn},financial:vn,walk:pn},Wn={coinbase:bn,quandl:mn},Bn={feed:Wn,random:In,spread:gn,sampler:Rn},Xn={cartesian:Sn,sparkline:wn,tooltip:Mn,smallMultiples:xn},Jn={band:_n,gridline:kn,line:et},Zn="7.0.0",$n={annotation:Jn,chart:Xn,data:Bn,indicator:Yn,scale:On,series:Pn,svg:Vn,tool:Ln,util:zn,version:Zn,layout:Dn};return $n})},function(t,n,e){!function(t,e){e(n)}(this,function(t){"use strict";function n(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function e(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function r(){}function i(t){var n;return t=(t+"").trim().toLowerCase(),(n=C.exec(t))?(n=parseInt(n[1],16),new l(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1)):(n=D.exec(t))?u(parseInt(n[1],16)):(n=z.exec(t))?new l(n[1],n[2],n[3],1):(n=L.exec(t))?new l(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=V.exec(t))?a(n[1],n[2],n[3],n[4]):(n=j.exec(t))?a(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=F.exec(t))?f(n[1],n[2]/100,n[3]/100,1):(n=P.exec(t))?f(n[1],n[2]/100,n[3]/100,n[4]):O.hasOwnProperty(t)?u(O[t]):"transparent"===t?new l(NaN,NaN,NaN,0):null}function u(t){return new l(t>>16&255,t>>8&255,255&t,1)}function a(t,n,e,r){return 0>=r&&(t=n=e=NaN),new l(t,n,e,r)}function o(t){return t instanceof r||(t=i(t)),t?(t=t.rgb(),new l(t.r,t.g,t.b,t.opacity)):new l}function c(t,n,e,r){return 1===arguments.length?o(t):new l(t,n,e,null==r?1:r)}function l(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function f(t,n,e,r){return 0>=r?t=n=e=NaN:0>=e||e>=1?t=n=NaN:0>=n&&(t=NaN),new d(t,n,e,r)}function s(t){if(t instanceof d)return new d(t.h,t.s,t.l,t.opacity);if(t instanceof r||(t=i(t)),!t)return new d;if(t instanceof d)return t;t=t.rgb();var n=t.r/255,e=t.g/255,u=t.b/255,a=Math.min(n,e,u),o=Math.max(n,e,u),c=NaN,l=o-a,f=(o+a)/2;return l?(c=n===o?(e-u)/l+6*(u>e):e===o?(u-n)/l+2:(n-e)/l+4,l/=.5>f?o+a:2-o-a,c*=60):l=f>0&&1>f?0:c,new d(c,l,f,t.opacity)}function h(t,n,e,r){return 1===arguments.length?s(t):new d(t,n,e,null==r?1:r)}function d(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function g(t,n,e){return 255*(60>t?n+(e-n)*t/60:180>t?e:240>t?n+(e-n)*(240-t)/60:n)}function p(t){if(t instanceof y)return new y(t.l,t.a,t.b,t.opacity);if(t instanceof k){var n=t.h*U;return new y(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof l||(t=o(t));var e=M(t.r),r=M(t.g),i=M(t.b),u=m((.4124564*e+.3575761*r+.1804375*i)/Y),a=m((.2126729*e+.7151522*r+.072175*i)/R),c=m((.0193339*e+.119192*r+.9503041*i)/I);return new y(116*a-16,500*(u-a),200*(a-c),t.opacity)}function v(t,n,e,r){return 1===arguments.length?p(t):new y(t,n,e,null==r?1:r)}function y(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function m(t){return t>J?Math.pow(t,1/3):t/X+W}function b(t){return t>B?t*t*t:X*(t-W)}function x(t){return 255*(.0031308>=t?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function M(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function w(t){if(t instanceof k)return new k(t.h,t.c,t.l,t.opacity);t instanceof y||(t=p(t));var n=Math.atan2(t.b,t.a)*H;return new k(0>n?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function S(t,n,e,r){return 1===arguments.length?w(t):new k(t,n,e,null==r?1:r)}function k(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function _(t){if(t instanceof N)return new N(t.h,t.s,t.l,t.opacity);t instanceof l||(t=o(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(et*r+tt*n-nt*e)/(et+tt-nt),u=r-i,a=(K*(e-i)-G*u)/Q,c=Math.sqrt(a*a+u*u)/(K*i*(1-i)),f=c?Math.atan2(a,u)*H-120:NaN;return new N(0>f?f+360:f,c,i,t.opacity)}function T(t,n,e,r){return 1===arguments.length?_(t):new N(t,n,e,null==r?1:r)}function N(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}var A=.7,E=1/A,C=/^#([0-9a-f]{3})$/,D=/^#([0-9a-f]{6})$/,z=/^rgb\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*\)$/,L=/^rgb\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/,V=/^rgba\(\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+)\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/,j=/^rgba\(\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/,F=/^hsl\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*\)$/,P=/^hsla\(\s*([-+]?\d+(?:\.\d+)?)\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)%\s*,\s*([-+]?\d+(?:\.\d+)?)\s*\)$/,O={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};n(r,i,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),n(l,c,e(r,{brighter:function(t){return t=null==t?E:Math.pow(E,t),new l(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?A:Math.pow(A,t),new l(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),n(d,h,e(r,{brighter:function(t){return t=null==t?E:Math.pow(E,t),new d(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?A:Math.pow(A,t),new d(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(.5>e?e:1-e)*n,i=2*e-r;return new l(g(t>=240?t-240:t+120,i,r),g(t,i,r),g(120>t?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var U=Math.PI/180,H=180/Math.PI,q=18,Y=.95047,R=1,I=1.08883,W=4/29,B=6/29,X=3*B*B,J=B*B*B;n(y,v,e(r,{brighter:function(t){return new y(this.l+q*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new y(this.l-q*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=R*b(t),n=Y*b(n),e=I*b(e),new l(x(3.2404542*n-1.5371385*t-.4985314*e),x(-.969266*n+1.8760108*t+.041556*e),x(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),n(k,S,e(r,{brighter:function(t){return new k(this.h,this.c,this.l+q*(null==t?1:t),this.opacity)},darker:function(t){return new k(this.h,this.c,this.l-q*(null==t?1:t),this.opacity)},rgb:function(){return p(this).rgb()}}));var Z=-.14861,$=1.78277,G=-.29227,Q=-.90649,K=1.97294,tt=K*Q,nt=K*$,et=$*G-Q*Z;n(N,T,e(r,{brighter:function(t){return t=null==t?E:Math.pow(E,t),new N(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?A:Math.pow(A,t),new N(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*U,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new l(255*(n+e*(Z*r+$*i)),255*(n+e*(G*r+Q*i)),255*(n+e*(K*r)),this.opacity)}}));var rt="0.4.2";t.version=rt,t.color=i,t.rgb=c,t.hsl=h,t.lab=v,t.hcl=S,t.cubehelix=T})},function(t,n,e){!function(t,e){e(n)}(this,function(t){"use strict";function n(t,e,r,a){function o(n){return t(n=new Date(+n)),n}return o.floor=o,o.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},o.round=function(t){var n=o(t),e=o.ceil(t);return e-t>t-n?n:e},o.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},o.range=function(n,r,i){var u=[];if(n=o.ceil(n),i=null==i?1:Math.floor(i),!(r>n&&i>0))return u;do u.push(new Date(+n));while(e(n,i),t(n),r>n);return u},o.filter=function(r){return n(function(n){for(;t(n),!r(n);)n.setTime(n-1)},function(t,n){for(;--n>=0;)for(;e(t,1),!r(t););})},r&&(o.count=function(n,e){return i.setTime(+n),u.setTime(+e),t(i),t(u),Math.floor(r(i,u))},o.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?o.filter(a?function(n){return a(n)%t===0}:function(n){return o.count(0,n)%t===0}):o:null}),o}function e(t){return n(function(n){n.setHours(0,0,0,0),n.setDate(n.getDate()-(n.getDay()+7-t)%7)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*c)/s})}function r(t){return n(function(n){n.setUTCHours(0,0,0,0),n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/s})}var i=new Date,u=new Date,a=n(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?n(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):a:null};var o=1e3,c=6e4,l=36e5,f=864e5,s=6048e5,h=n(function(t){t.setTime(Math.floor(t/o)*o)},function(t,n){t.setTime(+t+n*o)},function(t,n){return(n-t)/o},function(t){return t.getUTCSeconds()}),d=n(function(t){t.setTime(Math.floor(t/c)*c)},function(t,n){t.setTime(+t+n*c)},function(t,n){return(n-t)/c},function(t){return t.getMinutes()}),g=n(function(t){var n=t.getTimezoneOffset()*c%l;0>n&&(n+=l),t.setTime(Math.floor((+t-n)/l)*l+n)},function(t,n){t.setTime(+t+n*l)},function(t,n){return(n-t)/l},function(t){return t.getHours()}),p=n(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*c)/f},function(t){return t.getDate()-1}),v=e(0),y=e(1),m=e(2),b=e(3),x=e(4),M=e(5),w=e(6),S=n(function(t){t.setHours(0,0,0,0),t.setDate(1)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),k=n(function(t){t.setHours(0,0,0,0),t.setMonth(0,1)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}),_=n(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*c)},function(t,n){return(n-t)/c},function(t){return t.getUTCMinutes()}),T=n(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+n*l)},function(t,n){return(n-t)/l},function(t){return t.getUTCHours()}),N=n(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/f},function(t){return t.getUTCDate()-1}),A=r(0),E=r(1),C=r(2),D=r(3),z=r(4),L=r(5),V=r(6),j=n(function(t){t.setUTCHours(0,0,0,0),t.setUTCDate(1)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),F=n(function(t){t.setUTCHours(0,0,0,0),t.setUTCMonth(0,1)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}),P=a.range,O=h.range,U=d.range,H=g.range,q=p.range,Y=v.range,R=y.range,I=m.range,W=b.range,B=x.range,X=M.range,J=w.range,Z=v.range,$=S.range,G=k.range,Q=a,K=P,tt=h,nt=O,et=_.range,rt=T.range,it=N.range,ut=A.range,at=E.range,ot=C.range,ct=D.range,lt=z.range,ft=L.range,st=V.range,ht=A.range,dt=j.range,gt=F.range,pt="0.2.5";t.version=pt,t.timeMilliseconds=P,t.timeSeconds=O,t.timeMinutes=U,t.timeHours=H,t.timeDays=q,t.timeSundays=Y,t.timeMondays=R,t.timeTuesdays=I,t.timeWednesdays=W,t.timeThursdays=B,t.timeFridays=X,t.timeSaturdays=J,t.timeWeeks=Z,t.timeMonths=$,t.timeYears=G,t.utcMillisecond=Q,t.utcMilliseconds=K,t.utcSecond=tt,t.utcSeconds=nt,t.utcMinutes=et,t.utcHours=rt,t.utcDays=it,t.utcSundays=ut,t.utcMondays=at,t.utcTuesdays=ot,t.utcWednesdays=ct,t.utcThursdays=lt,t.utcFridays=ft,t.utcSaturdays=st,t.utcWeeks=ht,t.utcMonths=dt,t.utcYears=gt,t.timeMillisecond=a,t.timeSecond=h,t.timeMinute=d,t.timeHour=g,t.timeDay=p,t.timeSunday=v,t.timeMonday=y,t.timeTuesday=m,t.timeWednesday=b,t.timeThursday=x,t.timeFriday=M,t.timeSaturday=w,t.timeWeek=v,t.timeMonth=S,t.timeYear=k,t.utcMinute=_,t.utcHour=T,t.utcDay=N,t.utcSunday=A,t.utcMonday=E,t.utcTuesday=C,t.utcWednesday=D,t.utcThursday=z,t.utcFriday=L,t.utcSaturday=V,t.utcWeek=A,t.utcMonth=j,t.utcYear=F,t.timeInterval=n})},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(n,"__esModule",{value:!0}),n["default"]=function(){function t(t,n,e){var r=e.getContext("2d");n.context(r),e.width=e.width,r.beginPath(),n(t.up),r.strokeStyle="#52CA52",r.stroke(),r.closePath(),r.beginPath(),n(t.down),r.strokeStyle="#E6443B",r.stroke(),r.closePath()}function n(t,n,e){n.context(null),c["default"].select(e).select("path.up").datum(t.up).attr("d",n),c["default"].select(e).select("path.down").datum(t.down).attr("d",n)}var e=c["default"].scale.identity(),r=c["default"].scale.identity(),u=(0,i.candlestick)().x(function(t,n){return e(t.date)}).open(function(t){return r(t.open)}).high(function(t){return r(t.high)}).low(function(t){return r(t.low)}).close(function(t){return r(t.close)}),o=function(i){i.each(function(i){var o=this,l=c["default"].dispatch("zoom"),f=c["default"].behavior.zoom().x(e).y(r).on("zoom",function(){l.zoom.call(this,e.domain(),r.domain()),s()});c["default"].select(o).call(f);var s=a["default"].util.render(function(){o.getContext?t(i,u,o):n(i,u,o)});s()})};return o.xScale=function(t){return t?(e=t,o):e},o.yScale=function(t){return t?(r=t,o):r},o};var i=e(15),u=e(1),a=r(u),o=e(0),c=r(o)},function(t,n,e){!function(t,r){r(n,e(9),e(10),e(12),e(11),e(3),e(14),e(2))}(this,function(t,n,e,r,i,u,a,o){"use strict";function c(){function t(t){var e=t+"",a=n.get(e);if(!a){if(u!==ot)return u;n.set(e,a=r.push(t))}return i[(a-1)%i.length]}var n=e.map(),r=[],i=[],u=ot;return t.domain=function(i){if(!arguments.length)return r.slice();r=[],n=e.map();for(var u,a,o=-1,c=i.length;++o<c;)n.has(a=(u=i[o])+"")||n.set(a,r.push(u));return t},t.range=function(n){return arguments.length?(i=at.call(n),t):i.slice()},t.unknown=function(n){return arguments.length?(u=n,t):u},t.copy=function(){return c().domain(r).range(i).unknown(u)},t}function l(){function t(){var t=u().length,i=o[1]<o[0],c=o[i-0],l=o[1-i];e=(l-c)/Math.max(1,t-s+2*h),f&&(e=Math.floor(e)),c+=(l-c-e*(t-s))*d,r=e*(1-s),f&&(c=Math.round(c),r=Math.round(r));var g=n.range(t).map(function(t){return c+e*t});return a(i?g.reverse():g)}var e,r,i=c().unknown(void 0),u=i.domain,a=i.range,o=[0,1],f=!1,s=0,h=0,d=.5;return delete i.unknown,i.domain=function(n){return arguments.length?(u(n),t()):u()},i.range=function(n){return arguments.length?(o=[+n[0],+n[1]],t()):o.slice()},i.rangeRound=function(n){return o=[+n[0],+n[1]],f=!0,t()},i.bandwidth=function(){return r},i.step=function(){return e},i.round=function(n){return arguments.length?(f=!!n,t()):f},i.padding=function(n){return arguments.length?(s=h=Math.max(0,Math.min(1,n)),t()):s},i.paddingInner=function(n){return arguments.length?(s=Math.max(0,Math.min(1,n)),t()):s},i.paddingOuter=function(n){return arguments.length?(h=Math.max(0,Math.min(1,n)),t()):h},i.align=function(n){return arguments.length?(d=Math.max(0,Math.min(1,n)),t()):d},i.copy=function(){return l().domain(u()).range(o).round(f).paddingInner(s).paddingOuter(h).align(d)},t()}function f(t){var n=t.copy;return t.padding=t.paddingOuter,delete t.paddingInner,delete t.paddingOuter,t.copy=function(){return f(n())},t}function s(){return f(l().paddingInner(1))}function h(t){return function(){return t}}function d(t){return+t}function g(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:h(n)}function p(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return n>=t?0:t>=e?1:r(t)}}}function v(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return 0>=t?n:t>=1?e:r(t)}}}function y(t,n,e,r){var i=t[0],u=t[1],a=n[0],o=n[1];return i>u?(i=e(u,i),a=r(o,a)):(i=e(i,u),a=r(a,o)),function(t){return a(i(t))}}function m(t,e,r,i){var u=Math.min(t.length,e.length)-1,a=new Array(u),o=new Array(u),c=-1;for(t[u]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++c<u;)a[c]=r(t[c],t[c+1]),o[c]=i(e[c],e[c+1]);return function(e){var r=n.bisect(t,e,1,u)-1;return o[r](a[r](e))}}function b(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function x(t,n){function e(){var e=Math.min(o.length,c.length)>2?m:y;return u=e(o,c,f?p(t):t,l),a=e(c,o,g,f?v(n):n),i}function i(t){return u(+t)}var u,a,o=ct,c=ct,l=r.interpolate,f=!1;return i.invert=function(t){return a(+t)},i.domain=function(t){return arguments.length?(o=ut.call(t,d),e()):o.slice()},i.range=function(t){return arguments.length?(c=at.call(t),e()):c.slice()},i.rangeRound=function(t){return c=at.call(t),l=r.interpolateRound,e()},i.clamp=function(t){return arguments.length?(f=!!t,e()):f},i.interpolate=function(t){return arguments.length?(l=t,e()):l},e()}function M(t,e,r){var u,a=t[0],o=t[t.length-1],c=n.tickStep(a,o,null==e?10:e);switch(r=i.formatSpecifier(null==r?",f":r),r.type){case"s":var l=Math.max(Math.abs(a),Math.abs(o));return null!=r.precision||isNaN(u=i.precisionPrefix(c,l))||(r.precision=u),i.formatPrefix(r,l);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(u=i.precisionRound(c,Math.max(Math.abs(a),Math.abs(o))))||(r.precision=u-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(u=i.precisionFixed(c))||(r.precision=u-2*("%"===r.type))}return i.format(r)}function w(t){var e=t.domain;return t.ticks=function(t){var r=e();return n.ticks(r[0],r[r.length-1],null==t?10:t)},t.tickFormat=function(t,n){return M(e(),t,n)},t.nice=function(r){var i=e(),u=i.length-1,a=null==r?10:r,o=i[0],c=i[u],l=n.tickStep(o,c,a);return l&&(l=n.tickStep(Math.floor(o/l)*l,Math.ceil(c/l)*l,a),i[0]=Math.floor(o/l)*l,i[u]=Math.ceil(c/l)*l,e(i)),t},t}function S(){var t=x(g,r.interpolateNumber);return t.copy=function(){return b(t,S())},w(t)}function k(){function t(t){return+t}var n=[0,1];return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=ut.call(e,d),t):n.slice()},t.copy=function(){return k().domain(n)},w(t)}function _(t,n){t=t.slice();var e,r=0,i=t.length-1,u=t[r],a=t[i];return u>a&&(e=r,r=i,i=e,e=u,u=a,a=e),t[r]=n.floor(u),t[i]=n.ceil(a),t}function T(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:h(n)}function N(t,n){return 0>t?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function A(t){return isFinite(t)?+("1e"+t):0>t?0:t}function E(t){return 10===t?A:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function C(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function D(t){return function(n){return-t(-n)}}function z(){function t(){return a=C(u),o=E(u),r()[0]<0&&(a=D(a),o=D(o)),e}var e=x(T,N).domain([1,10]),r=e.domain,u=10,a=C(10),o=E(10);return e.base=function(n){return arguments.length?(u=+n,t()):u},e.domain=function(n){return arguments.length?(r(n),t()):r()},e.ticks=function(t){var e,i=r(),c=i[0],l=i[i.length-1];(e=c>l)&&(d=c,c=l,l=d);var f,s,h,d=a(c),g=a(l),p=null==t?10:+t,v=[];if(!(u%1)&&p>g-d){if(d=Math.round(d)-1,g=Math.round(g)+1,c>0){for(;g>d;++d)for(s=1,f=o(d);u>s;++s)if(h=f*s,!(c>h)){if(h>l)break;v.push(h)}}else for(;g>d;++d)for(s=u-1,f=o(d);s>=1;--s)if(h=f*s,!(c>h)){if(h>l)break;v.push(h)}e&&v.reverse()}else v=n.ticks(d,g,Math.min(g-d,p)).map(o);return v},e.tickFormat=function(t,n){if(null==n&&(n=10===u?".0e":","),"function"!=typeof n&&(n=i.format(n)),t===1/0)return n;null==t&&(t=10);var r=Math.max(1,u*t/e.ticks().length);return function(t){var e=t/o(Math.round(a(t)));return u-.5>e*u&&(e*=u),r>=e?n(t):""}},e.nice=function(){return r(_(r(),{floor:function(t){return o(Math.floor(a(t)))},ceil:function(t){return o(Math.ceil(a(t)))}}))},e.copy=function(){return b(e,z().base(u))},e}function L(t,n){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}function V(){function t(t,n){return(n=L(n,e)-(t=L(t,e)))?function(r){return(L(r,e)-t)/n}:h(n)}function n(t,n){return n=L(n,e)-(t=L(t,e)),function(r){return L(t+n*r,1/e)}}var e=1,r=x(t,n),i=r.domain;return r.exponent=function(t){return arguments.length?(e=+t,i(i())):e},r.copy=function(){return b(r,V().exponent(e))},w(r)}function j(){return V().exponent(.5)}function F(){function t(){var t=0,a=Math.max(1,i.length);for(u=new Array(a-1);++t<a;)u[t-1]=n.quantile(r,t/a);return e}function e(t){return isNaN(t=+t)?void 0:i[n.bisect(u,t)]}var r=[],i=[],u=[];return e.invertExtent=function(t){var n=i.indexOf(t);return 0>n?[NaN,NaN]:[n>0?u[n-1]:r[0],n<u.length?u[n]:r[r.length-1]]},e.domain=function(e){if(!arguments.length)return r.slice();r=[];for(var i,u=0,a=e.length;a>u;++u)i=e[u],null==i||isNaN(i=+i)||r.push(i);return r.sort(n.ascending),t()},e.range=function(n){return arguments.length?(i=at.call(n),t()):i.slice()},e.quantiles=function(){return u.slice()},e.copy=function(){return F().domain(r).range(i)},e}function P(){function t(t){return t>=t?o[n.bisect(a,t,0,u)]:void 0}function e(){var n=-1;for(a=new Array(u);++n<u;)a[n]=((n+1)*i-(n-u)*r)/(u+1);return t}var r=0,i=1,u=1,a=[.5],o=[0,1];return t.domain=function(t){return arguments.length?(r=+t[0],i=+t[1],e()):[r,i]},t.range=function(t){return arguments.length?(u=(o=at.call(t)).length-1,e()):o.slice()},t.invertExtent=function(t){var n=o.indexOf(t);return 0>n?[NaN,NaN]:1>n?[r,a[0]]:n>=u?[a[u-1],i]:[a[n-1],a[n]]},t.copy=function(){return P().domain([r,i]).range(o)},w(t)}function O(){function t(t){return t>=t?r[n.bisect(e,t,0,i)]:void 0}var e=[.5],r=[0,1],i=1;return t.domain=function(n){return arguments.length?(e=at.call(n),i=Math.min(e.length,r.length-1),t):e.slice()},t.range=function(n){return arguments.length?(r=at.call(n),i=Math.min(e.length,r.length-1),t):r.slice()},t.invertExtent=function(t){var n=r.indexOf(t);return[e[n-1],e[n]]},t.copy=function(){return O().domain(e).range(r)},t}function U(t){return new Date(t)}function H(t,e,i,u,a,o,c,l,f){function s(n){return(c(n)<n?y:o(n)<n?m:a(n)<n?M:u(n)<n?w:e(n)<n?i(n)<n?S:k:t(n)<n?T:N)(n)}function h(e,r,i,u){if(null==e&&(e=10),"number"==typeof e){var a=Math.abs(i-r)/e,o=n.bisector(function(t){return t[2]}).right(A,a);o===A.length?(u=n.tickStep(r/pt,i/pt,e),e=t):o?(o=A[a/A[o-1][2]<A[o][2]/a?o-1:o],u=o[1],e=o[0]):(u=n.tickStep(r,i,e),e=l)}return null==u?e:e.every(u)}var d=x(g,r.interpolateNumber),p=d.invert,v=d.domain,y=f(".%L"),m=f(":%S"),M=f("%I:%M"),w=f("%I %p"),S=f("%a %d"),k=f("%b %d"),T=f("%B"),N=f("%Y"),A=[[c,1,lt],[c,5,5*lt],[c,15,15*lt],[c,30,30*lt],[o,1,ft],[o,5,5*ft],[o,15,15*ft],[o,30,30*ft],[a,1,st],[a,3,3*st],[a,6,6*st],[a,12,12*st],[u,1,ht],[u,2,2*ht],[i,1,dt],[e,1,gt],[e,3,3*gt],[t,1,pt]];return d.invert=function(t){return new Date(p(t))},d.domain=function(t){return arguments.length?v(t):v().map(U)},d.ticks=function(t,n){var e,r=v(),i=r[0],u=r[r.length-1],a=i>u;return a&&(e=i,i=u,u=e),e=h(t,i,u,n),e=e?e.range(i,u+1):[],a?e.reverse():e},d.tickFormat=function(t){return null==t?s:f(t)},d.nice=function(t,n){var e=v();return(t=h(t,e[0],e[e.length-1],n))?v(_(e,t)):d},d.copy=function(){return b(d,H(t,e,i,u,a,o,c,l,f))},d}function q(){return H(u.timeYear,u.timeMonth,u.timeWeek,u.timeDay,u.timeHour,u.timeMinute,u.timeSecond,u.timeMillisecond,a.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])}function Y(){return H(u.utcYear,u.utcMonth,u.utcWeek,u.utcDay,u.utcHour,u.utcMinute,u.utcSecond,u.utcMillisecond,a.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])}function R(t){return t.match(/.{6}/g).map(function(t){return"#"+t})}function I(){return c().range(vt)}function W(){return c().range(yt)}function B(){return c().range(mt)}function X(){return c().range(bt)}function J(){return S().interpolate(r.interpolateCubehelixLong).range([o.cubehelix(300,.5,0),o.cubehelix(-240,.5,1)])}function Z(t){function n(n){var u=(n-e)/(r-e);return t(i?Math.max(0,Math.min(1,u)):u)}var e=0,r=1,i=!1;return n.domain=function(t){return arguments.length?(e=+t[0],r=+t[1],n):[e,r]},n.clamp=function(t){return arguments.length?(i=!!t,n):i},n.copy=function(){return Z(t).domain([e,r]).clamp(i)},w(n)}function $(){return Z(r.interpolateCubehelixLong(o.cubehelix(-100,.75,.35),o.cubehelix(80,1.5,.8)))}function G(){return Z(r.interpolateCubehelixLong(o.cubehelix(260,.75,.35),o.cubehelix(80,1.5,.8)))}function Q(){var t=o.cubehelix();return Z(function(n){(0>n||n>1)&&(n-=Math.floor(n));var e=Math.abs(n-.5);return t.h=360*n-100,t.s=1.5-1.5*e,t.l=.8-.9*e,t+""})}function K(t){var n=Z(function(n){return t[Math.round(n*t.length-n)]}).clamp(!0);return delete n.clamp,n}function tt(){return K(xt)}function nt(){return K(Mt)}function et(){return K(wt)}function rt(){return K(St)}var it=Array.prototype,ut=it.map,at=it.slice,ot={name:"implicit"},ct=[0,1],lt=1e3,ft=60*lt,st=60*ft,ht=24*st,dt=7*ht,gt=30*ht,pt=365*ht,vt=R("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),yt=R("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),mt=R("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),bt=R("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),xt=R("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"),Mt=R("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"),wt=R("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"),St=R("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"),kt="0.6.4";
t.version=kt,t.scaleBand=l,t.scalePoint=s,t.scaleIdentity=k,t.scaleLinear=S,t.scaleLog=z,t.scaleOrdinal=c,t.scaleImplicit=ot,t.scalePow=V,t.scaleSqrt=j,t.scaleQuantile=F,t.scaleQuantize=P,t.scaleThreshold=O,t.scaleTime=q,t.scaleUtc=Y,t.scaleCategory10=I,t.scaleCategory20b=W,t.scaleCategory20c=B,t.scaleCategory20=X,t.scaleCubehelix=J,t.scaleRainbow=Q,t.scaleWarm=$,t.scaleCool=G,t.scaleViridis=tt,t.scaleMagma=nt,t.scaleInferno=et,t.scalePlasma=rt})},function(t,n){},function(t,n,e){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}var i=e(1),u=r(i),a=e(0),o=r(a),c=e(5),l=e(4),f=r(l);e(6);var s=document.getElementById("canvas"),h=document.getElementById("svg"),d=document.getElementById("points");window.addEventListener("load",function(){function t(){var t=document.getElementById("charts").clientWidth,n=h.clientHeight;s.width=t,s.height=n,o["default"].select(svg).attr("width",t).attr("height",n),e(l),a.xScale(r).yScale(i),o["default"].selectAll(".chart").datum(l).call(a)}function n(t){var n=u["default"].data.random.financial().startDate(new Date(2014,1,1)),e=n(t);return{all:e,up:e.filter(function(t){return t.open<=t.close}),down:e.filter(function(t){return t.open>t.close})}}function e(t){var n=document.getElementById("charts").clientWidth,e=h.clientHeight;s.width=n,s.height=e,r.range([0,n]).domain(o["default"].extent(t.all,function(t,n){return t.date})),i.range([e,0]).domain(u["default"].util.extent().fields(["high","low"]).pad(.2)(t.all)).range([e,0])}o["default"].select(svg).append("path").attr("class","up"),o["default"].select(svg).append("path").attr("class","down");var r=(0,c.scaleTime)(),i=(0,c.scaleLinear)(),a=(0,f["default"])(),l=n(Number(d.value));t(),d.addEventListener("change",function(){l=n(Number(d.value)),t()}),window.addEventListener("resize",t)})},function(t,n,e){var r,i,u;!function(e,a){i=[],r=a,u="function"==typeof r?r.apply(n,i):r,!(void 0!==u&&(t.e=u))}(this,function(){var n=function(){function t(n){return n.layout&&!n.isDirty||(n.layout={width:void 0,height:void 0,top:0,left:0,right:0,bottom:0}),n.style||(n.style={}),n.children||(n.children=[]),n.children.forEach(t),n}function n(t){return void 0===t}function e(t){return t===q||t===Y}function r(t){return t===R||t===I}function i(t,n){if(void 0!==t.style.marginStart&&e(n))return t.style.marginStart;var r=null;switch(n){case"row":r=t.style.marginLeft;break;case"row-reverse":r=t.style.marginRight;break;case"column":r=t.style.marginTop;break;case"column-reverse":r=t.style.marginBottom}return void 0!==r?r:void 0!==t.style.margin?t.style.margin:0}function u(t,n){if(void 0!==t.style.marginEnd&&e(n))return t.style.marginEnd;var r=null;switch(n){case"row":r=t.style.marginRight;break;case"row-reverse":r=t.style.marginLeft;break;case"column":r=t.style.marginBottom;break;case"column-reverse":r=t.style.marginTop}return null!=r?r:void 0!==t.style.margin?t.style.margin:0}function a(t,n){if(void 0!==t.style.paddingStart&&t.style.paddingStart>=0&&e(n))return t.style.paddingStart;var r=null;switch(n){case"row":r=t.style.paddingLeft;break;case"row-reverse":r=t.style.paddingRight;break;case"column":r=t.style.paddingTop;break;case"column-reverse":r=t.style.paddingBottom}return null!=r&&r>=0?r:void 0!==t.style.padding&&t.style.padding>=0?t.style.padding:0}function o(t,n){if(void 0!==t.style.paddingEnd&&t.style.paddingEnd>=0&&e(n))return t.style.paddingEnd;var r=null;switch(n){case"row":r=t.style.paddingRight;break;case"row-reverse":r=t.style.paddingLeft;break;case"column":r=t.style.paddingBottom;break;case"column-reverse":r=t.style.paddingTop}return null!=r&&r>=0?r:void 0!==t.style.padding&&t.style.padding>=0?t.style.padding:0}function c(t,n){if(void 0!==t.style.borderStartWidth&&t.style.borderStartWidth>=0&&e(n))return t.style.borderStartWidth;var r=null;switch(n){case"row":r=t.style.borderLeftWidth;break;case"row-reverse":r=t.style.borderRightWidth;break;case"column":r=t.style.borderTopWidth;break;case"column-reverse":r=t.style.borderBottomWidth}return null!=r&&r>=0?r:void 0!==t.style.borderWidth&&t.style.borderWidth>=0?t.style.borderWidth:0}function l(t,n){if(void 0!==t.style.borderEndWidth&&t.style.borderEndWidth>=0&&e(n))return t.style.borderEndWidth;var r=null;switch(n){case"row":r=t.style.borderRightWidth;break;case"row-reverse":r=t.style.borderLeftWidth;break;case"column":r=t.style.borderBottomWidth;break;case"column-reverse":r=t.style.borderTopWidth}return null!=r&&r>=0?r:void 0!==t.style.borderWidth&&t.style.borderWidth>=0?t.style.borderWidth:0}function f(t,n){return a(t,n)+c(t,n)}function s(t,n){return o(t,n)+l(t,n)}function h(t,n){return c(t,n)+l(t,n)}function d(t,n){return i(t,n)+u(t,n)}function g(t,n){return f(t,n)+s(t,n)}function p(t){return t.style.justifyContent?t.style.justifyContent:"flex-start"}function v(t){return t.style.alignContent?t.style.alignContent:"flex-start"}function y(t,n){return n.style.alignSelf?n.style.alignSelf:t.style.alignItems?t.style.alignItems:"stretch"}function m(t,n){if(n===H){if(t===q)return Y;if(t===Y)return q}return t}function b(t,n){var e;return e=t.style.direction?t.style.direction:O,e===O&&(e=void 0===n?U:n),e}function x(t){return t.style.flexDirection?t.style.flexDirection:R}function M(t,n){return r(t)?m(q,n):R}function w(t){return t.style.position?t.style.position:"relative"}function S(t){return w(t)===tt&&t.style.flex>0}function k(t){return"wrap"===t.style.flexWrap}function _(t,n){return t.layout[ut[n]]+d(t,n)}function T(t,n){return void 0!==t.style[ut[n]]&&t.style[ut[n]]>=0}function N(t,n){return void 0!==t.style[n]}function A(t){return void 0!==t.style.measure}function E(t,n){return void 0!==t.style[n]?t.style[n]:0}function C(t,n,e){var r={row:t.style.minWidth,"row-reverse":t.style.minWidth,column:t.style.minHeight,"column-reverse":t.style.minHeight}[n],i={row:t.style.maxWidth,"row-reverse":t.style.maxWidth,column:t.style.maxHeight,"column-reverse":t.style.maxHeight}[n],u=e;return void 0!==i&&i>=0&&u>i&&(u=i),void 0!==r&&r>=0&&r>u&&(u=r),u}function D(t,n){return t>n?t:n}function z(t,n){void 0===t.layout[ut[n]]&&T(t,n)&&(t.layout[ut[n]]=D(C(t,n,t.style[ut[n]]),g(t,n)))}function L(t,n,e){n.layout[rt[e]]=t.layout[ut[e]]-n.layout[ut[e]]-n.layout[it[e]]}function V(t,n){return void 0!==t.style[et[n]]?E(t,et[n]):-E(t,rt[n])}function j(t,r,a){var o=b(t,a),l=m(x(t),o),j=M(l,o),O=m(q,o);z(t,l),z(t,j),t.layout.direction=o,t.layout[et[l]]+=i(t,l)+V(t,l),t.layout[rt[l]]+=u(t,l)+V(t,l),t.layout[et[j]]+=i(t,j)+V(t,j),t.layout[rt[j]]+=u(t,j)+V(t,j);var U=t.children.length,H=g(t,O);if(A(t)){var at=!n(t.layout[ut[O]]),ot=P;ot=T(t,O)?t.style.width:at?t.layout[ut[O]]:r-d(t,O),ot-=H;var ct=!T(t,O)&&!at,lt=!T(t,R)&&n(t.layout[ut[R]]);if(ct||lt){var ft=t.style.measure(ot);ct&&(t.layout.width=ft.width+H),lt&&(t.layout.height=ft.height+g(t,R))}if(0===U)return}var st,ht,dt,gt,pt=k(t),vt=p(t),yt=f(t,l),mt=f(t,j),bt=g(t,l),xt=g(t,j),Mt=!n(t.layout[ut[l]]),wt=!n(t.layout[ut[j]]),St=e(l),kt=null,_t=null,Tt=P;Mt&&(Tt=t.layout[ut[l]]-bt);for(var Nt=0,At=0,Et=0,Ct=0,Dt=0,zt=0;U>At;){var Lt,Vt=0,jt=0,Ft=0,Pt=0,Ot=Mt&&vt===W||!Mt&&vt!==B,Ut=Ot?U:Nt,Ht=!0,qt=U,Yt=null,Rt=null,It=yt,Wt=0;for(st=Nt;U>st;++st){dt=t.children[st],dt.lineIndex=zt,dt.nextAbsoluteChild=null,dt.nextFlexChild=null;var Bt=y(t,dt);if(Bt===K&&w(dt)===tt&&wt&&!T(dt,j))dt.layout[ut[j]]=D(C(dt,j,t.layout[ut[j]]-xt-d(dt,j)),g(dt,j));else if(w(dt)===nt)for(null===kt&&(kt=dt),null!==_t&&(_t.nextAbsoluteChild=dt),_t=dt,ht=0;2>ht;ht++)gt=0!==ht?q:R,!n(t.layout[ut[gt]])&&!T(dt,gt)&&N(dt,et[gt])&&N(dt,rt[gt])&&(dt.layout[ut[gt]]=D(C(dt,gt,t.layout[ut[gt]]-g(t,gt)-d(dt,gt)-E(dt,et[gt])-E(dt,rt[gt])),g(dt,gt)));var Xt=0;if(Mt&&S(dt)?(jt++,Ft+=dt.style.flex,null===Yt&&(Yt=dt),null!==Rt&&(Rt.nextFlexChild=dt),Rt=dt,Xt=g(dt,l)+d(dt,l)):(Lt=P,St||(Lt=T(t,O)?t.layout[ut[O]]-H:r-d(t,O)-H),0===Et&&F(dt,Lt,o),w(dt)===tt&&(Pt++,Xt=_(dt,l))),pt&&Mt&&Vt+Xt>Tt&&st!==Nt){Pt--,Et=1;break}Ot&&(w(dt)!==tt||S(dt))&&(Ot=!1,Ut=st),Ht&&(w(dt)!==tt||Bt!==K&&Bt!==$||n(dt.layout[ut[j]]))&&(Ht=!1,qt=st),Ot&&(dt.layout[it[l]]+=It,Mt&&L(t,dt,l),It+=_(dt,l),Wt=D(Wt,C(dt,j,_(dt,j)))),Ht&&(dt.layout[it[j]]+=Ct+mt,wt&&L(t,dt,j)),Et=0,Vt+=Xt,At=st+1}var Jt=0,Zt=0,$t=0;if($t=Mt?Tt-Vt:D(Vt,0)-Vt,0!==jt){var Gt,Qt,Kt=$t/Ft;for(Rt=Yt;null!==Rt;)Gt=Kt*Rt.style.flex+g(Rt,l),Qt=C(Rt,l,Gt),Gt!==Qt&&($t-=Qt,Ft-=Rt.style.flex),Rt=Rt.nextFlexChild;for(Kt=$t/Ft,0>Kt&&(Kt=0),Rt=Yt;null!==Rt;)Rt.layout[ut[l]]=C(Rt,l,Kt*Rt.style.flex+g(Rt,l)),Lt=P,T(t,O)?Lt=t.layout[ut[O]]-H:St||(Lt=r-d(t,O)-H),F(Rt,Lt,o),dt=Rt,Rt=Rt.nextFlexChild,dt.nextFlexChild=null}else vt!==W&&(vt===B?Jt=$t/2:vt===X?Jt=$t:vt===J?($t=D($t,0),Zt=jt+Pt-1!==0?$t/(jt+Pt-1):0):vt===Z&&(Zt=$t/(jt+Pt),Jt=Zt/2));for(It+=Jt,st=Ut;At>st;++st)dt=t.children[st],w(dt)===nt&&N(dt,et[l])?dt.layout[it[l]]=E(dt,et[l])+c(t,l)+i(dt,l):(dt.layout[it[l]]+=It,Mt&&L(t,dt,l),w(dt)===tt&&(It+=Zt+_(dt,l),Wt=D(Wt,C(dt,j,_(dt,j)))));var tn=t.layout[ut[j]];for(wt||(tn=D(C(t,j,Wt+xt),xt)),st=qt;At>st;++st)if(dt=t.children[st],w(dt)===nt&&N(dt,et[j]))dt.layout[it[j]]=E(dt,et[j])+c(t,j)+i(dt,j);else{var nn=mt;if(w(dt)===tt){var Bt=y(t,dt);if(Bt===K)n(dt.layout[ut[j]])&&(dt.layout[ut[j]]=D(C(dt,j,tn-xt-d(dt,j)),g(dt,j)));else if(Bt!==$){var en=tn-xt-_(dt,j);nn+=Bt===G?en/2:en}}dt.layout[it[j]]+=Ct+nn,wt&&L(t,dt,j)}Ct+=Wt,Dt=D(Dt,It),zt+=1,Nt=At}if(zt>1&&wt){var rn=t.layout[ut[j]]-xt,un=rn-Ct,an=0,on=mt,cn=v(t);cn===Q?on+=un:cn===G?on+=un/2:cn===K&&rn>Ct&&(an=un/zt);var ln=0;for(st=0;zt>st;++st){var fn=ln,sn=0;for(ht=fn;U>ht;++ht)if(dt=t.children[ht],w(dt)===tt){if(dt.lineIndex!==st)break;n(dt.layout[ut[j]])||(sn=D(sn,dt.layout[ut[j]]+d(dt,j)))}for(ln=ht,sn+=an,ht=fn;ln>ht;++ht)if(dt=t.children[ht],w(dt)===tt){var hn=y(t,dt);if(hn===$)dt.layout[it[j]]=on+i(dt,j);else if(hn===Q)dt.layout[it[j]]=on+sn-u(dt,j)-dt.layout[ut[j]];else if(hn===G){var dn=dt.layout[ut[j]];dt.layout[it[j]]=on+(sn-dn)/2}else hn===K&&(dt.layout[it[j]]=on+i(dt,j))}on+=sn}}var gn=!1,pn=!1;if(Mt||(t.layout[ut[l]]=D(C(t,l,Dt+s(t,l)),bt),l!==Y&&l!==I||(gn=!0)),wt||(t.layout[ut[j]]=D(C(t,j,Ct+xt),xt),j!==Y&&j!==I||(pn=!0)),gn||pn)for(st=0;U>st;++st)dt=t.children[st],gn&&L(t,dt,l),pn&&L(t,dt,j);for(_t=kt;null!==_t;){for(ht=0;2>ht;ht++)gt=0!==ht?q:R,!n(t.layout[ut[gt]])&&!T(_t,gt)&&N(_t,et[gt])&&N(_t,rt[gt])&&(_t.layout[ut[gt]]=D(C(_t,gt,t.layout[ut[gt]]-h(t,gt)-d(_t,gt)-E(_t,et[gt])-E(_t,rt[gt])),g(_t,gt))),N(_t,rt[gt])&&!N(_t,et[gt])&&(_t.layout[et[gt]]=t.layout[ut[gt]]-_t.layout[ut[gt]]-E(_t,rt[gt]));dt=_t,_t=_t.nextAbsoluteChild,dt.nextAbsoluteChild=null}}function F(t,n,e){t.shouldUpdate=!0;var r=t.style.direction||U,i=!t.isDirty&&t.lastLayout&&t.lastLayout.requestedHeight===t.layout.height&&t.lastLayout.requestedWidth===t.layout.width&&t.lastLayout.parentMaxWidth===n&&t.lastLayout.direction===r;i?(t.layout.width=t.lastLayout.width,t.layout.height=t.lastLayout.height,t.layout.top=t.lastLayout.top,t.layout.left=t.lastLayout.left):(t.lastLayout||(t.lastLayout={}),t.lastLayout.requestedWidth=t.layout.width,t.lastLayout.requestedHeight=t.layout.height,t.lastLayout.parentMaxWidth=n,t.lastLayout.direction=r,t.children.forEach(function(t){t.layout.width=void 0,t.layout.height=void 0,t.layout.top=0,t.layout.left=0}),j(t,n,e),t.lastLayout.width=t.layout.width,t.lastLayout.height=t.layout.height,t.lastLayout.top=t.layout.top,t.lastLayout.left=t.layout.left)}var P,O="inherit",U="ltr",H="rtl",q="row",Y="row-reverse",R="column",I="column-reverse",W="flex-start",B="center",X="flex-end",J="space-between",Z="space-around",$="flex-start",G="center",Q="flex-end",K="stretch",tt="relative",nt="absolute",et={row:"left","row-reverse":"right",column:"top","column-reverse":"bottom"},rt={row:"right","row-reverse":"left",column:"bottom","column-reverse":"top"},it={row:"left","row-reverse":"right",column:"top","column-reverse":"bottom"},ut={row:"width","row-reverse":"width",column:"height","column-reverse":"height"};return{layoutNodeImpl:j,computeLayout:F,fillNodes:t}}();return t.e=n,function(t){n.fillNodes(t),n.computeLayout(t)}})},function(t,n,e){!function(t,e){e(n)}(this,function(t){"use strict";function n(t,n){return n>t?-1:t>n?1:t>=n?0:NaN}function e(t){return 1===t.length&&(t=r(t)),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);i>r;){var u=r+i>>>1;t(n[u],e)<0?r=u+1:i=u}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);i>r;){var u=r+i>>>1;t(n[u],e)>0?i=u:r=u+1}return r}}}function r(t){return function(e,r){return n(t(e),r)}}function i(t,n){return t>n?-1:n>t?1:n>=t?0:NaN}function u(t){return null===t?NaN:+t}function a(t,n){var e,r,i=t.length,a=0,o=0,c=-1,l=0;if(null==n)for(;++c<i;)isNaN(e=u(t[c]))||(r=e-a,a+=r/++l,o+=r*(e-a));else for(;++c<i;)isNaN(e=u(n(t[c],c,t)))||(r=e-a,a+=r/++l,o+=r*(e-a));return l>1?o/(l-1):void 0}function o(t,n){var e=a(t,n);return e?Math.sqrt(e):e}function c(t,n){var e,r,i,u=-1,a=t.length;if(null==n){for(;++u<a;)if(null!=(r=t[u])&&r>=r){e=i=r;break}for(;++u<a;)null!=(r=t[u])&&(e>r&&(e=r),r>i&&(i=r))}else{for(;++u<a;)if(null!=(r=n(t[u],u,t))&&r>=r){e=i=r;break}for(;++u<a;)null!=(r=n(t[u],u,t))&&(e>r&&(e=r),r>i&&(i=r))}return[e,i]}function l(t){return function(){return t}}function f(t){return t}function s(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):3>i?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),u=new Array(i);++r<i;)u[r]=t+r*e;return u}function h(t,n,e){var r=d(t,n,e);return s(Math.ceil(t/r)*r,Math.floor(n/r)*r+r/2,r)}function d(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),u=r/i;return u>=F?i*=10:u>=P?i*=5:u>=O&&(i*=2),t>n?-i:i}function g(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function p(t){return+t}function v(){function t(t){var i,u,a=t.length,o=new Array(a);for(i=0;a>i;++i)o[i]=+n(t[i],i,t);var c=e(o),l=+c[0],f=+c[1],s=r(o,l,f);Array.isArray(s)||(s=h(l,f,+s));var d=s.length;for(i=0;d>i;++i)s[i]=+s[i];for(;s[0]<=l;)s.shift(),--d;for(;s[d-1]>=f;)s.pop(),--d;var g,p=new Array(d+1);for(i=0;d>=i;++i)g=p[i]=[],g.x0=i>0?s[i-1]:l,g.x1=d>i?s[i]:f;for(i=0;a>i;++i)u=o[i],u>=l&&f>=u&&p[V(s,u,0,d)].push(t[i]);return p}var n=f,e=c,r=g;return t.value=function(e){return arguments.length?(n="function"==typeof e?e:l(+e),t):n},t.domain=function(n){return arguments.length?(e="function"==typeof n?n:l([+n[0],+n[1]]),t):e},t.thresholds=function(n){return arguments.length?(r="function"==typeof n?n:l(Array.isArray(n)?Array.prototype.map.call(n,p):+n),t):r},t}function y(t,n,e){if(null==e&&(e=u),r=t.length){if((n=+n)<=0||2>r)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,a=Math.floor(i),o=+e(t[a],a,t),c=+e(t[a+1],a+1,t);return o+(c-o)*(i-a)}}function m(t,e,r){return t.sort(n),Math.ceil((r-e)/(2*(y(t,.75)-y(t,.25))*Math.pow(t.length,-1/3)))}function b(t,n,e){return Math.ceil((e-n)/(3.5*o(t)*Math.pow(t.length,-1/3)))}function x(t,n){var e,r,i=-1,u=t.length;if(null==n){for(;++i<u;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=t[i])&&r>e&&(e=r)}else{for(;++i<u;)if(null!=(r=n(t[i],i,t))&&r>=r){e=r;break}for(;++i<u;)null!=(r=n(t[i],i,t))&&r>e&&(e=r)}return e}function M(t,n){var e,r=0,i=t.length,a=-1,o=i;if(null==n)for(;++a<i;)isNaN(e=u(t[a]))?--o:r+=e;else for(;++a<i;)isNaN(e=u(n(t[a],a,t)))?--o:r+=e;return o?r/o:void 0}function w(t,e){var r,i=[],a=t.length,o=-1;if(null==e)for(;++o<a;)isNaN(r=u(t[o]))||i.push(r);else for(;++o<a;)isNaN(r=u(e(t[o],o,t)))||i.push(r);return y(i.sort(n),.5)}function S(t){for(var n,e,r,i=t.length,u=-1,a=0;++u<i;)a+=t[u].length;for(e=new Array(a);--i>=0;)for(r=t[i],n=r.length;--n>=0;)e[--a]=r[n];return e}function k(t,n){var e,r,i=-1,u=t.length;if(null==n){for(;++i<u;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=t[i])&&e>r&&(e=r)}else{for(;++i<u;)if(null!=(r=n(t[i],i,t))&&r>=r){e=r;break}for(;++i<u;)null!=(r=n(t[i],i,t))&&e>r&&(e=r)}return e}function _(t){for(var n=0,e=t.length-1,r=t[0],i=new Array(0>e?0:e);e>n;)i[n]=[r,r=t[++n]];return i}function T(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r}function N(t,e){if(r=t.length){var r,i,u=0,a=0,o=t[a];for(e||(e=n);++u<r;)(e(i=t[u],o)<0||0!==e(o,o))&&(o=i,a=u);return 0===e(o,o)?a:void 0}}function A(t,n,e){for(var r,i,u=(null==e?t.length:e)-(n=null==n?0:+n);u;)i=Math.random()*u--|0,r=t[u+n],t[u+n]=t[i+n],t[i+n]=r;return t}function E(t,n){var e,r=0,i=t.length,u=-1;if(null==n)for(;++u<i;)(e=+t[u])&&(r+=e);else for(;++u<i;)(e=+n(t[u],u,t))&&(r+=e);return r}function C(t){if(!(i=t.length))return[];for(var n=-1,e=k(t,D),r=new Array(e);++n<e;)for(var i,u=-1,a=r[n]=new Array(i);++u<i;)a[u]=t[u][n];return r}function D(t){return t.length}function z(){return C(arguments)}var L=e(n),V=L.right,j=L.left,F=Math.sqrt(50),P=Math.sqrt(10),O=Math.sqrt(2),U="0.7.1";t.version=U,t.bisect=V,t.bisectRight=V,t.bisectLeft=j,t.ascending=n,t.bisector=e,t.descending=i,t.deviation=o,t.extent=c,t.histogram=v,t.thresholdFreedmanDiaconis=m,t.thresholdScott=b,t.thresholdSturges=g,t.max=x,t.mean=M,t.median=w,t.merge=S,t.min=k,t.pairs=_,t.permute=T,t.quantile=y,t.range=s,t.scan=N,t.shuffle=A,t.sum=E,t.ticks=h,t.tickStep=d,t.transpose=C,t.variance=a,t.zip=z})},function(t,n,e){!function(t,e){e(n)}(this,function(t){"use strict";function n(){}function e(t,e){var r=new n;if(t instanceof n)t.each(function(t,n){r.set(n,t)});else if(Array.isArray(t)){var i,u=-1,a=t.length;if(null==e)for(;++u<a;)r.set(u,t[u]);else for(;++u<a;)r.set(e(i=t[u],u,t),i)}else if(t)for(var o in t)r.set(o,t[o]);return r}function r(){function t(n,i,u,a){if(i>=f.length)return c?c(n):r?n.sort(r):n;for(var o,l,s,h=-1,d=n.length,g=f[i++],p=e(),v=u();++h<d;)(s=p.get(o=g(l=n[h])+""))?s.push(l):p.set(o,[l]);return p.each(function(n,e){a(v,e,t(n,i,u,a))}),v}function n(t,e){if(e>=f.length)return t;var r=[],i=s[e++];return t.each(function(t,i){r.push({key:i,values:n(t,e)})}),i?r.sort(function(t,n){return i(t.key,n.key)}):r}var r,c,l,f=[],s=[];return l={object:function(n){return t(n,0,i,u)},map:function(n){return t(n,0,a,o)},entries:function(e){return n(t(e,0,a,o),0)},key:function(t){return f.push(t),l},sortKeys:function(t){return s[f.length-1]=t,l},sortValues:function(t){return r=t,l},rollup:function(t){return c=t,l}}}function i(){return{}}function u(t,n,e){t[n]=e}function a(){return e()}function o(t,n,e){t.set(n,e)}function c(){}function l(t,n){var e=new c;if(t instanceof c)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}function f(t){var n=[];for(var e in t)n.push(e);return n}function s(t){var n=[];for(var e in t)n.push(t[e]);return n}function h(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n}var d="$";n.prototype=e.prototype={constructor:n,has:function(t){return d+t in this},get:function(t){return this[d+t]},set:function(t,n){return this[d+t]=n,this},remove:function(t){var n=d+t;return n in this&&delete this[n]},clear:function(){for(var t in this)t[0]===d&&delete this[t]},keys:function(){var t=[];for(var n in this)n[0]===d&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)n[0]===d&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)n[0]===d&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)n[0]===d&&++t;return t},empty:function(){for(var t in this)if(t[0]===d)return!1;return!0},each:function(t){for(var n in this)n[0]===d&&t(this[n],n.slice(1),this)}};var g=e.prototype;c.prototype=l.prototype={constructor:c,has:g.has,add:function(t){return t+="",this[d+t]=t,this},remove:g.remove,clear:g.clear,values:g.keys,size:g.size,empty:g.empty,each:g.each};var p="0.1.2";t.version=p,t.nest=r,t.set=l,t.map=e,t.keys=f,t.values=s,t.entries=h})},function(t,n,e){!function(t,e){e(n)}(this,function(t){"use strict";function n(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function e(t){return t=n(Math.abs(t)),t?t[1]:NaN}function r(t,n){return function(e,r){for(var i=e.length,u=[],a=0,o=t[0],c=0;i>0&&o>0&&(c+o+1>r&&(o=Math.max(1,r-c)),u.push(e.substring(i-=o,i+o)),!((c+=o+1)>r));)o=t[a=(a+1)%t.length];return u.reverse().join(n)}}function i(t,n){t=t.toPrecision(n);t:for(var e,r=t.length,i=1,u=-1;r>i;++i)switch(t[i]){case".":u=e=i;break;case"0":0===u&&(u=i),e=i;break;case"e":break t;default:u>0&&(u=0)}return u>0?t.slice(0,u)+t.slice(e+1):t}function u(t,e){var r=n(t,e);if(!r)return t+"";var i=r[0],u=r[1],a=u-(g=3*Math.max(-8,Math.min(8,Math.floor(u/3))))+1,o=i.length;return a===o?i:a>o?i+new Array(a-o+1).join("0"):a>0?i.slice(0,a)+"."+i.slice(a):"0."+new Array(1-a).join("0")+n(t,Math.max(0,e+a-1))[0]}function a(t,e){var r=n(t,e);if(!r)return t+"";var i=r[0],u=r[1];return 0>u?"0."+new Array(-u).join("0")+i:i.length>u+1?i.slice(0,u+1)+"."+i.slice(u+1):i+new Array(u-i.length+2).join("0")}function o(t){return new c(t)}function c(t){if(!(n=v.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",u=n[4]||"",a=!!n[5],o=n[6]&&+n[6],c=!!n[7],l=n[8]&&+n[8].slice(1),f=n[9]||"";"n"===f?(c=!0,f="g"):p[f]||(f=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=u,this.zero=a,this.width=o,this.comma=c,this.precision=l,this.type=f}function l(t){return t}function f(t){function n(t){function n(t){var n,a,o,l=m,p=b;if("c"===v)p=x(t)+p,t="";else{t=+t;var w=(0>t||0>1/t)&&(t*=-1,!0);if(t=x(t,d),w)for(n=-1,a=t.length,w=!1;++n<a;)if(o=t.charCodeAt(n),o>48&&58>o||"x"===v&&o>96&&103>o||"X"===v&&o>64&&71>o){w=!0;break}if(l=(w?"("===i?i:"-":"-"===i||"("===i?"":i)+l,p=p+("s"===v?y[8+g/3]:"")+(w&&"("===i?")":""),M)for(n=-1,a=t.length;++n<a;)if(o=t.charCodeAt(n),48>o||o>57){p=(46===o?c+t.slice(n+1):t.slice(n))+p,t=t.slice(0,n);break}}h&&!f&&(t=u(t,1/0));var S=l.length+t.length+p.length,k=s>S?new Array(s-S+1).join(e):"";switch(h&&f&&(t=u(k+t,k.length?s-p.length:1/0),k=""),r){case"<":return l+t+p+k;case"=":return l+k+t+p;case"^":return k.slice(0,S=k.length>>1)+l+t+p+k.slice(S)}return k+l+t+p}t=o(t);var e=t.fill,r=t.align,i=t.sign,l=t.symbol,f=t.zero,s=t.width,h=t.comma,d=t.precision,v=t.type,m="$"===l?a[0]:"#"===l&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",b="$"===l?a[1]:/[%p]/.test(v)?"%":"",x=p[v],M=!v||/[defgprs%]/.test(v);return d=null==d?v?6:12:/[gprs]/.test(v)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),n.toString=function(){return t+""},n}function i(t,r){var i=n((t=o(t),t.type="f",t)),u=3*Math.max(-8,Math.min(8,Math.floor(e(r)/3))),a=Math.pow(10,-u),c=y[8+u/3];return function(t){return i(a*t)+c}}var u=t.grouping&&t.thousands?r(t.grouping,t.thousands):l,a=t.currency,c=t.decimal;return{format:n,formatPrefix:i}}function s(t){return Math.max(0,-e(Math.abs(t)))}function h(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(e(n)/3)))-e(Math.abs(t)))}function d(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,e(n)-e(t))+1}var g,p={"":i,"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return a(100*t,n)},r:a,s:u,X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},v=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;c.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var y=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],m=f({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),b=f({decimal:",",thousands:".",grouping:[3],currency:[""," €"]}),x=f({decimal:",",thousands:" ",grouping:[3],currency:[""," Kč"]}),M=f({decimal:",",thousands:"'",grouping:[3],currency:[""," CHF"]}),w=f({decimal:",",thousands:".",grouping:[3],currency:[""," €"]}),S=f({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),k=f({decimal:".",thousands:",",grouping:[3],currency:["£",""]}),_=f({decimal:",",thousands:".",grouping:[3],currency:[""," €"]}),T=f({decimal:",",thousands:" ",grouping:[3],currency:[""," €"]}),N=f({decimal:",",thousands:" ",grouping:[3],currency:["","$"]}),A=f({decimal:",",thousands:".",grouping:[3],currency:[""," €"]}),E=f({decimal:".",thousands:",",grouping:[3],currency:["₪",""]}),C=f({decimal:",",thousands:" ",grouping:[3],currency:[""," Ft"]}),D=f({decimal:",",thousands:".",grouping:[3],currency:["€",""]}),z=f({decimal:".",thousands:",",grouping:[3],currency:["","円"]}),L=f({decimal:".",thousands:",",grouping:[3],currency:["₩",""]}),V=f({decimal:",",thousands:".",grouping:[3],currency:[""," ден."]}),j=f({decimal:",",thousands:".",grouping:[3],currency:["€ ",""]}),F=f({decimal:",",thousands:".",grouping:[3],currency:["","zł"]}),P=f({decimal:",",thousands:".",grouping:[3],currency:["R$",""]}),O=f({decimal:",",thousands:" ",grouping:[3],currency:[""," руб."]}),U=f({decimal:",",thousands:" ",grouping:[3],currency:["","SEK"]}),H=f({decimal:".",thousands:",",grouping:[3],currency:["¥",""]}),q=m.format,Y=m.formatPrefix,R="0.5.1";t.version=R,t.format=q,t.formatPrefix=Y,t.formatLocale=f,t.formatCaEs=b,t.formatCsCz=x,t.formatDeCh=M,t.formatDeDe=w,t.formatEnCa=S,t.formatEnGb=k,t.formatEnUs=m,t.formatEsEs=_,t.formatFiFi=T,t.formatFrCa=N,t.formatFrFr=A,t.formatHeIl=E,t.formatHuHu=C,t.formatItIt=D,t.formatJaJp=z,t.formatKoKr=L,t.formatMkMk=V,t.formatNlNl=j,t.formatPlPl=F,t.formatPtBr=P,t.formatRuRu=O,t.formatSvSe=U,t.formatZhCn=H,t.formatSpecifier=o,t.precisionFixed=s,t.precisionPrefix=h,t.precisionRound=d})},function(t,n,e){!function(t,r){r(n,e(2))}(this,function(t,n){"use strict";function e(t){return function(){return t}}function r(t,n){return function(e){return t+e*n}}function i(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}function u(t,n){var i=n-t;return i?r(t,i>180||-180>i?i-360*Math.round(i/360):i):e(isNaN(t)?n:t)}function a(t){return 1===(t=+t)?o:function(n,r){return r-n?i(n,r,t):e(isNaN(n)?r:n)}}function o(t,n){var i=n-t;return i?r(t,i):e(isNaN(t)?n:t)}function c(t,n){var e,r=[],i=[],u=t?t.length:0,a=n?n.length:0,o=Math.min(u,a);for(e=0;o>e;++e)r.push(g(t[e],n[e]));for(;u>e;++e)i[e]=t[e];for(;a>e;++e)i[e]=n[e];return function(t){for(e=0;o>e;++e)i[e]=r[e](t);return i}}function l(t,n){return t=+t,n-=t,function(e){return t+n*e}}function f(t,n){var e,r={},i={};null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={});for(e in t)e in n?r[e]=g(t[e],n[e]):i[e]=t[e];for(e in n)e in t||(i[e]=n[e]);return function(t){for(e in r)i[e]=r[e](t);return i}}function s(t){return function(){return t}}function h(t){return function(n){return t(n)+""}}function d(t,n){var e,r,i,u=V.lastIndex=j.lastIndex=0,a=-1,o=[],c=[];for(t+="",n+="";(e=V.exec(t))&&(r=j.exec(n));)(i=r.index)>u&&(i=n.slice(u,i),o[a]?o[a]+=i:o[++a]=i),(e=e[0])===(r=r[0])?o[a]?o[a]+=r:o[++a]=r:(o[++a]=null,c.push({i:a,x:l(e,r)})),u=j.lastIndex;return u<n.length&&(i=n.slice(u),o[a]?o[a]+=i:o[++a]=i),o.length<2?c[0]?h(c[0].x):s(n):(n=c.length,function(t){for(var e,r=0;n>r;++r)o[(e=c[r]).i]=e.x(t);return o.join("")})}function g(t,r){var i,u=typeof r;return null==r||"boolean"===u?e(r):("number"===u?l:"string"===u?(i=n.color(r))?(r=i,L):d:r instanceof n.color?L:Array.isArray(r)?c:f)(t,r)}function p(t,n){return t=+t,n-=t,function(e){return Math.round(t+n*e)}}function v(t,n,e,r,i,u){if(t*r===n*e)return null;var a=Math.sqrt(t*t+n*n);t/=a,n/=a;var o=t*e+n*r;e-=t*o,r-=n*o;var c=Math.sqrt(e*e+r*r);return e/=c,r/=c,o/=c,n*e>t*r&&(t=-t,n=-n,o=-o,a=-a),{translateX:i,translateY:u,rotate:Math.atan2(n,t)*F,skewX:Math.atan(o)*F,scaleX:a,scaleY:c}}function y(t){if("none"===t)return P;E||(E=document.createElement("DIV"),C=document.documentElement,D=document.defaultView),E.style.transform=t,t=D.getComputedStyle(C.appendChild(E),null).getPropertyValue("transform"),C.removeChild(E);var n=t.slice(7,-1).split(",");return v(+n[0],+n[1],+n[2],+n[3],+n[4],+n[5])}function m(t){z||(z=document.createElementNS("http://www.w3.org/2000/svg","g")),z.setAttribute("transform",null==t?"":t);var n=z.transform.baseVal.consolidate().matrix;return v(n.a,n.b,n.c,n.d,n.e,n.f)}function b(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}function u(t,r,i,u,a,o){if(t!==i||r!==u){var c=a.push("translate(",null,n,null,e);o.push({i:c-4,x:l(t,i)},{i:c-2,x:l(r,u)})}else(i||u)&&a.push("translate("+i+n+u+e)}function a(t,n,e,u){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),u.push({i:e.push(i(e)+"rotate(",null,r)-2,x:l(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}function o(t,n,e,u){t!==n?u.push({i:e.push(i(e)+"skewX(",null,r)-2,x:l(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}function c(t,n,e,r,u,a){if(t!==e||n!==r){var o=u.push(i(u)+"scale(",null,",",null,")");a.push({i:o-4,x:l(t,e)},{i:o-2,x:l(n,r)})}else 1===e&&1===r||u.push(i(u)+"scale("+e+","+r+")")}return function(n,e){var r=[],i=[];return n=t(n),e=t(e),u(n.translateX,n.translateY,e.translateX,e.translateY,r,i),a(n.rotate,e.rotate,r,i),o(n.skewX,e.skewX,r,i),c(n.scaleX,n.scaleY,e.scaleX,e.scaleY,r,i),n=e=null,function(t){for(var n,e=-1,u=i.length;++e<u;)r[(n=i[e]).i]=n.x(t);return r.join("")}}}function x(t){return((t=Math.exp(t))+1/t)/2}function M(t){return((t=Math.exp(t))-1/t)/2}function w(t){return((t=Math.exp(2*t))-1)/(t+1)}function S(t,n){var e,r,i=t[0],u=t[1],a=t[2],o=n[0],c=n[1],l=n[2],f=o-i,s=c-u,h=f*f+s*s;if(R>h)r=Math.log(l/a)/H,e=function(t){return[i+t*f,u+t*s,a*Math.exp(H*t*r)]};else{var d=Math.sqrt(h),g=(l*l-a*a+Y*h)/(2*a*q*d),p=(l*l-a*a-Y*h)/(2*l*q*d),v=Math.log(Math.sqrt(g*g+1)-g),y=Math.log(Math.sqrt(p*p+1)-p);r=(y-v)/H,e=function(t){var n=t*r,e=x(v),o=a/(q*d)*(e*w(H*n+v)-M(v));return[i+o*f,u+o*s,a*e/x(H*n+v)]}}return e.duration=1e3*r,e}function k(t,e){var r=u((t=n.hsl(t)).h,(e=n.hsl(e)).h),i=o(t.s,e.s),a=o(t.l,e.l),c=o(t.opacity,e.opacity);return function(n){return t.h=r(n),t.s=i(n),t.l=a(n),t.opacity=c(n),t+""}}function _(t,e){var r=o((t=n.hsl(t)).h,(e=n.hsl(e)).h),i=o(t.s,e.s),u=o(t.l,e.l),a=o(t.opacity,e.opacity);return function(n){return t.h=r(n),t.s=i(n),t.l=u(n),t.opacity=a(n),t+""}}function T(t,e){var r=o((t=n.lab(t)).l,(e=n.lab(e)).l),i=o(t.a,e.a),u=o(t.b,e.b),a=o(t.opacity,e.opacity);return function(n){return t.l=r(n),t.a=i(n),t.b=u(n),t.opacity=a(n),t+""}}function N(t,e){var r=u((t=n.hcl(t)).h,(e=n.hcl(e)).h),i=o(t.c,e.c),a=o(t.l,e.l),c=o(t.opacity,e.opacity);return function(n){return t.h=r(n),t.c=i(n),t.l=a(n),t.opacity=c(n),t+""}}function A(t,e){var r=o((t=n.hcl(t)).h,(e=n.hcl(e)).h),i=o(t.c,e.c),u=o(t.l,e.l),a=o(t.opacity,e.opacity);return function(n){return t.h=r(n),t.c=i(n),t.l=u(n),t.opacity=a(n),t+""}}var E,C,D,z,L=function X(t){function e(t,e){var i=r((t=n.rgb(t)).r,(e=n.rgb(e)).r),u=r(t.g,e.g),a=r(t.b,e.b),o=r(t.opacity,e.opacity);return function(n){return t.r=i(n),t.g=u(n),t.b=a(n),t.opacity=o(n),t+""}}var r=a(t);return e.gamma=X,e}(1),V=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,j=new RegExp(V.source,"g"),F=180/Math.PI,P={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},O=b(y,"px, ","px)","deg)"),U=b(m,", ",")",")"),H=Math.SQRT2,q=2,Y=4,R=1e-12,I=function J(t){function e(e,r){var i=u((e=n.cubehelix(e)).h,(r=n.cubehelix(r)).h),a=o(e.s,r.s),c=o(e.l,r.l),l=o(e.opacity,r.opacity);return function(n){return e.h=i(n),e.s=a(n),e.l=c(Math.pow(n,t)),e.opacity=l(n),e+""}}return t=+t,e.gamma=J,e}(1),W=function Z(t){function e(e,r){var i=o((e=n.cubehelix(e)).h,(r=n.cubehelix(r)).h),u=o(e.s,r.s),a=o(e.l,r.l),c=o(e.opacity,r.opacity);return function(n){return e.h=i(n),e.s=u(n),e.l=a(Math.pow(n,t)),e.opacity=c(n),e+""}}return t=+t,e.gamma=Z,e}(1),B="0.7.0";t.version=B,t.interpolate=g,t.interpolateArray=c,t.interpolateNumber=l,t.interpolateObject=f,t.interpolateRound=p,t.interpolateString=d,t.interpolateTransformCss=O,t.interpolateTransformSvg=U,t.interpolateZoom=S,t.interpolateRgb=L,t.interpolateHsl=k,t.interpolateHslLong=_,t.interpolateLab=T,t.interpolateHcl=N,t.interpolateHclLong=A,t.interpolateCubehelix=I,t.interpolateCubehelixLong=W;
})},function(t,n,e){!function(t,e){e(n)}(this,function(t){"use strict";function n(){this._x0=this._y0=this._x1=this._y1=null,this._=[]}function e(){return new n}var r=Math.PI,i=2*r,u=1e-6,a=i-u;n.prototype=e.prototype={constructor:n,moveTo:function(t,n){this._.push("M",this._x0=this._x1=+t,",",this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._.push("Z"))},lineTo:function(t,n){this._.push("L",this._x1=+t,",",this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._.push("Q",+t,",",+n,",",this._x1=+e,",",this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,u){this._.push("C",+t,",",+n,",",+e,",",+r,",",this._x1=+i,",",this._y1=+u)},arcTo:function(t,n,e,i,a){t=+t,n=+n,e=+e,i=+i,a=+a;var o=this._x1,c=this._y1,l=e-t,f=i-n,s=o-t,h=c-n,d=s*s+h*h;if(0>a)throw new Error("negative radius: "+a);if(null===this._x1)this._.push("M",this._x1=t,",",this._y1=n);else if(d>u)if(Math.abs(h*l-f*s)>u&&a){var g=e-o,p=i-c,v=l*l+f*f,y=g*g+p*p,m=Math.sqrt(v),b=Math.sqrt(d),x=a*Math.tan((r-Math.acos((v+d-y)/(2*m*b)))/2),M=x/b,w=x/m;Math.abs(M-1)>u&&this._.push("L",t+M*s,",",n+M*h),this._.push("A",a,",",a,",0,0,",+(h*g>s*p),",",this._x1=t+w*l,",",this._y1=n+w*f)}else this._.push("L",this._x1=t,",",this._y1=n);else;},arc:function(t,n,e,o,c,l){t=+t,n=+n,e=+e;var f=e*Math.cos(o),s=e*Math.sin(o),h=t+f,d=n+s,g=1^l,p=l?o-c:c-o;if(0>e)throw new Error("negative radius: "+e);null===this._x1?this._.push("M",h,",",d):(Math.abs(this._x1-h)>u||Math.abs(this._y1-d)>u)&&this._.push("L",h,",",d),e&&(p>a?this._.push("A",e,",",e,",0,1,",g,",",t-f,",",n-s,"A",e,",",e,",0,1,",g,",",this._x1=h,",",this._y1=d):(0>p&&(p=p%i+i),this._.push("A",e,",",e,",0,",+(p>=r),",",g,",",this._x1=t+e*Math.cos(c),",",this._y1=n+e*Math.sin(c))))},rect:function(t,n,e,r){this._.push("M",this._x0=this._x1=+t,",",this._y0=this._y1=+n,"h",+e,"v",+r,"h",-e,"Z")},toString:function(){return this._.join("")}};var o="0.1.5";t.version=o,t.path=e})},function(t,n,e){!function(t,r){r(n,e(3))}(this,function(t,n){"use strict";function e(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function r(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function i(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function u(t){function n(t,n){return function(e){var r,i,u,a=[],o=-1,c=0,l=t.length;for(e instanceof Date||(e=new Date(+e));++o<l;)37===t.charCodeAt(o)&&(a.push(t.slice(c,o)),null!=(i=nt[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(u=n[r])&&(r=u(e,i)),a.push(r),c=o+1);return a.push(t.slice(c,o)),a.join("")}}function u(t,n){return function(e){var u=i(1900),o=a(u,t,e+="",0);if(o!=e.length)return null;if("p"in u&&(u.H=u.H%12+12*u.p),"W"in u||"U"in u){"w"in u||(u.w="W"in u?1:0);var c="Z"in u?r(i(u.y)).getUTCDay():n(i(u.y)).getDay();u.m=0,u.d="W"in u?(u.w+6)%7+7*u.W-(c+5)%7:u.w+7*u.U-(c+6)%7}return"Z"in u?(u.H+=u.Z/100|0,u.M+=u.Z%100,r(u)):n(u)}}function a(t,n,e,r){for(var i,u,a=0,o=n.length,c=e.length;o>a;){if(r>=c)return-1;if(i=n.charCodeAt(a++),37===i){if(i=n.charAt(a++),u=Pt[i in nt?n.charAt(a++):i],!u||(r=u(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function o(t,n,e){var r=_t.exec(n.slice(e));return r?(t.p=Tt[r[0].toLowerCase()],e+r[0].length):-1}function K(t,n,e){var r=Et.exec(n.slice(e));return r?(t.w=Ct[r[0].toLowerCase()],e+r[0].length):-1}function tt(t,n,e){var r=Nt.exec(n.slice(e));return r?(t.w=At[r[0].toLowerCase()],e+r[0].length):-1}function et(t,n,e){var r=Lt.exec(n.slice(e));return r?(t.m=Vt[r[0].toLowerCase()],e+r[0].length):-1}function rt(t,n,e){var r=Dt.exec(n.slice(e));return r?(t.m=zt[r[0].toLowerCase()],e+r[0].length):-1}function it(t,n,e){return a(t,yt,n,e)}function ut(t,n,e){return a(t,mt,n,e)}function at(t,n,e){return a(t,bt,n,e)}function ot(t){return wt[t.getDay()]}function ct(t){return Mt[t.getDay()]}function lt(t){return kt[t.getMonth()]}function ft(t){return St[t.getMonth()]}function st(t){return xt[+(t.getHours()>=12)]}function ht(t){return wt[t.getUTCDay()]}function dt(t){return Mt[t.getUTCDay()]}function gt(t){return kt[t.getUTCMonth()]}function pt(t){return St[t.getUTCMonth()]}function vt(t){return xt[+(t.getUTCHours()>=12)]}var yt=t.dateTime,mt=t.date,bt=t.time,xt=t.periods,Mt=t.days,wt=t.shortDays,St=t.months,kt=t.shortMonths,_t=c(xt),Tt=l(xt),Nt=c(Mt),At=l(Mt),Et=c(wt),Ct=l(wt),Dt=c(St),zt=l(St),Lt=c(kt),Vt=l(kt),jt={a:ot,A:ct,b:lt,B:ft,c:null,d:k,e:k,H:_,I:T,j:N,L:A,m:E,M:C,p:st,S:D,U:z,w:L,W:V,x:null,X:null,y:j,Y:F,Z:P,"%":Q},Ft={a:ht,A:dt,b:gt,B:pt,c:null,d:O,e:O,H:U,I:H,j:q,L:Y,m:R,M:I,p:vt,S:W,U:B,w:X,W:J,x:null,X:null,y:Z,Y:$,Z:G,"%":Q},Pt={a:K,A:tt,b:et,B:rt,c:it,d:y,e:y,H:b,I:b,j:m,L:w,m:v,M:x,p:o,S:M,U:s,w:f,W:h,x:ut,X:at,y:g,Y:d,Z:p,"%":S};return jt.x=n(mt,jt),jt.X=n(bt,jt),jt.c=n(yt,jt),Ft.x=n(mt,Ft),Ft.X=n(bt,Ft),Ft.c=n(yt,Ft),{format:function(t){var e=n(t+="",jt);return e.toString=function(){return t},e},parse:function(t){var n=u(t+="",e);return n.toString=function(){return t},n},utcFormat:function(t){var e=n(t+="",Ft);return e.toString=function(){return t},e},utcParse:function(t){var n=u(t,r);return n.toString=function(){return t},n}}}function a(t,n,e){var r=0>t?"-":"",i=(r?-t:t)+"",u=i.length;return r+(e>u?new Array(e-u+1).join(n)+i:i)}function o(t){return t.replace(it,"\\$&")}function c(t){return new RegExp("^(?:"+t.map(o).join("|")+")","i")}function l(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function f(t,n,e){var r=et.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function s(t,n,e){var r=et.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function h(t,n,e){var r=et.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function d(t,n,e){var r=et.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function g(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function p(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function v(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function y(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function m(t,n,e){var r=et.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function b(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function x(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function M(t,n,e){var r=et.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function w(t,n,e){var r=et.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function S(t,n,e){var r=rt.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function k(t,n){return a(t.getDate(),n,2)}function _(t,n){return a(t.getHours(),n,2)}function T(t,n){return a(t.getHours()%12||12,n,2)}function N(t,e){return a(1+n.timeDay.count(n.timeYear(t),t),e,3)}function A(t,n){return a(t.getMilliseconds(),n,3)}function E(t,n){return a(t.getMonth()+1,n,2)}function C(t,n){return a(t.getMinutes(),n,2)}function D(t,n){return a(t.getSeconds(),n,2)}function z(t,e){return a(n.timeSunday.count(n.timeYear(t),t),e,2)}function L(t){return t.getDay()}function V(t,e){return a(n.timeMonday.count(n.timeYear(t),t),e,2)}function j(t,n){return a(t.getFullYear()%100,n,2)}function F(t,n){return a(t.getFullYear()%1e4,n,4)}function P(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+a(n/60|0,"0",2)+a(n%60,"0",2)}function O(t,n){return a(t.getUTCDate(),n,2)}function U(t,n){return a(t.getUTCHours(),n,2)}function H(t,n){return a(t.getUTCHours()%12||12,n,2)}function q(t,e){return a(1+n.utcDay.count(n.utcYear(t),t),e,3)}function Y(t,n){return a(t.getUTCMilliseconds(),n,3)}function R(t,n){return a(t.getUTCMonth()+1,n,2)}function I(t,n){return a(t.getUTCMinutes(),n,2)}function W(t,n){return a(t.getUTCSeconds(),n,2)}function B(t,e){return a(n.utcSunday.count(n.utcYear(t),t),e,2)}function X(t){return t.getUTCDay()}function J(t,e){return a(n.utcMonday.count(n.utcYear(t),t),e,2)}function Z(t,n){return a(t.getUTCFullYear()%100,n,2)}function $(t,n){return a(t.getUTCFullYear()%1e4,n,4)}function G(){return"+0000"}function Q(){return"%"}function K(t){return t.toISOString()}function tt(t){var n=new Date(t);return isNaN(n)?null:n}var nt={"-":"",_:" ",0:"0"},et=/^\s*\d+/,rt=/^%/,it=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ut=u({dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),at=u({dateTime:"%A, %e de %B de %Y, %X",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["diumenge","dilluns","dimarts","dimecres","dijous","divendres","dissabte"],shortDays:["dg.","dl.","dt.","dc.","dj.","dv.","ds."],months:["gener","febrer","març","abril","maig","juny","juliol","agost","setembre","octubre","novembre","desembre"],shortMonths:["gen.","febr.","març","abr.","maig","juny","jul.","ag.","set.","oct.","nov.","des."]}),ot=u({dateTime:"%A, der %e. %B %Y, %X",date:"%d.%m.%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],shortDays:["So","Mo","Di","Mi","Do","Fr","Sa"],months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],shortMonths:["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"]}),ct=u({dateTime:"%A, der %e. %B %Y, %X",date:"%d.%m.%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sonntag","Montag","Dienstag","Mittwoch","Donnerstag","Freitag","Samstag"],shortDays:["So","Mo","Di","Mi","Do","Fr","Sa"],months:["Januar","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember"],shortMonths:["Jan","Feb","Mrz","Apr","Mai","Jun","Jul","Aug","Sep","Okt","Nov","Dez"]}),lt=u({dateTime:"%a %b %e %X %Y",date:"%Y-%m-%d",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),ft=u({dateTime:"%a %e %b %X %Y",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),st=u({dateTime:"%A, %e de %B de %Y, %X",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["domingo","lunes","martes","miércoles","jueves","viernes","sábado"],shortDays:["dom","lun","mar","mié","jue","vie","sáb"],months:["enero","febrero","marzo","abril","mayo","junio","julio","agosto","septiembre","octubre","noviembre","diciembre"],shortMonths:["ene","feb","mar","abr","may","jun","jul","ago","sep","oct","nov","dic"]}),ht=u({dateTime:"%A, %-d. %Bta %Y klo %X",date:"%-d.%-m.%Y",time:"%H:%M:%S",periods:["a.m.","p.m."],days:["sunnuntai","maanantai","tiistai","keskiviikko","torstai","perjantai","lauantai"],shortDays:["Su","Ma","Ti","Ke","To","Pe","La"],months:["tammikuu","helmikuu","maaliskuu","huhtikuu","toukokuu","kesäkuu","heinäkuu","elokuu","syyskuu","lokakuu","marraskuu","joulukuu"],shortMonths:["Tammi","Helmi","Maalis","Huhti","Touko","Kesä","Heinä","Elo","Syys","Loka","Marras","Joulu"]}),dt=u({dateTime:"%a %e %b %Y %X",date:"%Y-%m-%d",time:"%H:%M:%S",periods:["",""],days:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],shortDays:["dim","lun","mar","mer","jeu","ven","sam"],months:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],shortMonths:["jan","fév","mar","avr","mai","jui","jul","aoû","sep","oct","nov","déc"]}),gt=u({dateTime:"%A, le %e %B %Y, %X",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["dimanche","lundi","mardi","mercredi","jeudi","vendredi","samedi"],shortDays:["dim.","lun.","mar.","mer.","jeu.","ven.","sam."],months:["janvier","février","mars","avril","mai","juin","juillet","août","septembre","octobre","novembre","décembre"],shortMonths:["janv.","févr.","mars","avr.","mai","juin","juil.","août","sept.","oct.","nov.","déc."]}),pt=u({dateTime:"%A, %e ב%B %Y %X",date:"%d.%m.%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["ראשון","שני","שלישי","רביעי","חמישי","שישי","שבת"],shortDays:["א׳","ב׳","ג׳","ד׳","ה׳","ו׳","ש׳"],months:["ינואר","פברואר","מרץ","אפריל","מאי","יוני","יולי","אוגוסט","ספטמבר","אוקטובר","נובמבר","דצמבר"],shortMonths:["ינו׳","פבר׳","מרץ","אפר׳","מאי","יוני","יולי","אוג׳","ספט׳","אוק׳","נוב׳","דצמ׳"]}),vt=u({dateTime:"%Y. %B %-e., %A %X",date:"%Y. %m. %d.",time:"%H:%M:%S",periods:["de.","du."],days:["vasárnap","hétfő","kedd","szerda","csütörtök","péntek","szombat"],shortDays:["V","H","K","Sze","Cs","P","Szo"],months:["január","február","március","április","május","június","július","augusztus","szeptember","október","november","december"],shortMonths:["jan.","feb.","már.","ápr.","máj.","jún.","júl.","aug.","szept.","okt.","nov.","dec."]}),yt=u({dateTime:"%A %e %B %Y, %X",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Domenica","Lunedì","Martedì","Mercoledì","Giovedì","Venerdì","Sabato"],shortDays:["Dom","Lun","Mar","Mer","Gio","Ven","Sab"],months:["Gennaio","Febbraio","Marzo","Aprile","Maggio","Giugno","Luglio","Agosto","Settembre","Ottobre","Novembre","Dicembre"],shortMonths:["Gen","Feb","Mar","Apr","Mag","Giu","Lug","Ago","Set","Ott","Nov","Dic"]}),mt=u({dateTime:"%Y %b %e %a %X",date:"%Y/%m/%d",time:"%H:%M:%S",periods:["AM","PM"],days:["日曜日","月曜日","火曜日","水曜日","木曜日","金曜日","土曜日"],shortDays:["日","月","火","水","木","金","土"],months:["睦月","如月","弥生","卯月","皐月","水無月","文月","葉月","長月","神無月","霜月","師走"],shortMonths:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]}),bt=u({dateTime:"%Y/%m/%d %a %X",date:"%Y/%m/%d",time:"%H:%M:%S",periods:["오전","오후"],days:["일요일","월요일","화요일","수요일","목요일","금요일","토요일"],shortDays:["일","월","화","수","목","금","토"],months:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"],shortMonths:["1월","2월","3월","4월","5월","6월","7월","8월","9월","10월","11월","12월"]}),xt=u({dateTime:"%A, %e %B %Y г. %X",date:"%d.%m.%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["недела","понеделник","вторник","среда","четврток","петок","сабота"],shortDays:["нед","пон","вто","сре","чет","пет","саб"],months:["јануари","февруари","март","април","мај","јуни","јули","август","септември","октомври","ноември","декември"],shortMonths:["јан","фев","мар","апр","мај","јун","јул","авг","сеп","окт","ное","дек"]}),Mt=u({dateTime:"%a %e %B %Y %T",date:"%d-%m-%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["zondag","maandag","dinsdag","woensdag","donderdag","vrijdag","zaterdag"],shortDays:["zo","ma","di","wo","do","vr","za"],months:["januari","februari","maart","april","mei","juni","juli","augustus","september","oktober","november","december"],shortMonths:["jan","feb","mrt","apr","mei","jun","jul","aug","sep","okt","nov","dec"]}),wt=u({dateTime:"%A, %e %B %Y, %X",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Niedziela","Poniedziałek","Wtorek","Środa","Czwartek","Piątek","Sobota"],shortDays:["Niedz.","Pon.","Wt.","Śr.","Czw.","Pt.","Sob."],months:["Styczeń","Luty","Marzec","Kwiecień","Maj","Czerwiec","Lipiec","Sierpień","Wrzesień","Październik","Listopad","Grudzień"],shortMonths:["Stycz.","Luty","Marz.","Kwie.","Maj","Czerw.","Lipc.","Sierp.","Wrz.","Paźdz.","Listop.","Grudz."]}),St=u({dateTime:"%A, %e de %B de %Y. %X",date:"%d/%m/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Domingo","Segunda","Terça","Quarta","Quinta","Sexta","Sábado"],shortDays:["Dom","Seg","Ter","Qua","Qui","Sex","Sáb"],months:["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],shortMonths:["Jan","Fev","Mar","Abr","Mai","Jun","Jul","Ago","Set","Out","Nov","Dez"]}),kt=u({dateTime:"%A, %e %B %Y г. %X",date:"%d.%m.%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],shortDays:["вс","пн","вт","ср","чт","пт","сб"],months:["января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря"],shortMonths:["янв","фев","мар","апр","май","июн","июл","авг","сен","окт","ноя","дек"]}),_t=u({dateTime:"%A den %d %B %Y %X",date:"%Y-%m-%d",time:"%H:%M:%S",periods:["fm","em"],days:["Söndag","Måndag","Tisdag","Onsdag","Torsdag","Fredag","Lördag"],shortDays:["Sön","Mån","Tis","Ons","Tor","Fre","Lör"],months:["Januari","Februari","Mars","April","Maj","Juni","Juli","Augusti","September","Oktober","November","December"],shortMonths:["Jan","Feb","Mar","Apr","Maj","Jun","Jul","Aug","Sep","Okt","Nov","Dec"]}),Tt=u({dateTime:"%a %b %e %X %Y",date:"%Y/%-m/%-d",time:"%H:%M:%S",periods:["上午","下午"],days:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],shortDays:["星期日","星期一","星期二","星期三","星期四","星期五","星期六"],months:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"],shortMonths:["一月","二月","三月","四月","五月","六月","七月","八月","九月","十月","十一月","十二月"]}),Nt="%Y-%m-%dT%H:%M:%S.%LZ",At=Date.prototype.toISOString?K:ut.utcFormat(Nt),Et=+new Date("2000-01-01T00:00:00.000Z")?tt:ut.utcParse(Nt),Ct=ut.format,Dt=ut.parse,zt=ut.utcFormat,Lt=ut.utcParse,Vt="0.3.1";t.version=Vt,t.timeFormat=Ct,t.timeParse=Dt,t.utcFormat=zt,t.utcParse=Lt,t.timeFormatLocale=u,t.timeFormatCaEs=at,t.timeFormatDeCh=ot,t.timeFormatDeDe=ct,t.timeFormatEnCa=lt,t.timeFormatEnGb=ft,t.timeFormatEnUs=ut,t.timeFormatEsEs=st,t.timeFormatFiFi=ht,t.timeFormatFrCa=dt,t.timeFormatFrFr=gt,t.timeFormatHeIl=pt,t.timeFormatHuHu=vt,t.timeFormatItIt=yt,t.timeFormatJaJp=mt,t.timeFormatKoKr=bt,t.timeFormatMkMk=xt,t.timeFormatNlNl=Mt,t.timeFormatPlPl=wt,t.timeFormatPtBr=St,t.timeFormatRuRu=kt,t.timeFormatSvSe=_t,t.timeFormatZhCn=Tt,t.isoFormat=At,t.isoParse=Et})},function(t,n,e){!function(t,r){r(n,e(13))}(this,function(t,n){"use strict";var e=function(t){return"function"==typeof t?t:function(){return t}},r=arguments,i=function(){var t=null,i=function(t){return t.date},u=function(t){return t.open},a=function(t){return t.high},o=function(t){return t.low},c=function(t){return t.close},l="vertical",f=e(3),s=function(e){var r=t?void 0:t=n.path();return e.forEach(function(n,e){var r=i(n,e),s=u(n,e),h=a(n,e),d=o(n,e),g=c(n,e),p=f(n,e)/2;"vertical"===l?(t.moveTo(r,d),t.lineTo(r,h),t.moveTo(r,s),t.lineTo(r-p,s),t.moveTo(r,g),t.lineTo(r+p,g)):(t.moveTo(d,r),t.lineTo(h,r),t.moveTo(s,r),t.lineTo(s,r+p),t.moveTo(g,r),t.lineTo(g,r-p))}),r&&(t=null,r.toString()||null)};return s.context=function(n){return r.length?(t=n,s):t},s.x=function(t){return r.length?(i=e(t),s):i},s.open=function(t){return r.length?(u=e(t),s):u},s.high=function(t){return r.length?(a=e(t),s):a},s.low=function(t){return r.length?(o=e(t),s):o},s.close=function(t){return r.length?(c=e(t),s):c},s.width=function(t){return r.length?(f=e(t),s):f},s.orient=function(t){return r.length?(l=t,s):l},s},u=arguments,a=function(){var t=null,r=function(t){return t.x},i=function(t){return t.y},a="center",o="center",c=function(t){return t.height},l=e(3),f=function(e,u){var f=t?void 0:t=n.path();return e.forEach(function(n,e){var f=r.call(this,n,u||e),s=i.call(this,n,u||e),h=c.call(this,n,u||e),d=l.call(this,n,u||e),g=void 0;switch(a){case"left":g=d;break;case"right":g=0;break;case"center":g=d/2;break;default:throw new Error("Invalid horizontal alignment "+a)}var p=void 0;switch(o){case"bottom":p=-h;break;case"top":p=0;break;case"center":p=h/2;break;default:throw new Error("Invalid vertical alignment "+o)}t.rect(f-g,s-p,d,h)},this),f&&(t=null,f.toString()||null)};return f.context=function(n){return u.length?(t=n,f):t},f.x=function(t){return u.length?(r=e(t),f):r},f.y=function(t){return u.length?(i=e(t),f):i},f.width=function(t){return u.length?(l=e(t),f):l},f.horizontalAlign=function(t){return u.length?(a=t,f):a},f.height=function(t){return u.length?(c=e(t),f):c},f.verticalAlign=function(t){return u.length?(o=t,f):o},f},o=arguments,c=function(){var t=null,r=function(t){return t.date},i=function(t){return t.open},u=function(t){return t.high},a=function(t){return t.low},c=function(t){return t.close},l=e(3),f=function(e){var o=t?void 0:t=n.path();return e.forEach(function(n,e){var o=r(n,e),f=i(n,e),s=u(n,e),h=a(n,e),d=c(n,e),g=l(n,e),p=g/2;t.rect(o-p,f,g,d-f),t.moveTo(o,Math.min(d,f)),t.lineTo(o,s),t.moveTo(o,Math.max(d,f)),t.lineTo(o,h)}),o&&(t=null,o.toString()||null)};return f.context=function(n){return o.length?(t=n,f):t},f.x=function(t){return o.length?(r=e(t),f):r},f.open=function(t){return o.length?(i=e(t),f):i},f.high=function(t){return o.length?(u=e(t),f):u},f.low=function(t){return o.length?(a=e(t),f):a},f.close=function(t){return o.length?(c=e(t),f):c},f.width=function(t){return o.length?(l=e(t),f):l},f},l=arguments,f=function(){var t=null,r=function(t){return t.value},i=function(t){return t.median},u=function(t){return t.upperQuartile},a=function(t){return t.lowerQuartile},o=function(t){return t.high},c=function(t){return t.low},f="vertical",s=e(5),h=e(.5),d=function(e){var l=t?void 0:t=n.path();return e.forEach(function(n,e){var l=r(n,e),d=s(n,e),g=d/2,p=d*h(n,e),v=p/2,y=o(n,e),m=u(n,e),b=i(n,e),x=a(n,e),M=c(n,e),w=x-m;"vertical"===f?(t.moveTo(l-v,y),t.lineTo(l+v,y),t.moveTo(l,y),t.lineTo(l,m),t.rect(l-g,m,d,w),t.moveTo(l-g,b),t.lineTo(l+g,b),t.moveTo(l,x),t.lineTo(l,M),t.moveTo(l-v,M),t.lineTo(l+v,M)):(t.moveTo(M,l-v),t.lineTo(M,l+v),t.moveTo(M,l),t.lineTo(x,l),t.rect(x,l-g,-w,d),t.moveTo(b,l-g),t.lineTo(b,l+g),t.moveTo(m,l),t.lineTo(y,l),t.moveTo(y,l-v),t.lineTo(y,l+v))}),l&&(t=null,l.toString()||null)};return d.context=function(n){return l.length?(t=n,d):t},d.value=function(t){return l.length?(r=e(t),d):r},d.median=function(t){return l.length?(i=e(t),d):i},d.upperQuartile=function(t){return l.length?(u=e(t),d):u},d.lowerQuartile=function(t){return l.length?(a=e(t),d):a},d.high=function(t){return l.length?(o=e(t),d):o},d.low=function(t){return l.length?(c=e(t),d):c},d.width=function(t){return l.length?(s=e(t),d):s},d.orient=function(t){return l.length?(f=t,d):f},d.cap=function(t){return l.length?(h=e(t),d):h},d},s=arguments,h=function(){var t=null,r=function(t){return t.x},i=function(t){return t.high},u=function(t){return t.low},a="vertical",o=e(5),c=function(e){var c=t?void 0:t=n.path();return e.forEach(function(n,e){var c=r(n,e),l=o(n,e),f=l/2,s=i(n,e),h=u(n,e);"vertical"===a?(t.moveTo(c-f,s),t.lineTo(c+f,s),t.moveTo(c,s),t.lineTo(c,h),t.moveTo(c-f,h),t.lineTo(c+f,h)):(t.moveTo(h,c-f),t.lineTo(h,c+f),t.moveTo(h,c),t.lineTo(s,c),t.moveTo(s,c-f),t.lineTo(s,c+f))}),c&&(t=null,c.toString()||null)};return c.context=function(n){return s.length?(t=n,c):t},c.value=function(t){return s.length?(r=e(t),c):r},c.high=function(t){return s.length?(i=e(t),c):i},c.low=function(t){return s.length?(u=e(t),c):u},c.width=function(t){return s.length?(o=e(t),c):o},c.orient=function(t){return s.length?(a=t,c):a},c};t.ohlc=i,t.bar=a,t.candlestick=c,t.boxPlot=f,t.errorBar=h})},function(t,n){!function(t){if(t&&!("innerHTML"in t.prototype)){var n=function(t,e){var r=t.nodeType;if(3==r)e.push(t.textContent.replace(/&/,"&amp;").replace(/</,"&lt;").replace(">","&gt;"));else if(1==r){if(e.push("<",t.tagName),t.hasAttributes())for(var i=t.attributes,u=0,a=i.length;a>u;++u){var o=i.item(u);e.push(" ",o.name,"='",o.value,"'")}if(t.hasChildNodes()){e.push(">");for(var c=t.childNodes,u=0,a=c.length;a>u;++u)n(c.item(u),e);e.push("</",t.tagName,">")}else e.push("/>")}else{if(8!=r)throw"Error serializing XML. Unhandled node of type: "+r;e.push("<!--",t.nodeValue,"-->")}};Object.defineProperty(t.prototype,"innerHTML",{get:function(){for(var t=[],e=this.firstChild;e;)n(e,t),e=e.nextSibling;return t.join("")},set:function(t){for(;this.firstChild;)this.removeChild(this.firstChild);try{var n=new DOMParser;n.async=!1,sXML="<svg xmlns='http://www.w3.org/2000/svg'>"+t+"</svg>";for(var e=n.parseFromString(sXML,"text/xml").documentElement,r=e.firstChild;r;)this.appendChild(this.ownerDocument.importNode(r,!0)),r=r.nextSibling}catch(i){throw new Error("Error parsing XML string")}}})}}((0,eval)("this").SVGElement)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,